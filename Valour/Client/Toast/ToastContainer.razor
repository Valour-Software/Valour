<CascadingValue Value="@this">
    @ChildContent
    <div class="toast-container">
        @for (int i = 0; i < ActiveToasts.Count; i++)
        {
            var toast = ActiveToasts[i];
            <ToastCard @key="@toast" @ref="@toast.Card" TopOffset="@(50 * i)" Toast="@toast" />
        }
    </div>
</CascadingValue>

@code {
    
    public static ToastContainer Instance { get; set; }

    protected override void OnInitialized()
    {
        Instance = this;
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    public List<ToastData> ActiveToasts { get; set; } = new List<ToastData>();

    public async Task ErrorToast(ToastData toast)
    {
        var progressToast = new ProgressToastData()
        {
            Message = toast.Message,
            ProgressTask = Task.CompletedTask,
        };
    }

    public async Task WaitToast(ProgressToastData toast)
    {
        AddToast(toast);

        try
        {
            await toast.ProgressTask;

            if (toast.Card is null)
            {
                RemoveToast(toast);
            }

            toast.Card.SetProgressState(ToastProgressState.Success);
        }
        catch (Exception e)
        {
            toast.Card.SetProgressState(ToastProgressState.Failure);
            Console.WriteLine($"Exception in Toast Task: {e.Message}");
        }
        
        await Task.Delay(500);

        await toast.Card.ShrinkAndRemove();
        
        StateHasChanged();
    }
    
    public async Task<T> WaitToastWithTaskResult<T>(ProgressToastData<T> toast) where T : ITaskResult
    {
        AddToast(toast);

        try {
            var result = await toast.ProgressTask;

            if (toast.Card is null)
            {
                RemoveToast(toast);
            }
            
            toast.Message = result.Message;

            if (result.Success)
            {
                if (toast.SuccessMessage is not null)
                {
                    toast.Message = toast.SuccessMessage;
                }
                
                toast.Card.SetProgressState(ToastProgressState.Success);
            }
            else
            {
                if (toast.FailureMessage is not null)
                {
                    toast.Message = toast.FailureMessage;
                }
                
                toast.Card.SetProgressState(ToastProgressState.Failure);
            }
        }
        catch (Exception e)
        {
            toast.Message = "An error occurred. Please try again later.";
            toast.Card.SetProgressState(ToastProgressState.Failure);
            Console.WriteLine($"Exception in Toast Task: {e.Message}");
        }

        // Fire this off async so it doesn't block task completion
        _ = Task.Run(async () =>
        {
            await Task.Delay(500);
        
            await toast.Card.ShrinkAndRemove();
        
            StateHasChanged();
        });
        
        return toast.ProgressTask.Result;
    }
    
    public async Task<TaskResult> WaitToastWithTaskResult(ProgressToastData<TaskResult> toast)
    {
        AddToast(toast);

        try {
            var result = await Task.Run(async () => await toast.ProgressTask);

            if (toast.Card is null)
            {
                RemoveToast(toast);
            }
            
            toast.Message = result.Message;

            if (result.Success)
            {
                if (toast.SuccessMessage is not null)
                {
                    toast.Message = toast.SuccessMessage;
                }
                
                toast.Card.SetProgressState(ToastProgressState.Success);
            }
            else
            {
                if (toast.FailureMessage is not null)
                {
                    toast.Message = toast.FailureMessage;
                }
                
                toast.Card.SetProgressState(ToastProgressState.Failure);
            }
        }
        catch (Exception e)
        {
            toast.Message = "An error occurred. Please try again later.";
            toast.Card.SetProgressState(ToastProgressState.Failure);
            Console.WriteLine($"Exception in Toast Task: {e.Message}");
        }
        
        // Fire this off async so it doesn't block task completion
        _ = Task.Run(async () =>
        {
            await Task.Delay(500);
        
            await toast.Card.ShrinkAndRemove();
        
            StateHasChanged();
        });
        
        return toast.ProgressTask.Result;
    }

    public async Task<T> WaitToastWithResult<T>(ProgressToastData<T> toast)
    {
        AddToast(toast);

        try {
            await toast.ProgressTask;

            if (toast.Card is null)
            {
                RemoveToast(toast);
            }

            toast.Card.SetProgressState(ToastProgressState.Success);
        }
        catch (Exception e)
        {
            toast.Message = "An error occurred. Please try again later.";
            toast.Card.SetProgressState(ToastProgressState.Failure);
            Console.WriteLine($"Exception in Toast Task: {e.Message}");
        }

        await Task.Delay(500);
        
        await toast.Card.ShrinkAndRemove();
        
        StateHasChanged();
        
        return toast.ProgressTask.Result;
    }
    
    public void AddToast(ToastData toast)
    {
        ActiveToasts.Add(toast);
        StateHasChanged();
    }
    
    public void RemoveToast(ToastData toast)
    {
        ActiveToasts.Remove(toast);
        StateHasChanged();
    }
}