@inherits ContextMenu<UserContextMenu.UserContextParams>
@inject IJSRuntime JsRuntime
@inject ValourClient Client
@inject FriendService FriendService
@inject ChannelService ChannelService

<ContextMenuItem OnClickAsync="@OnClickMessage">
	<Label>Message</Label>
	<Icon><i class="bi bi-chat-dots-fill"></i></Icon>
</ContextMenuItem>
@if (_isFriend)
{
	<ContextMenuItem OnClickAsync="@OnClickRemoveFriend">
		<Label>Remove Friend</Label>
		<Icon>-<i class="bi bi-person-fill"></i></Icon>
	</ContextMenuItem>
}
else if (_isFriendRequested)
{
	<ContextMenuItem OnClickAsync="@OnClickRemoveFriend">
		Cancel Request
	</ContextMenuItem>
}
else
{
	<ContextMenuItem OnClickAsync="@OnClickAddFriend">
		<Label>
			Add Friend
		</Label>
		<Icon>+<i class="bi bi-person-fill"></i></Icon>
	</ContextMenuItem>
}

<ContextSubMenu>
	<Label>Copy</Label>
	<Icon><i class="bi bi-caret-right-fill"></i></Icon>
	<Content>
		<ContextMenuItem OnClickAsync="@OnClickCopyUsername">Username</ContextMenuItem>
		<ContextMenuItem OnClickAsync="@OnClickCopyUserId">User Id</ContextMenuItem>
	</Content>
</ContextSubMenu>

@code {

	public class UserContextParams
	{
		public User User;
	}

	protected override void OnInitialized()
	{
		_isFriendRequested = FriendService.OutgoingRequests.Any(x => x.Id == Data.User.Id);
		_isFriend = FriendService.Friends.Any(x => x.Id == Data.User.Id);
	}

	private bool _isFriend;
	private bool _isFriendRequested;

	private async Task OnClickAddFriend()
	{
		var result = await FriendService.AddFriendAsync(Data.User.NameAndTag);

		if (!result.Success)
		{
			Client.Logger.Log<UserContextMenu>($"Failed to add friend:\n{result.Message}", "orange");
			return;
		}

		_isFriend = true;
		StateHasChanged();
	}

	private async Task OnClickRemoveFriend()
	{
		var result = await FriendService.RemoveFriendAsync(Data.User.NameAndTag);

		if (!result.Success)
		{
			Client.Logger.Log<UserContextMenu>($"Failed to remove friend:\n{result.Message}", "orange");
			return;
		}

		_isFriendRequested = false;
		_isFriend = false;
		StateHasChanged();
	}

	private async Task OnClickCopyUsername(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.User.NameAndTag); 
	}

	private async Task OnClickCopyUserId(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.User.Id);
	}
	
	private async Task OnClickMessage()
	{
		var channel = await ChannelService.FetchDmChannelAsync(Data.User.Id, true);
		var newWindowContent = await ChatWindowComponent.GetDefaultContent(channel);
		await WindowService.OpenWindowAtFocused(newWindowContent);
	}
}