@inherits ContextMenu<ChannelContextMenu.ChannelContextParams>
@inject IJSRuntime JsRuntime
@inject ValourClient Client

@if (_canModify)
{
    // Only allow adding channels to categories
    if (Data.Channel.ChannelType == ChannelTypeEnum.PlanetCategory){
        <ContextMenuItem OnClick="@OpenCreateChannel">Add Channel</ContextMenuItem>
        <ContextMenuItem OnClick="@OpenCreateVoiceChannel">Add Voice Channel</ContextMenuItem>
        <ContextMenuItem OnClick="@OpenCreateCategory">Add Category</ContextMenuItem>
    }
    
    // All channels have these options
    <ContextMenuItem OnClickAsync="@EditChannelListItem">Edit</ContextMenuItem>
    <ContextMenuItem OnClickAsync="@DeleteChannelListItem">Delete</ContextMenuItem>
}
<ContextMenuItem OnClickAsync="@OnClickCopyId">Copy Id</ContextMenuItem>

@code {

    public class ChannelContextParams
    {
        public Channel Channel;
    }
    
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    private bool _canModify;
    
    protected override async Task OnInitializedAsync(){
        if (Data.Channel.Planet.OwnerId == Client.Me.Id)
        {
            _canModify = true;
        }
        else {
            _canModify = await Data.Channel.HasPermissionAsync(Data.Channel.Planet.MyMember, ChannelPermissions.Manage);
        }
        
        StateHasChanged();
    }
    
    private async Task OnClickCopyId(){
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.Channel.Id);
        ToastContainer.Instance.AddToast(new ToastData("Copied!", "Channel ID copied to clipboard", ToastProgressState.Success));
    }

    private void OpenCreateChannel(){
        OpenCreate(ChannelTypeEnum.PlanetChat);
    }

    private void OpenCreateVoiceChannel()
    {
        OpenCreate(ChannelTypeEnum.PlanetVoice);
    }
    
    private void OpenCreateCategory()
    {
        OpenCreate(ChannelTypeEnum.PlanetCategory);
    }

    private void OpenCreate(ChannelTypeEnum type)
    {
        var data = new CreateChannelComponent.ModalParams()
        {
            Planet = Data.Channel.Planet,
            ChannelType = type
        };
        
        if (Data.Channel.ChannelType == ChannelTypeEnum.PlanetCategory){
            data.Parent = Data.Channel;
        }

        ModalRoot.OpenModal<CreateChannelComponent>(data);
    }

    private async Task DeleteChannelListItem()
    {
        await CloseAsync();
        
        if (Data.Channel.ChannelType == ChannelTypeEnum.PlanetCategory){
            // Ensure category has no children if we are deleting it
            if (Data.Channel.Planet.Channels.Any(x => x.ParentId == Data.Channel.Id)){

                var data = new InfoModalComponent.ModalParams(
                    "You can't delete this!",
                    "This is due to this category having channels and/or categories inside of it.",
                    "Okay",
                    () =>
                    {
                        Console.WriteLine("User Clicked Ok");
                        return Task.CompletedTask;
                    }
                );
                
                ModalRoot.OpenModal<InfoModalComponent>(data);
            }
        }

        var modalData =
        new ConfirmModalComponent.ModalParams(
            $"Delete {Data.Channel.Name}?",
             "Are you sure?",
             "Continue",
             "Cancel", 
             async () =>
             {
                 // TODO: Progress toast
                 Console.WriteLine("Confirmed channel model deletion.");
                 _ = await Data.Channel.DeleteAsync();
             },
             () =>
             {
                 Console.WriteLine("Cancelled channel model deletion.");
                 return Task.CompletedTask;
             }
        );
        
        ModalRoot.OpenModal<ConfirmModalComponent>(modalData);
    }

    private async Task EditChannelListItem()
    {
        await CloseAsync();
        
        var data = new EditChannelListItemComponent.ModalParams()
        {   
            ChannelListItem = Data.Channel
        };
        
        ModalRoot.OpenModal<EditChannelListItemComponent>(data);
    }
}