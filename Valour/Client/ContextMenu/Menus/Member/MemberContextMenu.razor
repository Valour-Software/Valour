@inherits ContextMenu<MemberContextMenu.MemberContextParams>
@inject IJSRuntime JsRuntime
@inject ValourClient Client
@inject FriendService FriendService
@inject ChannelService ChannelService


<ContextMenuItem OnClickAsync="@OnClickMessage">
	<Label>Message</Label>
	<Icon>
		<i class="bi bi-chat-dots-fill"></i>
	</Icon>
</ContextMenuItem>

@if (_isFriend)
{
	<ContextMenuItem OnClickAsync="@OnClickRemoveFriend">
		<Label>Remove Friend</Label>
		<Icon>-<i class="bi bi-person-fill"></i></Icon>
	</ContextMenuItem>
}
else if (_isFriendRequested)
{
	<ContextMenuItem OnClickAsync="@OnClickRemoveFriend">Cancel Request</ContextMenuItem>
}
else
{
	<ContextMenuItem OnClickAsync="@OnClickAddFriend">
		<Label>Add Friend</Label>
		<Icon>+<i class="bi bi-person-fill"></i></Icon>
	</ContextMenuItem>
}
@if (_canKick)
{
	<ContextMenuItem OnClickAsync="@OnClickKick" Color="red">
		<Label>Kick</Label>
		<Icon><i class="bi bi-shield-fill-exclamation"></i></Icon>
	</ContextMenuItem>
}
@if (_canBan) {
	<ContextMenuItem OnClickAsync="@OnClickBan" Color="red">
		<Label>Ban</Label>
		<Icon><i class="bi bi-hammer"></i></Icon>
	</ContextMenuItem>
}
<ContextSubMenu>
	<Label>Roles</Label>
	<Icon><i class="bi bi-caret-right-fill"></i></Icon>
	<Content>
		<RolesMenuComponent Member="Data.Member"></RolesMenuComponent>
	</Content>
</ContextSubMenu>

<ContextSubMenu>
	<Label>Copy</Label>
	<Icon><i class="bi bi-caret-right-fill"></i></Icon>
	<Content>
		<ContextMenuItem OnClickAsync="@OnClickCopyNickname">Nickname</ContextMenuItem>
        <ContextMenuItem OnClickAsync="@OnClickCopyUsername">Username</ContextMenuItem>
        <ContextMenuItem OnClickAsync="@OnClickCopyMemberId">Member Id</ContextMenuItem>
        <ContextMenuItem OnClickAsync="@OnClickCopyUserId">User Id</ContextMenuItem>
	</Content>
</ContextSubMenu>

@code {

	public class MemberContextParams
	{
		public PlanetMember Member;
	}

	[CascadingParameter]
	public ModalRoot ModalRoot { get; set; }

	private bool _canKick;
	private bool _canBan;
	private bool _isFriend;
	private bool _isFriendRequested;

	private async Task OnClickAddFriend()
	{
		var result = await FriendService.AddFriendAsync(Data.Member.User.NameAndTag);

		if (!result.Success)
		{
			Client.Logger.Log<MemberContextMenu>($"Failed to add friend:\n{result.Message}", "orange");
			return;
		}

		_isFriend = true;
		StateHasChanged();
	}

	private async Task OnClickRemoveFriend()
	{
		var result = await FriendService.RemoveFriendAsync(Data.Member.User.NameAndTag);

		if (!result.Success)
		{
			Client.Logger.Log<MemberContextMenu>($"Failed to remove friend:\n{result.Message}", "orange");
			return;
		}

		_isFriend = false;
		_isFriendRequested = false;
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		_isFriendRequested = FriendService.OutgoingRequests.Any(x => x.Id == Data.Member.UserId);
		_isFriend = FriendService.Friends.Any(x => x.Id == Data.Member.UserId);

		_canKick = Data.Member.Planet.MyMember.HasPermission(PlanetPermissions.Kick);
		_canBan = Data.Member.Planet.MyMember.HasPermission(PlanetPermissions.Ban);
	}

	private async Task OnClickMessage()
	{
		await CloseAsync();
		
		var channel = await ChannelService.FetchDmChannelAsync(Data.Member.UserId, true);
		var newWindowContent = await ChatWindowComponent.GetDefaultContent(channel);
		await WindowService.OpenWindowAtFocused(newWindowContent);
	}

	private async Task OnClickCopyNickname(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.Member.Name);
	}

	private async Task OnClickCopyUsername(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.Member.User.NameAndTag);
	}

	private async Task OnClickCopyMemberId(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.Member.Id);
	}

	private async Task OnClickCopyUserId(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.Member.UserId);
	}

	private async Task OnClickKick()
	{
		await CloseAsync();

		var modalData =
		new KickModal.KickModalParams()
		{
			Member = Data.Member
		};
		
		ModalRoot.OpenModal<KickModal>(modalData);
	}

	private async Task OnClickBan()
	{
		await CloseAsync();
		
		var data = new BanModal.BanModalProps()
		{
			Member = Data.Member
		};
		
		ModalRoot.OpenModal<BanModal>(data);
	}
}