@page "/"
@page "/planetchannels/{StartPlanetId:long}/{StartChannelId:long}/{StartMessageId:long}"
@page "/directchannels/{StartChannelId:long}/{StartMessageId:long}"
@using Valour.Sdk.Services

@inject ValourClient Client
@inject AuthService AuthService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<PushSubscriptionsComponent />

<!-- Check login status -->
@if (!Client.IsLoggedIn)
{
	<LoginComponent FromVerified="false"></LoginComponent>
	return;
}

<!-- 
<ChangeLogComponent />
-->

<SafetyPopup />
<ProfilePopup />

<div class="mobile-holder @MobileClass @EmbeddedClass">
	<ToastContainer>
		<!-- Modal management -->
		<ModalRoot>
			<ContextMenuRoot>

				<ModalInjector/>

				<body class="mainrow">
				<Sidebar></Sidebar>
				<div class="channel-and-topbar" id="mainwindow">
					<div class="topbar">
						@if (DeviceInfo.IsMobile)
						{
							<i class="bi bi-list sidebar-toggle" @onclick="Sidebar.ToggleMobileSidebar"></i>
						}
						<QuickNotifComponent />
						@if (DeviceInfo.IsMobile)
						{
							<img alt="Home" title="Go Home" src="_content/Valour.Client/media/Home-icon.svg" class="home" @onclick="OnClickHome"/>
						}
					</div>

					<CallComponent/>

					<!-- It's so nice when it's hidden away, just like my fears -->
					<WindowDockComponent StartData="@_startData" />
				</div>
				@* 
			       @if (!DeviceInfo.IsMobile)
				   {
   					<Sidebar Flip="@true"></Sidebar>
				   }
				*@

				</body>
			</ContextMenuRoot>
		</ModalRoot>
	</ToastContainer>
</div>


@code {
	private StartScreenData _startData;
	
	private StartScreen? Start { get; set; }
	
	[Parameter]
	public long? StartPlanetId { get; set; }
	
	[Parameter]
	public long? StartChannelId { get; set; }
	
	[Parameter]
	public long? StartMessageId { get; set; }

	private string MobileClass => DeviceInfo.IsMobile ? "mobile" : "desktop";
	
	private string EmbeddedClass => DeviceInfo.IsEmbedded ? "embedded" : "";

	protected override async Task OnInitializedAsync()
	{
		if (NavigationManager.Uri.Contains("planetchannels"))
		{
			Start = StartScreen.PlanetChannel;
		}
		else if (NavigationManager.Uri.Contains("directchannels"))
		{
			Start = StartScreen.DirectChannel;
		}

		_startData = new()
		{
			Start = Start,
			StartPlanetId = StartPlanetId,
			StartChannelId = StartChannelId,
			StartMessageId = StartMessageId
		};

		await base.OnInitializedAsync();

		WindowService.FocusedPlanetChanged += OnPlanetChange;
		AuthService.LoggedIn += OnLoginAsync;
	}

	private void OnLoginAsync(User user)
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		WindowService.FocusedPlanetChanged -= OnPlanetChange;
	}

	protected override async void OnAfterRender(bool firstRender)
	{
	}

	private Task OnPlanetChange(Planet planet)
	{
		if (planet != null)
		{
			Console.WriteLine("Index planet change: " + planet.Name);
		}
		else
		{
			Console.WriteLine("Index planet change: null");
		}

		return Task.CompletedTask;
	}

	private async Task OnClickHome()
	{
		await WindowService.OpenWindowAtFocused(HomeWindowComponent.DefaultContent);
	}

	public void ForceRefresh()
	{
		StateHasChanged();
	}
}