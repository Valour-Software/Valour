@inherits Modal<ChangePasswordModal.Params>
@inject ValourClient Client

<BasicModalLayout Title="Change Password" Icon="key-fill">
    <MainArea>
        <div class="form-group">
            <label class="m-2">Password</label>
            <input id="password-input" type="password" autocomplete="current-password" class="form-control" @bind-value="@_password" />
            <label class="m-2">New Password</label>
            <input id="new-password-input" type="password" autocomplete="new-password" class="form-control" @bind-value="@_newPassword" />
            <label class="m-2">Confirm New Password</label>
            <input id="new-password-confirm-input" type="password" autocomplete="new-password" class="form-control" @bind-value="@_newPasswordConfirm" />
        </div>

        <ResultLabel Result="@_result" />
    </MainArea>
    <ButtonArea>
        <div class="basic-modal-buttons">
            <button @onclick="@OnCancel" class="v-btn">Cancel</button>
            <button @onclick="@OnConfirm" class="v-btn danger">Confirm</button>
        </div>
    </ButtonArea>
</BasicModalLayout>

@code {
    public class Params {}
	
    private string _password = "";
    private string _newPassword = "";
    private string _newPasswordConfirm = "";
    
    private ITaskResult _result;

    private async Task OnConfirm()
    {
        if (_newPassword != _newPasswordConfirm)
        {
            _result = new TaskResult(false, "Confirmation does not match new password");
            return;
        }

        var toastData = new ProgressToastData<TaskResult>()
        {
            ProgressTask = Client.UpdateMyPasswordAsync(_password, _newPassword),
            Title = "Changing Password",
            Message = "Updating...",
            SuccessMessage = "Password updated!",
        };
        
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);
        if (result.Success)
        {
            Close();
        }
        else
        {
            _result = result;
            StateHasChanged();   
        }
    }

    private void OnCancel() => Close();
}