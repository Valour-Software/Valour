@inherits Modal<FileUploadComponent.ModalParams>
@inject IJSRuntime JsRuntime
@implements IDisposable

@if (Data.Attachment is null)
{
    <h5>Loading content...</h5>
    return;
}

<div class="preview-container glassy-modal" @onkeydown="@OnKeyDown">
	<h6>Upload?</h6>

    <div class="attachment-holder">
        @if (_loaded)
        {
            switch (Data.Attachment.Type)
            {
                case MessageAttachmentType.Image:
                {
                    if (_imageReady)
                    {
                        <ImageAttachmentComponent Message="@Data.Message" Attachment="@Data.Attachment"/>
                    }

                    break;
                }
                case MessageAttachmentType.Video:
                    <VideoAttachmentComponent Message="@Data.Message" Attachment="@Data.Attachment"/>
                    break;
                case MessageAttachmentType.Audio:
                    <AudioAttachmentComponent Message="@Data.Message" Attachment="@Data.Attachment"/>
                    break;
                default:
                    <FileAttachmentComponent Message="@Data.Message" Attachment="@Data.Attachment"/>
                    break;
            }
        }
    </div>

    <div class="d-flex flex-row justify-content-between">
        <button class="v-btn" style="float: right" @onclick="@OnClickConfirm">Go for it</button>
        <button class="v-btn danger" @onclick="@OnClickCancel">Cancel</button>
    </div>
</div>

@code
{
    public class ModalParams
    {
        public byte[] Bytes { get; set; }
        public Func<Task> OnConfirm;
        public Message Message;
        public MessageAttachment Attachment;
    }

    private DotNetObjectReference<FileUploadComponent> _thisRef;

    private bool _imageReady;
    private bool _loaded = false;

    protected override async Task OnInitializedAsync(){

        Console.WriteLine(JsonSerializer.Serialize(Data.Attachment));
        
        _thisRef = DotNetObjectReference.Create(this);
        
        // Load into blob form and get url
        var blobUrl = await JsRuntime.InvokeAsync<string>("createBlob", Data.Bytes, Data.Attachment.MimeType);

        // Build attachment object
        Data.Attachment.Location = blobUrl;

        if (Data.Attachment.Type == MessageAttachmentType.Image)
        {
            _imageReady = false;
            await JsRuntime.InvokeVoidAsync("getImageSize", blobUrl, _thisRef);
        }
        
        _loaded = true;
    }

    [JSInvokable]
    public void SetImageSize(int width, int height)
    {
        Data.Attachment.Width = width;
        Data.Attachment.Height = height;

        Console.WriteLine($"Set image size to {width},{height}");

        _imageReady = true;
        
        StateHasChanged();
    }

    public async Task OnKeyDown(KeyboardEventArgs e){
        if (e.Key.ToLower() == "enter")
            await OnClickConfirm();
    }

    public void OnClickCancel() => Close();

    public async Task OnClickConfirm(){
        await Data.OnConfirm.Invoke();
        Close();
    }

    public void Dispose()
    {
        _thisRef?.Dispose();
    }
}