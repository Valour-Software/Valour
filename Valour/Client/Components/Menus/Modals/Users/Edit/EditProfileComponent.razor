@inject ValourClient Client
@using System.Net.Http.Headers

@if (_profile is null)
{
    <div class="editor-section">
        <h4>Error loading profile.</h4>
        <p>Try again later?</p>
    </div>
    return;
}

<div class="profile-editor-container">
    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-pencil-square"></i>
            Profile Details
        </h3>
        
        <div class="form-group">
            <label>Headline</label>
            <input class="v-input" placeholder="A short blurb" @bind="@_profile.Headline"/>
        </div>
        
        <div class="form-group">
            <label>Bio</label>
            <textarea class="v-input" rows="4" placeholder="A little bit about me..." @bind="@_profile.Bio"></textarea>
        </div>

        <div class="actions">
            <button class="v-btn primary" @onclick="OnClickSaveAsync">Save Changes</button>
        </div>

        <ResultLabel Result="@_result" />
    </div>
    
    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-palette"></i>
            Appearance
        </h3>
        
        @if (Client.Me.Subscription is null)
        {
            <div class="toggle-item">
                <div class="toggle-header">
                    <span class="toggle-title">Gradient Borders</span>
                    <label class="switch">
                        <input type="checkbox" disabled>
                        <span class="slider round"></span>
                    </label>
                </div>
                <p class="toggle-description">You need a Valour Plus subscription to use this feature.</p>
            </div>
        }
        else
        {
            <div class="toggle-item">
                <div class="toggle-header">
                    <span class="toggle-title">Gradient Borders</span>
                    <label class="switch">
                        <input type="checkbox" @onclick="OnGradientClick" checked="@_isGradientEnabled" disabled="@_isGradientBlocked">
                        <span class="slider round"></span>
                    </label>
                </div>
                <p class="toggle-description">Use three colors in a gradient as the border.</p>
            
                @if (_isGradientEnabled)
                {
                    <div class="toggle-content">
                        <div class="toggle-item">
                            <div class="toggle-header">
                                <span class="toggle-title">Animate Gradient</span>
                                <label class="switch">
                                    <input type="checkbox" @onclick="OnAnimClick" checked="@_isAnimEnabled" disabled="@_isAnimBlocked">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <p class="toggle-description">Animate the gradient border.</p>
                        </div>
                    </div>
                }
            </div>
        }
        
        <div class="color-pickers">
            @if (Client.Me.Subscription != null && _isGradientEnabled)
            {
                <div class="color-picker-item">
                    <span class="v-span">Primary color</span>
                    <ColorPickerComponent StartColor="@_profile.PrimaryColor" OnColorChange="@(async (color) => { _profile.PrimaryColor = color; StateHasChanged(); })"></ColorPickerComponent>
                </div>
                <div class="color-picker-item">
                    <span class="v-span">Secondary color</span>
                    <ColorPickerComponent StartColor="@_profile.SecondaryColor" OnColorChange="@(async (color) => { _profile.SecondaryColor = color; StateHasChanged(); })"></ColorPickerComponent>
                </div>
                <div class="color-picker-item">
                    <span class="v-span">Tertiary color</span>
                    <ColorPickerComponent StartColor="@_profile.TertiaryColor" OnColorChange="@(async (color) => { _profile.TertiaryColor = color; StateHasChanged(); })"></ColorPickerComponent>
                </div>
            }
            else
            {
                <div class="color-picker-item">
                    <span class="v-span">Border color</span>
                    <ColorPickerComponent StartColor="@_profile.BorderColor" OnColorChange="@(async (color) => { _profile.BorderColor = color; StateHasChanged(); })"></ColorPickerComponent>
                </div>
            }
            <div class="color-picker-item">
                <span class="v-span">Glow color</span>
                <ColorPickerComponent StartColor="@_profile.GlowColor" OnColorChange="@(async (color) => { _profile.GlowColor = color; StateHasChanged(); })"></ColorPickerComponent>
            </div>
            <div class="color-picker-item">
                <span class="v-span">Text color</span>
                <ColorPickerComponent StartColor="@_profile.TextColor" OnColorChange="@(async (color) => { _profile.TextColor = color; StateHasChanged(); })"></ColorPickerComponent>
            </div>
        </div>

        <div class="actions">
            <button class="v-btn primary" @onclick="OnClickSaveAsync">Save Changes</button>
        </div>

        <ResultLabel Result="@_result" />
    </div>
    
    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-image"></i>
            Background Image
        </h3>
        
        @if (Client.Me.Subscription is null)
        {
            <div class="toggle-item">
                <div class="toggle-header">
                    <span class="toggle-title">Custom Background Image</span>
                    <label class="switch">
                        <input type="checkbox" disabled>
                        <span class="slider round"></span>
                    </label>
                </div>
                <p class="toggle-description">You need a Valour Plus subscription to use this feature.</p>
            </div>
        }
        else
        {
            <div class="toggle-item">
                <div class="toggle-header">
                    <span class="toggle-title">Custom Background Image</span>
                    <label class="switch">
                        <input type="checkbox" checked="@_isCustomBackgroundEnabled" @onclick="OnCustomBackgroundClick">
                        <span class="slider round"></span>
                    </label>
                </div>
                <p class="toggle-description">Choose a custom (safe for work) 300x400 image as your background!</p>
                
                @if (_isCustomBackgroundEnabled)
                {
                    <div class="toggle-content custom-file-input">
                        <InputFile OnChange="LoadBackgroundImage" AdditionalAttributes="@_bgInputAttributes"></InputFile>
                    </div>
                }
            </div>
        }
        
        <ResultLabel Result="@_result" />
    </div>
    <div class="profile-preview-container">
        <div class="editor-section">
            <h3 class="editor-section-title">
                <i class="bi bi-eye"></i>
                Preview
            </h3>

            <ProfileCard
                @ref="@_profileCard"
                User="@Client.Me"
                Profile="@_profile"
                CssStyle="position: relative; margin: 0 auto;">
            </ProfileCard>
        </div>
    </div>
</div>


@code {

    private ITaskResult _result;
    
    private Dictionary<string, object> _bgInputAttributes = new Dictionary<string, object>()
    {
        { "accept", ".png,.jpg,.jpeg,.gif" }
    };
    
    private ProfileCard _profileCard;
    private UserProfile _profile;

    private bool _isGradientEnabled;
    private bool _isGradientBlocked = false;
    
    private bool _isCustomBackgroundEnabled;
    
    private bool _isAnimEnabled = false;
    private bool _isAnimBlocked = false;

    private string _errorSpan;
    private string _successSpan;
    
    protected override async Task OnInitializedAsync()
    {
        _profile = await Client.Me.FetchProfileAsync();

        _isCustomBackgroundEnabled = !string.IsNullOrWhiteSpace(_profile.BackgroundImage);
        _isGradientEnabled = !string.IsNullOrWhiteSpace(_profile.PrimaryColor);
        _isAnimEnabled = _profile.AnimatedBorder;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_profileCard is not null)
            await _profileCard.LoadDetailsAsync();
    }

    private void OnGradientClick()
    {
        _isGradientEnabled = !_isGradientEnabled;
        
        if (_isGradientEnabled)
        {
            _profile.PrimaryColor = "#fff";
            _profile.SecondaryColor = "#fff";
            _profile.TertiaryColor = "#fff";
        }
        else
        {
            _profile.PrimaryColor = null;
            _profile.SecondaryColor = null;
            _profile.TertiaryColor = null;
        }
        
        StateHasChanged();
    }
    
    private void OnCustomBackgroundClick()
    {
        _isCustomBackgroundEnabled = !_isCustomBackgroundEnabled;
        StateHasChanged();
    }
    
    private void OnAnimClick()
    {
        _isAnimEnabled = !_isAnimEnabled;
        _profile.AnimatedBorder = _isAnimEnabled;
        StateHasChanged();
    }

    private async Task OnClickSaveAsync()
    {
        _errorSpan = null;
        _successSpan = null;

        if (!_isCustomBackgroundEnabled)
        {
            _profile.BackgroundImage = null;
        }

        var result = await _profile.UpdateAsync();

        _result = result;
        
        StateHasChanged();
    }
    
    private async Task LoadBackgroundImage(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
        {
            _errorSpan = "Could not load file as an image.";
            StateHasChanged();
            return;
        }

        if (file.Size > 10485760)
        {
            _errorSpan = "Max background image size is 10mb.";
            StateHasChanged();
            return;
        }

        byte[] data = new byte[file.Size];
        var read = await file.OpenReadStream(10485760).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await Client.PrimaryNode.PostMultipartDataWithResponse<string>($"upload/profilebg", content);

        if (result.Success)
        {
            _profile.BackgroundImage = result.Data;
        }

        _result = result;

        StateHasChanged();
    }
}