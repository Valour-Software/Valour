@using System.Net.Http.Headers
@using Valour.Shared.Extensions
@using System.IO
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ValourClient Client
@inject AuthService AuthService

<div class="settings-container">
    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-person-badge"></i>
            Status & Appearance
        </h3>
        <p class="subtitle">Customize how others see you</p>

        <div class="preview">
            <UserInfoComponent User="@Client.Me" @ref="@_infoPreview" />
        </div>

        <div class="form-group">
            <label>Status Message</label>
            <div class="input-group">
                <input class="v-input" placeholder="Choose a status..." @bind="_status" />
                <button class="v-btn primary" @onclick="OnStatusApply">Apply</button>
            </div>
            <ResultLabel Result="@_statusChangeResult" />
        </div>

        <div class="form-group">
            <label>Status Code</label>
            <div class="input-group">
                <InputSelect class="v-input" @bind-Value="_statusCode">
                    <option value="0">Automatic</option>
                    <option value="4">Online</option>
                    <option value="2">Away</option>
                    <option value="3">Do Not Disturb</option>
                    <option value="1">Offline</option>
                </InputSelect>
                <button class="v-btn primary" @onclick="@OnStatusCodeApply">Apply</button>
            </div>
            <ResultLabel Result="@_statusCodeChangeResult" />
        </div>

        <div class="form-group">
            <label>Tag</label>
            <div class="input-group">
                <input class="v-input" placeholder="Tag" @bind="@_tag" maxlength="4" disabled="@(Client.Me.Subscription is null)" />
                <button class="v-btn primary" @onclick="@OnTagApply" disabled="@(Client.Me.Subscription is null)">Apply</button>
            </div>
            @if (Client.Me.Subscription is null) {
                <p class="helper-text">You need Stargazer to change your tag.</p>
            }
            <ResultLabel Result="@_tagChangeResult" />
        </div>
    </div>

    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-image"></i>
            Avatar
        </h3>
        
        <div class="avatar-container">
            <img alt="Your profile picture" class="avatar bordered" src="@_pfpUrl" @onerror="@OnPfpError" onclick="document.getElementById('avatar-upload').click()" />
            <p class="helper-text">Click the image to upload a new profile picture</p>
            <ResultLabel Result="@_pfpChangeResult" />
            <div style="display:none">
                <InputFile OnChange="@LoadFiles" accept=".png,.jpg,.jpeg,.gif,.webp" id="avatar-upload"></InputFile>
            </div>
            <ImageCropper ImageDataUrl="@_cropDataUrl" Visible="@_showCropper" OnCropped="OnAvatarCropped" OnCancel="OnCropCancel" />
        </div>
    </div>

    <div class="editor-section security">
        <h3 class="editor-section-title">
            <i class="bi bi-shield-lock"></i>
            Security
        </h3>

        <div class="toggle-item">
            <div class="toggle-header">
                <span class="toggle-title">Multi-Factor Authentication</span>
                @if (_multiAuthMethods is null) {
                    <div class="loading-indicator"></div>
                } else if (_multiAuthMethods.Count > 0) {
                    <span class="status-badge enabled">Enabled</span>
                } else {
                    <span class="status-badge">Disabled</span>
                }
            </div>
            
            <p class="toggle-description">Protect your account with an additional security layer</p>
            
            <div class="toggle-content">
                @if (_multiAuthMethods is null) {
                    <div class="loading-state">
                        <div class="loading-indicator"></div>
                        <p>Loading...</p>
                    </div>
                } else {
                    @if (_multiAuthMethods.Count > 0) {
                        <div class="mfa-status enabled">
                            <i class="bi bi-shield-check"></i>
                            <span>Your account is protected with multi-factor authentication</span>
                        </div>
                        <button @onclick="@OnClickRemoveMfa" class="v-btn danger mt-2">Remove MFA</button>
                    } else {
                        <div class="mfa-status">
                            <i class="bi bi-shield-exclamation"></i>
                            <span>Adding MFA greatly improves your account security</span>
                        </div>
                        <button @onclick="@OnClickMfA" class="v-btn primary">Setup MFA</button>
                    }
                }
            </div>
        </div>
        
        <div class="actions">
            <button class="v-btn secondary" @onclick="@OnClickChangePassword">Change Password</button>
        </div>
    </div>

    <div class="editor-section danger-zone">
        <h3 class="editor-section-title">
            <i class="bi bi-exclamation-triangle"></i>
            Danger Zone
        </h3>
        <p class="helper-text">These actions can't be undone. Please proceed with caution.</p>

        <div class="actions">
            <button class="v-btn secondary" @onclick="@OnClickChangeUsername">Change Username</button>
            <button class="v-btn danger" @onclick="@OnClickDeleteAccount">Delete Account</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    [Parameter]
    public User User { get; set; }

    private UserInfoComponent _infoPreview;

    private string _tag;
    private ITaskResult _tagChangeResult;

    private string _pfpUrl;
    private ITaskResult _pfpChangeResult;
    private bool _showCropper = false;
    private string _cropDataUrl;
    private string _pendingImageType;

    private string _status;
    private ITaskResult _statusChangeResult;

    private int _statusCode;
    private ITaskResult _statusCodeChangeResult;

    private List<string> _multiAuthMethods;

    private async Task OnStatusApply()
    {
        var oldStatus = User.Status;
        User.Status = _status;

        _statusChangeResult = await User.UpdateAsync();

        // Rollback change if it failed
        if (!_statusChangeResult.Success)
        {
            User.Status = oldStatus;
        }

        StateHasChanged();
        _infoPreview.UpdateAll();
    }

    private async Task OnTagApply()
    {
        if (_tag.Length != 4)
        {
            _tagChangeResult = new TaskResult(false, "Tag must be 4 characters long.");
            StateHasChanged();
            return;
        }

        foreach (var c in _tag)
        {
            if (!char.IsLetterOrDigit(c))
            {
                _tagChangeResult = new TaskResult(false, "Tag must be alphanumeric.");
                StateHasChanged();
                return;
            }
        }

        var oldTag = User.Tag;
        User.Tag = _tag;

        _tagChangeResult = await User.UpdateAsync();

        // Rollback change if it failed
        if (!_tagChangeResult.Success)
        {
            User.Tag = oldTag;
        }

        StateHasChanged();
        _infoPreview.UpdateAll();
    }

    private async Task OnStatusCodeApply()
    {
        var oldStatusCode = User.UserStateCode;
        User.UserStateCode = _statusCode;

        _statusCodeChangeResult = await User.UpdateAsync();

        // Rollback change if it failed
        if (!_statusCodeChangeResult.Success)
        {
            User.UserStateCode = oldStatusCode;
        }

        StateHasChanged();
        _infoPreview.UpdateAll();
    }

    protected override async Task OnInitializedAsync()
    {
        _pfpUrl = User.GetAvatar(AvatarFormat.Webp256);
        _status = User.Status;
        _statusCode = User.UserStateCode;
        _tag = User.Tag;

        StateHasChanged();

        _multiAuthMethods = await AuthService.GetMfaMethodsAsync();

        StateHasChanged();
    }

    private void OnPfpError()
    {
        _pfpUrl = "_content/Valour.Client/icon-512.webp";
        StateHasChanged();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // 10mb limit
        if (file.Size > 10240000)
        {
            _pfpChangeResult = new TaskResult(false, "Max profile image size is 10mb.");
            StateHasChanged();
            return;
        }

        using var ms = new MemoryStream();
        await file.OpenReadStream(10240000).CopyToAsync(ms);
        _pendingImageType = file.ContentType;
        _cropDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        _showCropper = true;
        StateHasChanged();
    }

    private async Task UploadAvatar(byte[] data, string contentType)
    {
        var streamContent = new StreamContent(new MemoryStream(data));
        var content = new MultipartFormDataContent();
        streamContent.Headers.ContentType = new MediaTypeHeaderValue(contentType);
        content.Add(streamContent, "avatar", "avatar");

        var result = await Client.PrimaryNode.PostMultipartDataWithResponse<string>($"upload/profile", content);

        _pfpChangeResult = result;

        if (_pfpChangeResult.Success)
        {
            User newUser = new(Client);
            User.CopyAllTo(newUser);
            newUser.Version++;
            Client.Cache.Users.Put(newUser);

            _pfpUrl = User.GetAvatar(AvatarFormat.WebpAnimated256);
        }

        StateHasChanged();
        _infoPreview.UpdateAll();
    }

    private async Task OnAvatarCropped(string dataUrl)
    {
        _showCropper = false;
        var base64 = dataUrl.Substring(dataUrl.IndexOf(',') + 1);
        var bytes = Convert.FromBase64String(base64);
        await UploadAvatar(bytes, _pendingImageType);
    }

    private void OnCropCancel()
    {
        _showCropper = false;
        StateHasChanged();
    }

    private void OnClickDeleteAccount()
    {
        ModalRoot.OpenModal<DeleteAccountModal>();
    }

    private void OnClickChangePassword()
    {
        ModalRoot.OpenModal<ChangePasswordModal>();
    }

    private void OnClickChangeUsername()
    {
        ModalRoot.OpenModal<ChangeUsernameModal>();
    }

    private void OnClickMfA()
    {
        ModalRoot.OpenModal<SetupMfaModal>(_multiAuthMethods);
    }

    private void OnClickRemoveMfa()
    {
        ModalRoot.OpenModal<PasswordConfirmModal>(new PasswordConfirmModal.Params()
        {
            Title = "Remove MFA?",
            Description = "Enter your password to disable Multi-Factor Authentication",
            OnConfirmAsync = async (password) =>
            {
                var result = await ToastContainer.Instance.WaitToastWithTaskResult(new ProgressToastData<TaskResult>()
                {
                    ProgressTask = AuthService.RemoveMfaAsync(password),
                    Title = "Removing MFA",
                    Message = "Verifying password...",
                });

                if (result.Success)
                {
                    _multiAuthMethods = new List<string>();
                    StateHasChanged();
                }

                return result;
            }
        });
    }
}
