@implements IDisposable
@inject ValourClient Client

<div class="col-md-12 modal-bg">
    <section>
        <div class="title-container">
            <h3>Friends <i class="bi bi-person-heart"></i></h3>
            <p class="subtitle">ADD OR REMOVE FRIENDS</p>
        </div>

        <hr />

        <h5>Added you</h5>
        <div class="inner-scroll-box">
            @foreach (var addedMe in Client.FriendService.IncomingRequests)
            {
                <div class="request-row" @key="@addedMe.Id">
                    <UserInfoComponent User="@addedMe" />

                    <div class="action-row" role="group" aria-label="Friend Accept or Deny">
                        <button @onclick="async () => await OnAcceptRequest(addedMe)" type="button" class="v-btn">Accept</button>
                        <button @onclick="async () => await OnDeclineRequest(addedMe)" type="button" class="v-btn">Decline</button>
                    </div>
                </div>
            }
        </div>
        <ResultLabel Result="@_addedYouResult" />

        <h5 style="margin-top: 20px">You added</h5>
        <div class="inner-scroll-box">
            @foreach (var added in Client.FriendService.OutgoingRequests)
            {
                <div class="request-row" @key="@added.Id">
                    <UserInfoComponent User="@added" />

                    <div class="action-row" role="group" aria-label="Friend Accept or Deny">
                        <button @onclick="async () => await OnCancelRequest(added)" type="button" class="v-btn">Cancel</button>
                    </div>
                </div>
            }
        </div>
        <ResultLabel Result="@_addedResult" />

        <div asp-validation-summary="All" class="text-info"></div>

        <div class="form-group mt-4">
            <label>Friend's Username</label>
            <input class="form-control" @bind-value="@_name" />
            <span id="name-span" style="color:#888888">@_nameSpan</span>
        </div>
        
        <ResultLabel Result="@_friendBoxResult" />
    </section>
</div>

@code {
    // Input fields
    private string _name;

    // Spans
    private string _nameSpan = "The username of your friend";

    private ITaskResult _addedYouResult = null;
    private ITaskResult _addedResult = null;
    private ITaskResult _friendBoxResult = null;

    protected override void OnInitialized()
    {
        Client.FriendService.FriendsChanged += FriendEventHandler;
    }
    
    void IDisposable.Dispose()
    {
        Client.FriendService.FriendsChanged -= FriendEventHandler;
    }

    private Task FriendEventHandler(FriendEventData eventData)
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnClickSubmit(MouseEventArgs e)
    {
        // Require a name
        if (string.IsNullOrWhiteSpace(_name))
        {
            _friendBoxResult = new TaskResult(false, "Please input a username.");
            return;
        }

        var response = await Client.FriendService.AddFriendAsync(_name);
        _friendBoxResult = response;
    }

    private async Task OnAcceptRequest(User user)
    {
        var result = await Client.FriendService.AddFriendAsync(user.NameAndTag);
        _addedYouResult = result;

        StateHasChanged();
    }

    private async Task OnDeclineRequest(User user)
    {
        var result = await Client.FriendService.DeclineFriendAsync(user.NameAndTag);
        _addedYouResult = result;

        StateHasChanged();
    }

    private async Task OnCancelRequest(User user)
    {
        var result = await Client.FriendService.CancelFriendAsync(user.NameAndTag);
        _addedResult = result;

        StateHasChanged();
    }
}
