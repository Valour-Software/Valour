@using System.Net
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject WalletService WalletService

<div class="wallet-editor-container">
    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-pencil-square"></i>
            Solana
        </h3>


        @if (_isLoading)
        {
            <div class="text-muted">Loading wallet info...</div>
        }
        else
        {
            <div class="form-group">
                <label>
                    <span class="@( _isSolConnected ? "danger" : "primary")"> Wallet @(!_isSolConnected ? "is not connected" : $"address is {_publicKey}")</span>
                </label>
                @if (_isSolConnected)
                {
                    <label>
                        <span>VLRC Balance: @_vlrcBalance</span>
                    </label>
                }
            </div>

            <div class="actions">
                <button class="v-btn @( _isSolConnected ? "danger" : "primary" )"
                        @onclick="HandleWalletConnection">
                    @( _isSolConnected ? "Disconnect" : "Connect" )
                </button>
            </div>

            @if (_result != null)
            {
                <ResultLabel Result="_result" />
            }
        }
    </div>
</div>


<br />

@code {
    private bool _isSolConnected = false;
    private string _publicKey = "";
    private ITaskResult _result;
    private long _vlrcBalance = 0;
    private bool _isLoading = true;
    

     protected override async Task OnAfterRenderAsync(bool firstRender)
     {
         if (firstRender)
         {
             await VerifyIfSolConnect();
            StateHasChanged();
         }
    }
    
    private async Task HandleWalletConnection()
    {
        if (_isSolConnected)
        {
            await OnSolDisconnect();
        }
        else
        {
            await OnSolConnect();
             
        }
    }

    private async Task OnSolConnect()
    {
            _publicKey = await JsRuntime.InvokeAsync<string>("getPublicKeyFromWallet");
            var retries = 0;
            while (string.IsNullOrEmpty(_publicKey) && retries < 10)
            {
                await Task.Delay(1000);
                _publicKey = await JsRuntime.InvokeAsync<string>("getPublicKeyFromWallet");
                retries++;
            }
             await LocalStorage.SetItemAsync("publicKey",_publicKey);
             
            _result = new TaskResult();
            //  var alreadyRegistered = await WalletService.UserHasWallet(publicKey);
            //  if (alreadyRegistered)
            //  {
            //      _result.Success = true;
            //      _result.Message = "You have successfully accessed your wallet.";
            //     _isSolConnected = true;
            //      StateHasChanged();
            //      return;
            // }
             
            var nonce = await WalletService.SyncWithWallet();
            if (string.IsNullOrEmpty(nonce))
            {
                _result.Message = $"Nonce invalid: {nonce}";
                return;
            }
            var signature = await JsRuntime.InvokeAsync<string>("signMessageWithWallet", nonce);
            
            if (string.IsNullOrEmpty(signature))
            {
                _result.Message = "Error signing the nonce";
                return;
            }

            var vlrc = await JsRuntime.InvokeAsync<string>("getTokenBalance", _publicKey, "Ec6t4jq6vK2QzUytRTCF1Bi5GVbaKeZ4nryxRbhjf2b9");
          
            var verifyResponse = await WalletService.SignNonce(_publicKey, nonce, signature,vlrc);
            if (verifyResponse)
            {
                _isSolConnected = true;
                _result.Success = true;
                _result.Message = "Wallet connected and verified successfully";
                return;
            }
            
            _result.Message = $"Error : Verification failed.";
    }
            
          


    private async Task OnSolDisconnect()
    {
        await JsRuntime.InvokeVoidAsync("disconnectWallet");
        _isSolConnected = false;
        await WalletService.DisconnectWallet(_publicKey);
        _publicKey = "";
        _result = new TaskResult
        {
            Success = true,
            Message = "Wallet Disconnected successfully"
        };

        StateHasChanged();
    }
    
    private async Task VerifyIfSolConnect()
    {
        _isLoading = true; 
        StateHasChanged();

        _publicKey = await LocalStorage.GetItemAsync<string>("publicKey");

        if (!string.IsNullOrEmpty(_publicKey))
        {
            var isConnectedResponse = await WalletService.CheckWalletConnection(_publicKey);
            if (isConnectedResponse)
            { 
                _vlrcBalance = await WalletService.VlrcBalance(_publicKey);
                _isSolConnected = true;
                _result = new TaskResult
                {
                    Success = true,
                    Message = "Wallet is already connected"
                };
            }
            else
            {
                await LocalStorage.RemoveItemAsync("publicKey");
                _publicKey = "";
                _isSolConnected = false;
            }
        }
        else
        {
            _isSolConnected = false;
        }

        _isLoading = false;
        StateHasChanged();
    }

}