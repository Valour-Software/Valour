@using Valour.Client.Components.Windows.ModTools
@inherits Modal<EditUserComponent.ModalParams>
@inject NavigationManager NavManager
@inject ValourClient Client


@if (@Data.User is null)
{
    <div class="background">
        <h5>Loading user...</h5>
    </div>
    return;
}

<MainMenuComponent DefaultCategory="@Data.StartCategory" DefaultItem="@Data.StartItem" MenuCategories="@_categories"  />

@code {
    
    [CascadingParameter]
    public BrowserUtils DomWindow { get; set; }
    
    private RenderFragment InfoContent => @<EditUserInfoComponent User="@Data.User" />;
    private RenderFragment ProfileContent => @<EditProfileComponent />;
    private RenderFragment FriendsContent => @<EditFriendsComponent />;
    private RenderFragment ThemesContent => @<EditThemeComponent />;
    private RenderFragment SubscriptionsContent => @<EditSubscriptionsComponent />;
    private RenderFragment ReferralsContent => @<EditReferralsComponent />;
    private RenderFragment PermissionsContent => @<EditUserNotificationsComponent />;
    private RenderFragment DevicePreferencesContent => @<EditDevicePreferencesComponent />;
    private RenderFragment SessionsContent => @<EditSessionsComponent />;
    private RenderFragment LogOutContent => @<div></div>;
    
    private List<MainMenu.MenuCategory> _categories;
    
    private List<MainMenu.MenuCategory> BuildCategories() =>
        new List<MainMenu.MenuCategory>()
        {
            new MainMenu.MenuCategory()
            {
                Name = "General Settings",
                Icon = "gear-fill",
                Items = new List<MainMenu.MenuItem>()
                {
                    new MainMenu.MenuItem()
                    {
                        Name = "Info",
                        Icon = "info-circle-fill",
                        Description = "Edit basic account information",
                        Content = InfoContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Profile",
                        Icon = "person-fill",
                        Description = "Customize your profile in style",
                        Content = ProfileContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Friends",
                        Icon = "person-heart",
                        Description = "Manage your friends and requests",
                        Content = FriendsContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Themes",
                        Icon = "palette-fill",
                        Description = "Create and install custom themes",
                        Content = ThemesContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Subscriptions",
                        Icon = "rocket-takeoff-fill",
                        Description = "Upgrade your experience!",
                        Content = SubscriptionsContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Referrals",
                        Icon = "envelope-paper-heart-fill",
                        Description = "Invite friends and earn rewards",
                        Content = ReferralsContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Permissions",
                        Icon = "sign-stop-lights-fill",
                        Description = "Manage app permissions",
                        Content = PermissionsContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Device Preferences",
                        Icon = "phone-fill",
                        Description = "Manage device preferences",
                        Content = DevicePreferencesContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Sessions",
                        Icon = "shield-lock-fill",
                        Description = "Manage active login sessions",
                        Content = SessionsContent
                    },
                    new MainMenu.MenuItem()
                    {
                        Name = "Log Out",
                        Icon = "x-octagon-fill",
                        Color = "var(--p-red)",
                        Content = LogOutContent,
                        OnClick = LogOut
                    }
                }
            },
        };

    protected override void OnInitialized()
    {
        _categories = BuildCategories();
    }

    public class ModalParams
    {
        public User User;
        public string StartCategory;
        public string StartItem;
    }

    private async Task LogOut()
    {
        try
        {
            var cData = new ConfirmModalComponent.ModalParams(
            "Log Out",
            "Are you sure?",
            "Yes, log out",
            "Cancel",
            async () =>
            {
                var result = await Client.PrimaryNode.PostAsync($"api/users/me/logout", null);
                Console.WriteLine(result.Message);
                NavManager.NavigateTo("/", true);
            },
            () =>
            {
                return Task.CompletedTask;
            }
        );

            ModalRoot.OpenModal<ConfirmModalComponent>(cData);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);

            // If an error occurs in building/using the ConfirmModal, it reverts back to original behavior and logs out regardless
            var result = await Client.PrimaryNode.PostAsync($"api/users/me/logout", null);
            Console.WriteLine(result.Message);
            NavManager.NavigateTo("/", true);
        }
    }

    private async Task OpenStaffTools()
    {
        var data = new ModToolsWindowData()
        {
            Staff = true
        };

        var content = ModToolsWindowComponent.GetDefaultContent(data);
        var floatingProps = ModToolsWindowComponent.GetDefaultFloatingProps();
        await WindowService.TryAddFloatingWindow(content, floatingProps);

        Close();
    }

}