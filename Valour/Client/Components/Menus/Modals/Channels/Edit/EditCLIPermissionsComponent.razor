@inject PlanetService PlanetService

@if (_loading)
{
    <h4>Loading details...</h4>
    return;
}
@if (!_hasTargetManagePerm)
{
    <h4>You do not have permission to manage this @Target.GetHumanReadableName()!</h4>
    return;
}
@if (!_hasTargetPermissionPerm)
{
    <h4>You do not have permission to manage this @Target.GetHumanReadableName()'s permissions!</h4>
    return;
}

<h3>@Target.GetHumanReadableName() Permissions</h3>
<p class="subtitle">CHOOSE ROLE</p>


<select @key="@("perm-role-select")" class="form-control" @onchange="OnRoleSelect" style="color: @_selectedRole.Color;
        background-color: var(--main-1)">

    @{
        int options = 0;
        var myAuthority = Target.Planet.MyMember.Authority;
    }

    @foreach (var role in Target.Planet.Roles)
    {
        // Don't show roles we can't edit

        var authority = role.GetAuthority();

        if (authority >= myAuthority)
            continue;

        options++;

        <option value="@role.Id" style="color: @role.Color; background-color: var(--main-1)">@role.Name</option>
    }
</select>

<br />

@if (options == 0)
{
    <h3>There are no roles you can edit!</h3>
    return;
}

@if (_selectedRole == null)
{
    // This actually cuts the HTML off early and is way cleaner than a massive 'if' statement
    return;
}

<!-- If there's a role selected we show possible permissions that role can have
     for the channel or category -->
<div class="perm-section">
    <div class="perm-list-item">
        <div class="perm-list-name mb-1">
            Inherit Category Permissions
        </div>
        <div type="button" style="float:right">
            <label class="switch">
                <input type="checkbox" @onclick="SwitchInherit" checked="@Target.InheritsPerms">
                <span class="slider round"></span>
            </label>
        </div>
        <div class="perm-list-desc mt-1">
            While true, the channel will inherit permissions from its parent category.
        </div>
    </div>
</div>

<!-- If the channel inherits the permissions, we do not give the option to edit them -->
@if (Target.InheritsPerms == true)
{
    return;
}

@foreach (var channelType in ChannelPermissions.ChannelTypes.OrderBy(x => x.TargetType.ToString()))
{
    // Only show if we should
    if (!_showStates[(int)channelType.TargetType])
        continue;

    <br />

    <p class="subtitle">@channelType.Permissions[0].ReadableName.ToUpper() PERMISSIONS</p>
    
    <div class="perm-section">
        <!-- Start at one to skip 'full control' -->
        @for (int i = 1; i < channelType.Permissions.Length; i++)
        {
            int i2 = i; // Prevent odd razor bug
            Permission perm = channelType.Permissions[i2];

            <div class="perm-list-item">
                <div class="perm-list-name mb-1">
                    @perm.Name
                </div>
                <div class="perm-switch">
                    <TriButtonComponent @ref="_buttonGroups[(int)channelType.TargetType][i2]" OnStateChange="(async (state) => SwitchPermission(state, perm, channelType.TargetType))">
                    </TriButtonComponent>
                </div>
                <div class="perm-list-desc mt-1">
                    @perm.Description
                </div>
            </div>
        }
    </div>
}

@if (_changed)
{
    <div class="save-wrapper">
        <button class="v-btn save-btn" @onclick="@OnSaveChanges">Save</button>
        
        @if (_saveButtonText is not null)
        {
            <span class="text-info">@_saveButtonText</span>
        }
        
        @if (_saveButtonErrorText is not null)
        {
            <span class="text-danger">@_saveButtonErrorText</span>
        }
    </div>
    
    <br />
}

@code {
    
    private string _saveButtonText;
    private string _saveButtonErrorText;
    
    // For permission checking
    private bool _hasTargetManagePerm;
    private bool _hasTargetPermissionPerm;

    // Show states for permission sections
    private bool[] _showStates = new bool[ChannelPermissions.ChannelTypes.Length];

    // Available buttons
    private TriButtonComponent[][] _buttonGroups = new TriButtonComponent[ChannelPermissions.ChannelTypes.Length][];

    // Permission nodes
    private PermissionsNode[] _nodes = new PermissionsNode[ChannelPermissions.ChannelTypes.Length];

    private bool[] _needCreate = new bool[ChannelPermissions.ChannelTypes.Length];
    private bool[] _needUpdate  = new bool[ChannelPermissions.ChannelTypes.Length];
    
    /////////////////////////////////////////////////////////////////////

    [Parameter]
    public Channel Target { get; set; }

    private PlanetRole _selfPrimaryRole;
    private PlanetRole _lastRole;
    private PlanetRole _selectedRole;
    
    private bool _changed = false;
    private bool _loading = true;

    private async Task SwitchInherit()
    {
        if (Target is null)
            return;

        Target.InheritsPerms = !Target.InheritsPerms;

        await Target.UpdateAsync();
        
        StateHasChanged();
    }

    public void SwitchPermission(TriButtonComponent.TriButtonState state, Permission permission, ChannelTypeEnum type)
    {
        // If the node for the type is null, we create it and set a flag that it
        // needs to be created on the server
        if (_nodes[(int)type] is null)
        {
            _nodes[(int)type] = new()
            {
                TargetId = Target.Id,
                PlanetId = Target.PlanetId!.Value,
                RoleId = _selectedRole.Id,
                Mask = 0x00, 
                Code = 0x00,
                TargetType = type
            };
            
            _needCreate[(int)type] = true;
        }
        else
        {
            _needUpdate[(int)type] = true;
        }

        var newState = PermissionState.Undefined;
        if (state == TriButtonComponent.TriButtonState.Yes) newState = PermissionState.True;
        else if (state == TriButtonComponent.TriButtonState.No) newState = PermissionState.False;

        _nodes[(int)type].SetPermission(permission, newState);

        _changed = true;

        StateHasChanged();
    }

    private async Task OnSaveChanges()
    {
        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            if (_needCreate[i])
            {
                var result = await _nodes[i].CreateAsync();
                if (!result.Success)
                {
                    Console.WriteLine("Error in channel permission node creation!");
                    Console.WriteLine(result.Message);
                    
                    _saveButtonErrorText = "Error saving!";
                }
                else
                {
                    _saveButtonText = "Saved successfully!";
                }
            }
            else if (_needUpdate[i])
            {
                var result = await _nodes[i].UpdateAsync();
                if (!result.Success)
                {
                    Console.WriteLine("Error in channel permission node update!");
                    Console.WriteLine(result.Message);
                    
                    _saveButtonErrorText = "Error saving!";
                }
                else
                {
                    _saveButtonText = "Saved successfully!";
                }
            }
            
            StateHasChanged();
        }

        Console.WriteLine("Permission nodes updated.");

        await RefreshButtons();
    }

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            _buttonGroups[i] = new TriButtonComponent[ChannelPermissions.ChannelTypes[i].Permissions.Length];
        }

        _selectedRole = Target.Planet.Roles[0];

        var myMember = Target.Planet.MyMember;

        var j = 1;
        while (_selectedRole.GetAuthority() >= myMember.Authority && j < Target.Planet.Roles.Count)
        {
            _selectedRole = Target.Planet.Roles[j];
            j += 1;
        }
        
        _hasTargetManagePerm = await Target.HasPermissionAsync(myMember, ChannelPermissions.Manage);
        _hasTargetPermissionPerm = await Target.HasPermissionAsync(myMember, ChannelPermissions.ManagePermissions);

        _loading = false;

        await OnRoleChange(_selectedRole);

        await RefreshButtons();

        Target.Planet.PermissionsNodes.Changed += OnPermissionNodeUpdate;
    }

    private async Task OnPermissionNodeUpdate(IModelEvent<PermissionsNode> eventData)
    {
        switch (eventData)
        {
            case ModelAddedEvent<PermissionsNode> added:
            {
                if (added.Model.TargetId == Target.Id)
                {
                    await OnRoleChange(await PlanetService.FetchRoleAsync(added.Model.RoleId, Target.Planet));
                }

                break;
            }
            case ModelUpdatedEvent<PermissionsNode> updated:
            {
                if (updated.Model.TargetId == Target.Id)
                {
                    await OnRoleChange(await PlanetService.FetchRoleAsync(updated.Model.RoleId, Target.Planet));
                }

                break;
            }
         }
    }

    private async Task OnRoleSelect(ChangeEventArgs e)
    {
        var newRoleId = long.Parse(e.Value.ToString());
        await OnRoleChange(Target.Planet.Roles.FirstOrDefault(x => x.Id == newRoleId));
    }

    private async Task OnRoleChange(PlanetRole role)
    {
        if (_lastRole == role)
            return;

        _lastRole = role;

        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            _needCreate[i] = false;
            _needUpdate[i] = false;
        }

        _selectedRole = role;

        Console.WriteLine($"Selected role {_selectedRole.Name}");

        if (Target.ChannelType == ChannelTypeEnum.PlanetCategory)
        {
            foreach (var type in ChannelPermissions.ChannelTypes){
                _nodes[(int)type.TargetType] = await Target.GetPermNodeAsync(_selectedRole.Id, type.TargetType);
                _showStates[(int)type.TargetType] = true;
            }
        }
        else
        {
            foreach (var type in ChannelPermissions.ChannelTypes)
            {
                _showStates[(int)type.TargetType] = false;
            }

            _nodes[(int)Target.ChannelType] = await Target.GetPermNodeAsync(_selectedRole.Id, Target.ChannelType);
            _showStates[(int)Target.ChannelType] = true;
        }

        _changed = false;

        await RefreshButtons();
    }

    private PermissionState GetPermissionStateForViewing(PermissionsNode node, Permission permission)
    {

        // super confusing to users why when they hit save, all the buttons go to off if the View perm is not set to True
        // so let's get rid of that check (thats what this function does)!

        if ((node.Mask & permission.Value) != permission.Value)
        {
            return PermissionState.Undefined;
        }

        if ((node.Code & permission.Value) != permission.Value)
        {
            return PermissionState.False;
        }

        return PermissionState.True;
    }

    private async Task RefreshButtons()
    {
        if (_buttonGroups == null || _buttonGroups.Length == 0)
            return;

        for (int i = 0; i < ChannelPermissions.ChannelTypes.Length; i++)
        {
            // Only set up buttons for visible
            if (_showStates[i])
            {
                var perms = ChannelPermissions.ChannelTypes[i].Permissions;
                for (int j = 1; j < perms.Length; j++)
                {
                    if (_buttonGroups[i][j] is null)
                        continue;

                    TriButtonComponent.TriButtonState buttonState = TriButtonComponent.TriButtonState.Disabled;
                    if(_nodes[i] is not null)
                    {
                        var state = GetPermissionStateForViewing(_nodes[i], perms[j]);
                        if (state == PermissionState.True) buttonState = TriButtonComponent.TriButtonState.Yes;
                        else if (state == PermissionState.False) buttonState = TriButtonComponent.TriButtonState.No;
                    }

                    await _buttonGroups[i][j].OnChangeState(buttonState, false);
                }
            }
        }

        StateHasChanged();
    }
}
