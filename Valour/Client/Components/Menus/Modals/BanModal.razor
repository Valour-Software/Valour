@inject ValourClient Client
@inherits Modal<BanModal.BanModalProps>

<BasicModalLayout Title="@Title" Icon="hammer" MaxWidth="500px">
    <MainArea>
        @if (_isSelf)
        {
            <p class="text-danger">You cannot ban yourself.</p>
        }
        else
        {
            <p>This will remove them from the planet and prevent them from rejoining.</p>
            
            <UserInfoComponent Member="@Data.Member" 
                               Style="
                               background-color: var(--main-3); 
                               display: inline-block; 
                               border-radius: 0.5em; 
                               padding-right: 0.5em;
                               scale: 1.5;
                               margin-top: 1.5em;
                               margin-bottom: 2em" />
            
            <div class="form-group">
                <label>Reason (Optional)</label>
                <input type="text" class="form-control" @bind-value="@_reason"/>
            </div>
            
            <div class="form-group">
                <label>Time in Minutes (0 or empty for permanent)</label>
                <InputNumber class="form-control" TValue="@int" @bind-Value="@_unbanMinutes"></InputNumber>
            </div>
            
            <ResultLabel Result="@_result" />
        }
    </MainArea>
    <ButtonArea>
        <div class="basic-modal-buttons">
            <button @onclick="@OnCancel" class="v-btn">Cancel</button>
            @if (!_isSelf)
            {
                <button @onclick="@OnConfirm" class="v-btn danger">Confirm</button>
            }
        </div>
    </ButtonArea>
</BasicModalLayout>

@code {
    private string Title => Data.Member.Nickname is null ? "Ban" : $"Ban {Data.Member.Nickname}";
    private bool _isSelf;

	private string _reason;
	private int _unbanMinutes;
	
	private ITaskResult _result;
	
    public class BanModalProps
    {
        public PlanetMember Member;
    }
	
	protected override void OnInitialized()
	{
		_isSelf = Data.Member.UserId == Client.Me.Id;
	}
	
	private async Task OnConfirm()
	{
		if (_isSelf) return;
		
		var expires = DateTime.UtcNow;
		if (_unbanMinutes > 0)
			expires = expires.AddMinutes(_unbanMinutes);

		var reason = _reason;
		if (string.IsNullOrWhiteSpace(reason))
			reason = $"Banned by ${Client.Me.NameAndTag}";
		
		var ban = new PlanetBan(Client)
		{
			PlanetId = Data.Member.PlanetId,
			TargetId = Data.Member.UserId,
			IssuerId = Client.Me.Id,
			TimeExpires = expires,
			TimeCreated = DateTime.UtcNow,
			Reason = reason
		};

		_result = await ban.CreateAsync();
		
		if (_result.Success)
		{
			Close();
		}
		
		StateHasChanged();
	}
	
	private void OnCancel()
	{
		Close();
	}
}