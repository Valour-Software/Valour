@inherits Modal<NumberInputModalComponent.ModalParams>

<!-- This modal exists to allow parts of the app to ask for a number -->

<BasicModalLayout Title="@Data.Title" Icon="123" MaxWidth="400px">
    <MainArea>
        <p>@Data.Description</p>
        <div class="form-group">
            <input type="number" step="1" min="0" max="1000000000000" class="form-control" @bind="_value" />
        </div>
    </MainArea>
    <ButtonArea>
        <div class="basic-modal-buttons">
            <button @onclick="@OnCancel" class="v-btn">@Data.CancelText</button>
            <button @onclick="@OnConfirm" class="v-btn primary">@Data.ConfirmText</button>
        </div>
    </ButtonArea>
</BasicModalLayout>

@code {

	public class ModalParams
	{
		/// <summary>
		/// Run if the user hits "confirm"
		/// </summary>
		public Func<int, Task> ConfirmEvent;

		/// <summary>
		/// Run if the user hits "cancel"
		/// </summary>
		public Func<Task> CancelEvent;


		// Cosmetics
		public string Title { get; set; }
		public string Description { get; set; }
		public string ConfirmText { get; set; }
		public string CancelText { get; set; }

		public ModalParams()
		{
		}
    
		public ModalParams(string title, string desc, string confirm, string cancel, Func<int, Task> OnConfirm, Func<Task> OnCancel)
		{
			Title = title;
			Description = desc;
			ConfirmText = confirm;
			CancelText = cancel;

			ConfirmEvent = OnConfirm;
			CancelEvent = OnCancel;
		}
	}

	private int _value;

	private async Task OnConfirm()
	{
		if (Data.ConfirmEvent is not null)
			await Data.ConfirmEvent.Invoke(_value);

		Close();
	}

	private async Task OnCancel()
	{
		if (Data.CancelEvent is not null)
			await Data.CancelEvent.Invoke();

		Close();
	}
}
