@inject ValourClient Client

<h3>Bans <i class="bi bi-shield-fill-exclamation"></i></h3>
<p class="subtitle">MANAGE BANS</p>

<table class="v-table">
    <thead>
        <tr>
            <th>User</th>
            <th>Banned By</th>
            <th>Created</th>
            <th>Expires</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Planet?.Bans is null || Planet.Bans.Count == 0)
        {
            <tr class="empty-row">
                <td colspan="5">
                    <div class="empty-state">
                        <i class="bi bi-hammer"></i>
                        <span>No bans</span>
                    </div>
                </td>
            </tr>
        }
        else
        {
            <Virtualize Items="Planet.Bans" Context="ban">
                <tr @key="ban.Id">
                    <td><UserInfoComponent UserId="@ban.TargetId" /></td>
                    <td><UserInfoComponent UserId="@ban.IssuerId" /></td>
                    <td>@ban.TimeCreated.ToLocalTime().ToShortDateString()</td>
                    <td>@(ban.Permanent ? "Never" : ban.TimeExpires?.ToLocalTime().ToShortDateString())</td>
                    <td>
                        <div class="button-row">
                            <button class="v-btn secondary" @onclick="(() => OnEdit(ban))">Edit</button>
                            <button class="v-btn danger" @onclick="(() => OnDelete(ban))">Delete</button>
                        </div>
                    </td>
                </tr>
            </Virtualize>
        }
    </tbody>
</table>

<ResultLabel Result="@_result" />

@code {
    [Parameter]
    public Planet Planet { get; set; }

    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    private ITaskResult _result;

    protected override void OnInitialized()
    {
        Planet ??= WindowService.FocusedPlanet;
    }

    private void OnEdit(PlanetBan ban)
    {
        var modalData = new NumberInputModalComponent.ModalParams(
            "Ban Length",
            "Minutes until unban (0 for permanent)",
            "Save",
            "Cancel",
            async minutes =>
            {
                ban.TimeExpires = minutes == 0 ? null : DateTime.UtcNow.AddMinutes(minutes);
                _result = await ban.UpdateAsync();
                StateHasChanged();
            },
            () => Task.CompletedTask);

        ModalRoot.OpenModal<NumberInputModalComponent>(modalData);
    }

    private async Task OnDelete(PlanetBan ban)
    {
        _result = await ban.DeleteAsync();
        StateHasChanged();
    }
}
