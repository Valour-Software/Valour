@inject ValourClient Client
@inject EcoService EcoService

<div class="title-container">
    <h3>Economy</h3>
    <img alt="Icon of a bank" class="icon" src="_content/Valour.Client/media/eco-icon.svg"/>
</div>

<p class="subtitle">MANAGE ECONOMY</p>

@if (_loading)
{
    <h4>Loading...</h4>
    return;
}

<!-- Eco does not exist -->
@if (Currency is null)
{
    <p>This planet does not have an economy set up yet.</p>
    <button class="v-btn mt-2" @onclick="@OnClickSetup">Set Up Now</button>
    
<!-- Eco exists -->
} else {

    if (_hasCurrencyPermission)
    {
        <section class="v-section v-inline v-bg-dark">
            <h4>Currency:</h4>
            <span class="v-span m-1">Name</span>
            <input class="v-input" placeholder="Dollar" @bind="Currency.Name"/>
            <span class="v-span m-1">Plural</span>
            <input class="v-input" placeholder="Dollars" @bind="Currency.PluralName"/>
            <span class="v-span m-1">Symbol</span>
            <input class="v-input" placeholder="$" @bind="Currency.Symbol"/>
            <span class="v-span m-1">Shortcode</span>
            <input class="v-input" placeholder="USD" @bind="Currency.ShortCode"/>
            <span class="v-span m-1">Decimals (2 = 1.99, 3 = 1.999, ...)</span>
            <input class="v-input" placeholder="2" @bind="Currency.DecimalPlaces"/>
            <p class="mt-4 mb-4">Issued: @Currency.Format(Currency.Issued)</p>
            <button class="v-btn mt-4" @onclick="@OnClickSaveCurrency">Save Changes</button>

            @if (!string.IsNullOrWhiteSpace(_currencyError))
            {
                <span class="v-span error">@_currencyError</span>
            }
            @if (!string.IsNullOrWhiteSpace(_currencyInfo))
            {
                <span class="v-span info">@_currencyInfo</span>
            }
        </section>
        
       
        <TabContainerComponent Titles="@TabTitles">
            <TabOne>
                <table class="v-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Balance</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <Virtualize @ref="_planetVirtualize" TItem="EcoAccount" ItemsProvider="@_sharedAccountProvider.GetVirtualizedItemsAsync" OverscanCount="20">
                            <tr @key="@context.Id">
                                <td><input class="v-input" @bind="@context.Name"/></td>
                                <td>@Currency.Format(@context.BalanceValue)</td>

                                <td>
                                    <DropdownComponent Alignment="DropdownComponent.DropdownAlignment.Right" Style="width: 100%">
                                        <a class="v-drop-model" @onclick="@(async () => await OnClickSaveAccount(@context))">Save</a>
                                        <a class="v-drop-model" @onclick="@(() => OnClickIssue(@context))">Issue Currency</a>
                                        <a class="v-drop-model v-text-red" @onclick="@(async ()  => await OnClickDeleteAccount(@context))">Delete</a>
                                    </DropdownComponent>
                                </td>
                            </tr>
                        </Virtualize>
                    
                    </tbody>
                </table>
                
                
                <button class="v-btn m-2" @onclick="@OnClickAddAccount">Add Account</button>
                
                @if (!string.IsNullOrWhiteSpace(_accountError))
                {
                    <span class="v-span error m-2">@_accountError</span>
                }
                @if (!string.IsNullOrWhiteSpace(_accountInfo))
                {
                    <span class="v-span info m-2">@_accountInfo</span>
                }
                
            </TabOne>
            <TabTwo>
                <table class="v-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                    @if (_userAccountProvider is not null)
                    {
                        <Virtualize TItem="EcoAccountPlanetMember" ItemsProvider="@_userAccountProvider.GetVirtualizedItemsAsync" OverscanCount="20">
                            <tr @key="@context.RenderId">
                                <td>
                                    @if (context.Member is not null)
                                    {
                                        <UserInfoComponent Member="@context.Member"/>
                                    }
                                    else
                                    {
                                        <span>Unknown Member</span>
                                    }
                                </td>
                                <td>
                                    @if (context.Account is not null)
                                    {
                                        <span>@Currency.Format(context.Account.BalanceValue)</span>
                                    }
                                    else
                                    {
                                        <span>???</span>
                                    }
                                </td>
                            </tr>
                        </Virtualize>
                    }
                    </tbody>
                </table>
            </TabTwo>
        </TabContainerComponent>
    } 
    else
    {
        <span class="v-span m-1">You do not have permission to edit the currency.</span>        
    }
}



@code {
    
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    [Parameter]
    public Planet Planet { get; set; }
    
    private Virtualize<EcoAccount> _planetVirtualize;

    private static readonly string[] TabTitles = new [] { "Planet Accounts", "User Accounts" };
    
    public Currency Currency { get; set; }

    private bool _hasCurrencyPermission = false;
    
    // State handling
    private bool _loading = true;

    private string _currencyError = null;
    private string _currencyInfo = null;

    private string _accountError = null;
    private string _accountInfo = null;

    private ModelQueryEngine<EcoAccount> _sharedAccountProvider;
    private ModelQueryEngine<EcoAccountPlanetMember> _userAccountProvider;

    protected override async Task OnInitializedAsync()
    {
        _sharedAccountProvider = EcoService.GetSharedAccountQueryEngine(Planet);
        _userAccountProvider = EcoService.GetUserAccountQueryEngine(Planet);
        
        _hasCurrencyPermission = Planet.MyMember.HasPermission(PlanetPermissions.ManageCurrency);

        Currency = await Planet.FetchCurrencyAsync();

        _loading = false;
    }

    private void OnClickSetup()
    {
        Currency = new Currency(Client);
        Currency.PlanetId = Planet.Id;
    }

    private async Task OnClickSaveCurrency()
    {
        _currencyError = null;
        _currencyInfo = null;
        
        TaskResult<Currency> result;
        
        // New currency
        if (Currency.Id == 0)
        {
            result = await Currency.CreateAsync();
        }
        else
        {
            result = await Currency.UpdateAsync();
        }

        if (!result.Success)
        {
            _currencyError = $"Error: {result.Message}";
            return;
        }
        
        _currencyInfo = "Currency saved successfully.";
    }

    private async Task OnClickAddAccount()
    {
        var newAccount = new EcoAccount(Client)
        {
            UserId = Client.Me.Id,
            AccountType = AccountType.Shared,
            BalanceValue = 0,
            CurrencyId = Currency.Id,
            Name = string.Empty,
            PlanetId = Currency.PlanetId,
        };

        var result = await newAccount.CreateAsync();
        if (!result.Success)
        {
            _accountError = result.Message;
        }
        else
        {
            _accountInfo = result.Message;
            await _planetVirtualize.RefreshDataAsync();
        }
    }

    private async Task OnClickSaveAccount(EcoAccount account)
    {
        var result = await account.UpdateAsync();
        if (!result.Success)
        {
            _accountError = result.Message;
        }
        else
        {
            _accountInfo = "Saved successfully.";
        }
        
        StateHasChanged();
    }
    
    private async Task OnClickDeleteAccount(EcoAccount account)
    {
        var result = await account.DeleteAsync();
        if (!result.Success)
        {
            _accountError = result.Message;
        }
        else
        {
            _accountInfo = result.Message;
            await _planetVirtualize.RefreshDataAsync();
        }
        
        StateHasChanged();
    }

    private void OnClickIssue(EcoAccount account)
    {
        var data = new NumberInputModalComponent.ModalParams()
        {
            Title = "Issue Currency",
            Description = "How much currency would you like to issue?",
            ConfirmText = "Issue",
            CancelText = "Cancel",
            ConfirmEvent = (value) => OnConfirmIssue(account, value)
        };
        
        ModalRoot.OpenModal<NumberInputModalComponent>(data);
    }

    private async Task OnConfirmIssue(EcoAccount account, int value)
    {
        var issueTrans = new Transaction()
        {
            AccountFromId = account.Id,
            AccountToId = account.Id,
            Amount = (decimal) value,
            Data = null,
            PlanetId = account.PlanetId,
            Description = $"Issued {value} when supply was {account.BalanceValue} via Planet Settings",
            ForcedBy = null,
            Fingerprint = Guid.NewGuid().ToString(),
            UserFromId = account.UserId,
            UserToId = account.UserId,
        };

        var result = await EcoService.SendTransactionAsync(issueTrans);
                
        if (!result.Success)
        {
            _accountError = result.Message;
        }
        else
        {
            _accountInfo = result.Message;
            account.BalanceValue += value;
            Currency.Issued += value;
        }
                
        StateHasChanged();
    }
    
}