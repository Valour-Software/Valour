@using System.Net.Http.Headers
@inject ValourClient Client

<h3>Planet Information</h3>
<hr />
<br />

<span class="text-danger">@resultSpan</span>
<br />

<div class="form-group mt-2 new-input-style">
    <label>Name</label>
    <input class="form-control" placeholder="Name" @bind-value="@nameValue" />
</div>

<br />

<div class="form-group mt-2 new-input-style">
    <label>Description </label>
    <textarea class="form-control" placeholder="Description" @bind="@descValue" @bind:event="oninput"></textarea>
</div>

<br />

<p>Icon</p>

<div>
    <img @bind-src='IconUrl' @bind-src:event='onchange' style="width:128px; border:solid 4px black; margin: 5px; border-radius: 50%;" @onerror="OnPfpError" />
    <div style="display:inline-block">
        <InputFile OnChange="LoadFiles" AdditionalAttributes="@InputAttributes"></InputFile>
        <span id="result-span" style="display:block" class="text-info">@Image_Output</span>
        <span id="error-span" style="display:block" class="text-danger">@Image_Error</span>
    </div>
</div>

<div class="btn btn-outline-primary settings-save-button" @onclick="OnSaveChanges">Save</div>

@code {

    [Parameter]
    public Planet Planet { get; set; }

    public string nameValue;
    public string descValue;

    public string resultSpan;

    // Image fields
    public string IconUrl;
    public string Image_Output;
    public string Image_Error;

    Dictionary<string, object> InputAttributes = new Dictionary<string, object>()
    {
        { "accept", ".png,.jpg,.jpeg,.gif" },
    };

    protected Task OnPfpError()
    {
        IconUrl = "_content/Valour.Client/icon-512.webp";

        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        IconUrl = Planet.GetIconUrl(IconFormat.WebpAnimated256);
        nameValue = Planet.Name;
        descValue = Planet.Description;

        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        Image_Output = "";
        Image_Error = "";

        //var file = await e.File.RequestImageFileAsync("jpeg", 256, 256);

        var file = e.File;

        if (file == null)
        {
            Image_Error = "Could not load file as an image.";
        }

        if (file.Size > 8388608)
        {
            Image_Error = "Max planet image size is 8mb.";
        }

        byte[] data = new byte[file.Size];

        await file.OpenReadStream(2621440).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await Planet.Node.PostMultipartDataWithResponse<string>($"upload/planet/{Planet.Id}", content);

        if (result.Success)
        {
            // We slightly modify the url to force a refresh
            IconUrl = Planet.GetIconUrl(IconFormat.WebpAnimated256) + $"?x={DateTime.Now.Ticks}";
            
            Console.WriteLine("Response from CDN: " + result.Data);
            Image_Output = "Successfully changed planet icon.";
        }
        else
        {
            Image_Error = result.Message;
        }

        StateHasChanged();
    }

    public async Task OnSaveChanges()
    {
        if (nameValue != Planet.Name || descValue != Planet.Description)
        {
            Planet.Name = nameValue;
            Planet.Description = descValue;

            var result = await Planet.UpdateAsync();

            if (result.Success)
            {
                resultSpan = "Updated successfully.";
            }
            else
            {
                resultSpan = "Something went wrong! Please try again.";
            }
        }

        StateHasChanged();
    }

}
