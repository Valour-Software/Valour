@using System.Net.Http.Headers
@inject ValourClient Client

<div class="settings-container">
    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-globe2"></i>
            Planet Info
        </h3>
        <p class="subtitle">Edit your planet's name and description</p>

        <div class="form-group">
            <label>Name</label>
            <input class="v-input" placeholder="Planet Name" @bind-value="_nameValue" maxlength="32" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <textarea class="v-input" placeholder="Description" @bind="_descValue" @bind:event="oninput" maxlength="256"></textarea>
        </div>

        <ResultLabel Result="@_mainResult" />
        
        <SearchTagFilterComponent InitialTags="Planet.TagId" OnTagSelectToPlanet="HandleTagSelection"
                   OnTagRemoveToPlanet="HandleTagRemoved" ShowCreateButton="true"/>
        
        <div class="actions mt-3">
            <button class="v-btn primary" @onclick="OnSaveChanges">Save Changes</button>
        </div>
    </div>

    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-image"></i>
            Appearance
        </h3>
        <div class="appearance-split">
            <div class="options">
                <div>
                    <button class="v-btn primary" onclick="document.getElementById('icon-upload').click()">Upload Icon</button>
                    <p class="helper-text">Upload a Planet Icon (max 8MB, square)</p>
                    <ResultLabel Result="@_iconResult"/>
                    <InputFile @ref="_iconFileInput"
                               id="icon-upload"
                               OnChange="LoadIconFiles"
                               style="display:none"
                               accept=".png,.jpg,.jpeg,.gif,.webp"/>
                </div>
                
                <div>
                    <button class="v-btn primary" onclick="document.getElementById('bg-upload').click()">Upload Background</button>
                    <p class="helper-text">Upload a Planet Background (max 10MB, 300x400px)</p>
                    <ResultLabel Result="@_bgResult"/>
                    <InputFile @ref="_bgFileInput"
                               id="bg-upload"
                               OnChange="LoadBackgroundFiles"
                               style="display:none"
                               accept=".png,.jpg,.jpeg,.gif,.webp"/>
                </div>
            </div>
            <div class="card-preview">
                <DiscoveryPlanetCard HideActions="true" PlanetInfo="@Planet.ToListInfo()" />
            </div>
        </div>
        
       
    </div>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    private string _nameValue;
    private string _descValue;

    private ITaskResult _mainResult;
    private ITaskResult _iconResult;
    private ITaskResult _bgResult;

    private InputFile _iconFileInput;
    private InputFile _bgFileInput;

    protected override Task OnInitializedAsync()
    {
        _nameValue = Planet.Name;
        _descValue = Planet.Description;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task LoadIconFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
        {
            _iconResult = new TaskResult(false, "Could not load file as an image.");
            StateHasChanged();
            return;
        }

        if (file.Size > 8 * 1024 * 1024)
        {
            _iconResult = new TaskResult(false, "Max planet image size is 8MB.");
            StateHasChanged();
            return;
        }

        byte[] data = new byte[file.Size];
        await file.OpenReadStream(8 * 1024 * 1024).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await Planet.Node.PostMultipartDataWithResponse<string>($"upload/planet/{Planet.Id}", content);
        _iconResult = result;

        StateHasChanged();
    }
    
    private async Task LoadBackgroundFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
        {
            _iconResult = new TaskResult(false, "Could not load file as an image.");
            StateHasChanged();
            return;
        }

        if (file.Size > 10 * 1024 * 1024)
        {
            _iconResult = new TaskResult(false, "Max planet background size is 10MB.");
            StateHasChanged();
            return;
        }

        byte[] data = new byte[file.Size];
        await file.OpenReadStream(10 * 1024 * 1024).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await Planet.Node.PostMultipartDataWithResponse<string>($"upload/planetbg/{Planet.Id}", content);
        _bgResult = result;

        if (result.Success)
        {
            Planet.HasCustomBackground = true;
            Planet.Version += 1;
        }

        StateHasChanged();
    }

    private async Task OnSaveChanges()
    {
        if (_nameValue != Planet.Name || _descValue != Planet.Description )
        {
            Planet.Name = _nameValue;
            Planet.Description = _descValue;
        }
        
        var result = await Planet.UpdateAsync();
        _mainResult = result;
        StateHasChanged();
    }


    private void HandleTagSelection(PlanetTag planetTag)
    {
        if (Planet.TagId.Contains(planetTag.Id)) return;
        Planet.TagId.Add(planetTag.Id);
    }

    private void HandleTagRemoved(PlanetTag planetTag)
    {
        if (!Planet.TagId.Contains(planetTag.Id)) return;
        Planet.TagId.Remove(planetTag.Id);
    }
}
