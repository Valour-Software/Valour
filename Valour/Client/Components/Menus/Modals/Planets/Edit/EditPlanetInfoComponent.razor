@using System.Net.Http.Headers
@inject ValourClient Client

<div class="settings-container">
    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-globe2"></i>
            Planet Info
        </h3>
        <p class="subtitle">Edit your planet's name and description</p>

        <div class="form-group">
            <label>Name</label>
            <input class="v-input" placeholder="Planet Name" @bind-value="nameValue" maxlength="32" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <textarea class="v-input" placeholder="Description" @bind="descValue" @bind:event="oninput" maxlength="256"></textarea>
        </div>

        <ResultLabel Result="@_mainResult" />

        <div class="actions mt-3">
            <button class="v-btn primary" @onclick="OnSaveChanges">Save Changes</button>
        </div>
    </div>

    <div class="editor-section">
        <h3 class="editor-section-title">
            <i class="bi bi-image"></i>
            Planet Icon
        </h3>
        <p class="helper-text">Click the image to upload a new planet icon (max 8MB)</p>

        <div class="avatar-container">
            <img alt="Planet icon"
                 class="avatar bordered"
                 src="@IconUrl"
                 style="width:128px; border:solid 4px black; margin: 5px; border-radius: 50%; cursor:pointer"
                 @onerror="OnPfpError"
                 onclick="document.getElementById('icon-upload').click()" />

            <InputFile @ref="fileInput"
                       id="icon-upload"
                       OnChange="LoadFiles"
                       style="display:none"
                       accept=".png,.jpg,.jpeg,.gif,.webp" />

            <ResultLabel Result="@_imageResult" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    public string nameValue;
    public string descValue;

    public string IconUrl;

    private ITaskResult _mainResult;
    private ITaskResult _imageResult;

    private InputFile fileInput;

    protected Task OnPfpError()
    {
        IconUrl = "_content/Valour.Client/icon-512.webp";
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        IconUrl = Planet.GetIconUrl(IconFormat.WebpAnimated256);
        nameValue = Planet.Name;
        descValue = Planet.Description;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
        {
            _imageResult = new TaskResult(false, "Could not load file as an image.");
            StateHasChanged();
            return;
        }

        if (file.Size > 8388608)
        {
            _imageResult = new TaskResult(false, "Max planet image size is 8MB.");
            StateHasChanged();
            return;
        }

        byte[] data = new byte[file.Size];
        await file.OpenReadStream(8388608).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await Planet.Node.PostMultipartDataWithResponse<string>($"upload/planet/{Planet.Id}", content);
        _imageResult = result;

        if (result.Success)
        {
            // Force refresh
            IconUrl = Planet.GetIconUrl(IconFormat.WebpAnimated256) + $"?x={DateTime.Now.Ticks}";
        }

        StateHasChanged();
    }

    public async Task OnSaveChanges()
    {
        if (nameValue != Planet.Name || descValue != Planet.Description)
        {
            Planet.Name = nameValue;
            Planet.Description = descValue;

            var result = await Planet.UpdateAsync();
            _mainResult = result;
        }

        StateHasChanged();
    }
}
