@inherits Modal<AutomodTriggerModal.ModalParams>
@using Valour.Sdk.Models
@using Valour.Shared.Models.Staff
@using Valour.Sdk.Requests
@inject ValourClient Client

<BasicModalLayout Title="@(_isNew ? "Add Trigger" : "Edit Trigger")" Icon="shield-lock-fill" MaxWidth="600px">
    <MainArea>
        <div class="form-group mt-2">
            <label>Name</label>
            <input class="form-control" @bind="_trigger.Name" @oninput="OnChanged" />
        </div>
        @if (ShowTriggerWords)
        {
            <div class="form-group mt-2">
                <label>@TriggerWordsLabel</label>
                <input class="form-control" @bind="_trigger.TriggerWords" @oninput="OnChanged" />
            </div>
        }
        <div class="form-group mt-2">
            <label>Type</label>
            <select class="form-control" @bind="_trigger.Type" @onchange="OnChanged">
                @foreach (AutomodTriggerType t in Enum.GetValues<AutomodTriggerType>())
                {
                    <option value="@t">@t</option>
                }
            </select>
        </div>

        <p class="subtitle mt-3">ACTIONS</p>
        @if (_isNew)
        {
            <table class="table">
                <thead>
                    <tr><th>Type</th><th>Message</th><th>Strikes</th><th>Global</th><th></th></tr>
                </thead>
                <tbody>
                    @foreach (var act in _newActions)
                    {
                        <tr>
                            <td>@act.ActionType</td>
                            <td>@act.Message</td>
                            <td>@act.Strikes</td>
                            <td>@act.UseGlobalStrikes</td>
                            <td><button class="v-btn danger" @onclick="(() => RemoveNewAction(act))">Remove</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <QueryTable
                @ref="_actionTable"
                Columns="@_actionColumns"
                Engine="@_actionEngine"
                Infinite="true"
                Height="200px"
                TableMinWidth="700"
                RowHeight="40" />
        }

        <button class="v-btn mt-2" @onclick="OnAddAction">Add Action</button>
        <ResultLabel Result="@_result" />
    </MainArea>
    <ButtonArea>
        <div class="basic-modal-buttons">
            <button class="v-btn" @onclick="Close">Cancel</button>
            @if (_isNew || _changed)
            {
                <button class="v-btn primary" @onclick="OnSave">Save</button>
            }
        </div>
    </ButtonArea>
</BasicModalLayout>

@code {
    public class ModalParams
    {
        public Planet Planet { get; set; }
        public AutomodTrigger? Trigger { get; set; }
    }

    private AutomodTrigger _trigger;
    private bool _isNew;
    private ITaskResult _result;

    private bool _changed;

    private QueryTable<AutomodAction> _actionTable;
    private List<ColumnDefinition<AutomodAction>> _actionColumns;
    private ModelQueryEngine<AutomodAction> _actionEngine;
    private List<AutomodAction> _newActions;
    private bool _changed;

    private bool ShowTriggerWords =>
        _trigger.Type == AutomodTriggerType.Blacklist || _trigger.Type == AutomodTriggerType.Command;

    private string TriggerWordsLabel => _trigger.Type switch
    {
        AutomodTriggerType.Blacklist => "Trigger Words (comma separated)",
        AutomodTriggerType.Command => "Command Name",
        _ => string.Empty
    };

    protected override void OnInitialized()
    {
        _isNew = Data.Trigger is null;
        if (Data.Trigger is not null)
        {
            _trigger = Data.Trigger;
            _actionEngine = Client.AutomodService.GetActionQueryEngine(Data.Planet, _trigger.Id);
        }
        else
        {
            _trigger = new AutomodTrigger(Client) { PlanetId = Data.Planet.Id };
            _newActions = new();
        }

        _changed = false;

        _actionColumns = new()
        {
            new()
            {
                Name = "Type",
                RenderFragment = row => @<span>@row.Row.ActionType</span>,
                Width = "200px"
            },
            new()
            {
                Name = "Message",
                RenderFragment = row => @<span>@row.Row.Message</span>,
                Width = "250px"
            },
            new()
            {
                Name = "Strikes",
                RenderFragment = row => @<span>@row.Row.Strikes</span>
            },
            new()
            {
                Name = "Global",
                RenderFragment = row => @<span>@row.Row.UseGlobalStrikes</span>
            },
            new()
            {
                Name = "Actions",
                RenderFragment = row => @<div class="button-row">
                        <button class="v-btn danger" @onclick="(() => RemoveAction(row.Row))">Remove</button>
                    </div>,
                Width = "120px"
            }
        };
    }

    private async Task OnSave()
    {
        TaskResult<AutomodTrigger> res;
        if (_isNew)
        {
            _trigger.PlanetId = Data.Planet.Id;
            var req = new CreateAutomodTriggerRequest
            {
                Trigger = _trigger,
                Actions = _newActions
            };
            res = await Client.AutomodService.CreateTriggerAsync(req);
        }
        else
        {
            res = await _trigger.UpdateAsync();
        }
        _result = res;
        if (res.Success)
        {
            _changed = false;
            Close();
        }
    }

    private void OnAddAction()
    {
        var data = new AutomodActionModal.ModalParams
        {
            Planet = Data.Planet,
            Trigger = _trigger,
            Action = null,
            OnSaved = async () =>
            {
                if (_actionTable is not null)
                    await _actionTable.Requery();
            },
            LocalOnly = _isNew,
            OnSavedAction = async act =>
            {
                _newActions.Add(act);
                StateHasChanged();
            }
        };
        ModalRoot.OpenModal<Moderation.AutomodActionModal>(data);
    }

    private async Task RemoveAction(AutomodAction action)
    {
        if (_isNew)
        {
            RemoveNewAction(action);
            StateHasChanged();
            return;
        }

        var result = await action.DeleteAsync();
        _result = result;
        if (result.Success && _actionTable is not null)
            await _actionTable.Requery();
    }

    private void RemoveNewAction(AutomodAction action)
    {
        _newActions.Remove(action);
    }

    private void OnChanged(ChangeEventArgs _)
    {
        _changed = true;
    }
}
