@inject ValourClient Client
@inherits Modal<ChangeUsernameModal.Params>

<BasicModalLayout Title="Change Username" Icon="person-fill" ContentStyles="padding: 1em">
    <MainArea>
        @if (_canChangeUsername)
        {
            <div class="form-group">
                <label class="m-2">Password</label>
                <input id="password-input" type="password" autocomplete="current-password" class="form-control" @bind-value="@_password"/>
                <label class="m-2">New Username</label>
                <input id="new-username-input" type="text" autocomplete="off" class="form-control" @bind-value="@_newUsername"/>
            </div>
        }
        else
        {
            <p>@_changeUsernameMessage</p>
        }

        <ResultLabel Result="@_result"/>
    </MainArea>
    <ButtonArea>
        <div class="basic-modal-buttons">
            <button @onclick="@OnCancel" class="v-btn">Cancel</button>
            
            @if (_canChangeUsername)
            {
                <button @onclick="@OnConfirm" class="v-btn danger">Confirm</button>
            }
        </div>
    </ButtonArea>
</BasicModalLayout>

@code {
    public class Params {}
    private string _changeUsernameMessage;
    private bool _canChangeUsername = false;

    private string _newUsername = "";
    private string _password = "";

    private ITaskResult _result;


    private void OnCancel()
    {
        Close();
    }

    private async Task OnConfirm()
    {
        var toastData = new ProgressToastData<TaskResult>()
        {
            ProgressTask = Client.UpdateMyUsernameAsync(_newUsername, _password),
            Title = "Changing Username",
            Message = "Updating...",
            SuccessMessage = "Username updated!",
        };
        
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);
        if (result.Success)
        {
            Close();
        }
        else
        {
            _result = result;
            StateHasChanged();   
        }
    }

    private void SetChangeUsernameMessage()
    {
        var user = Client.Me;
        var daysSinceLastChange = double.MaxValue;
        if (user.NameChangeTime is not null)
        {
            daysSinceLastChange = (DateTime.UtcNow - user.NameChangeTime.Value).TotalDays;
        }
        
        if (user.Subscription is null)
        {
            if (daysSinceLastChange < 30)
            {
                var daysLeft = 30 - daysSinceLastChange;
                _changeUsernameMessage = $"You can change your username again in {daysLeft.ToString("F0")} {(daysLeft > 1 ? "days" : "day")}.\nStargazers can change their username every 7 days!";
            }
            else
            {
                _canChangeUsername = true;
            }
        }
        else
        {
            if (daysSinceLastChange < 7)
            {
                var daysLeft = 7 - daysSinceLastChange;
                _changeUsernameMessage = $"You can change your username again in {daysLeft.ToString("F0")} {(daysLeft > 1 ? "days" : "day")}.";
            }
            else
            {
                _canChangeUsername = true;
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetChangeUsernameMessage();
    }
}