@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@inject ValourClient Client
@inject TenorService TenorService

@using Valour.TenorTwo.Models
@using Valour.TenorTwo.Responses

<div style="display: @(_visible ? "absolute" : "none")" id="tenor-bg-@ChannelWindow.WindowCtx.Id" class="tenor-bg">
    <input @bind="_searchTerm" @bind:event="oninput" @onkeyup="OnSearchChange" class="form-control mb-2" placeholder="Search Tenor..." />
    <div class="masonry-scroller">
        <div id="masonry-root-@ChannelWindow.WindowCtx.Id" class="masonry-root">
            @if (SearchResults?.Results is not null)
            {
                foreach (var result in SearchResults.Results)
                {
                    var media = result.GetFormat(MediaFormatType.tinygif);
                    if (media is null)
                        return;

                    var addGif = result;
                    <div @key="@("cell-" + result.Id)" class="masonry-cell" @onclick="async () => await OnClickGif(result)">
                        @if (TenorService.TenorFavorites.Any(x => x.TenorId == result.Id))
                        {
                            <h3 class="favorite" @onclick="() => OnClickUnfavorite(addGif)" @onclick:stopPropagation="true">‚ù§Ô∏è</h3>
                        }
                        else
                        {
                            <h3 class="favorite" @onclick="() => OnClickFavorite(addGif)" @onclick:stopPropagation="true">ü§ç</h3>
                        }
                        <img data-natwidth="@media.Dims[0]" data-natheight="@media.Dims[1]" class="item" src="@media.Url" alt="@result.Title"/>
                    </div>
                }
            }
            else if (CategoryResults is not null)
            {
                <div class="masonry-cell">
                    <h2>Favorites ‚ù§Ô∏è</h2>
                    <img data-natwidth="210" data-natheight="180" class="item" src="./_content/Valour.Client/media/Spookvooper.jpg" alt="Favorites" @onclick='() => OnClickCategory(":favorites:")'/>
                </div>
                
                foreach (var category in CategoryResults.Categories)
                {
                    <div class="masonry-cell">
                        <h2>@category.Name</h2>
                        <img data-natwidth="210" data-natheight="180" class="item" src="@category.Image" alt="@category.Name" @onclick="() => OnClickCategory(category.SearchTerm)"/>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ChatWindowComponent ChannelWindow { get; set; }
    
    /// <summary>
    /// Module for calling Javascript functions
    /// </summary>
    private IJSInProcessObjectReference _jsModule;
    
    /// <summary>
    /// Dotnet object reference for use in Javascript
    /// </summary>
    private DotNetObjectReference<TenorMenuComponent> _thisRef;
    
    private MediaResponse SearchResults { get; set; }
    
    private CategoriesResponse CategoryResults { get; set; }
    
    private string _searchTerm;

    private bool _visible = false;

    private bool _canRender = false;

    // Used for debouncing
    private string _newestSearch;
    private DateTime _lastLoad = DateTime.UtcNow;

    protected override bool ShouldRender()
        => _canRender;

    public void Refresh()
    {
        _canRender = true;
        StateHasChanged();
    }

    private async Task OnClickFavorite(TenorTwo.Models.Media media)
    {
        var favorite = new TenorFavorite(Client)
        {
            UserId = Client.Me.Id,
            TenorId = media.Id
        };

        await TenorService.AddTenorFavorite(favorite);
        
        Refresh();
    }

    private async Task OnClickUnfavorite(TenorTwo.Models.Media media)
    {
        var favorite = TenorService.TenorFavorites.FirstOrDefault(x => x.TenorId == media.Id);
        if (favorite is null)
            return;
        
        await TenorService.RemoveTenorFavorite(favorite);
        
        Refresh();
    }

    private async Task OnClickGif(TenorTwo.Models.Media media)
    {
        ChannelWindow.InputComponent.AddTenor(media);
        Hide();
        
        // Register share to make Tenor happy
        await TenorService.Client.RegisterShare(media.Id, _searchTerm);
    }

    private async Task OnSearchChange()
    {
        string term = new string(_searchTerm);
        _newestSearch = _searchTerm;
        
        // If we're currently loading a result, wait to send off another request.
        if (_lastLoad.AddMilliseconds(500) > DateTime.UtcNow)
            await Task.Delay(500);
        
        _lastLoad = DateTime.UtcNow;

        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            SearchResults = null;
            Refresh();
            return;
        }

        // There's been more typing since the delay and we're not the latest.
        // Cancel here.
        if (term != _searchTerm)
            return;

        await FocusAndScroll();

        if (_searchTerm == ":favorites:")
            SearchResults = await TenorService.Client
                .Posts(TenorService.TenorFavorites.Select(x => x.TenorId).ToArray(), 100, formatFilter: TenorService.Formats);
        else
            SearchResults = await TenorService.Client.Search(_searchTerm, 50, formatFilter: TenorService.Formats);
        
        Refresh();
    }

    private async Task OnClickCategory(string term)
    {
        _searchTerm = term;
        await OnSearchChange();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _canRender = false;
        
        if (firstRender)
        {
            _thisRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Menus/Upload/TenorMenuComponent.razor.js");
            await _jsModule.InvokeVoidAsync("setupHide", "tenor-bg-" + ChannelWindow.WindowCtx.Id, _thisRef);
        }
        
        await BuildMasonry(); 
    }

    public async Task FocusAndScroll()
    {
        await _jsModule.InvokeVoidAsync("focusAndScroll", "masonry-root-" + ChannelWindow.WindowCtx.Id);
    }

    public async Task BuildMasonry()
    {
        if (_jsModule is not null)
            await _jsModule.InvokeVoidAsync("buildMasonry", "masonry-root-" + ChannelWindow.WindowCtx.Id);
    }
    
    public async Task Show()
    {
        _visible = true;

        if (CategoryResults is null)
        {
            CategoryResults = await TenorService.Client.Categories();
        }
        
        await FocusAndScroll();
        Refresh();
    }

    [JSInvokable]
    public void Hide()
    {
        if (!_visible)
            return;
        
        _visible = false;
        Refresh();
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await _jsModule.DisposeAsync();
        _thisRef?.Dispose();
    }

}