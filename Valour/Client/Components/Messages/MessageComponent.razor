@using global::Markdig.Blazor
@using Valour.Client.Emojis
@inject ValourClient Client
@inject ContextMenuService ContextMenuService
@implements IDisposable

@if (_message == null || _message.IsEmpty() || !_isBuilt)
{
    _renderWasEmpty = true;
    return;
}
else
{
    _renderWasEmpty = false;
}

<div id="@Id"
     class="@_class"
     style="@_style"
     tabindex="0"
     @oncontextpress="@OnContextMenu"
     @oncontextpress:stopPropagation="true"
     @onpointerdown="@OnPointerDown"
     @onmouseenter="@OnMouseEnter"
     @ref="OuterRef">
    
    <div class="left-info">
        @if (!Minimal)
        {
            @if (_user.HasAnimatedAvatar)
            {
                <style>
                    .message:hover .author-avatar-@_user.Id {
                        background-image: url(@_animatedAvatarUrl), url(@_avatarUrl), url(@_fallbackAvatarUrl) !important;
                    }
                </style>
            }
            <div style="background-image: url(@_avatarUrl), url(@_fallbackAvatarUrl)" alt="@_name's profile picture" loading="lazy" class="author-avatar author-avatar-@_user.Id" @onerror="OnAvatarError"></div>
        }
        <div class="time-container">
            <span class="time" title="@_timeTitle">
                @_timeText
            </span>
        </div>
    </div>
    <div class="content-holder">

        @if (!Minimal)
        {
            <div class="name-role-holder">
                
                <p @onclick="OnClickName" 
                   @oncontextpress:stopPropagation="true"
                   @oncontextpress="@OnNameContextMenu"
                   class="author-name" 
                   style="color: @_nameColor;">
                    @_name
                </p>

                <div class="dot-badge-holder">
                    @if (_user.SubscriptionType == UserSubscriptionTypes.Stargazer.Name)
                    {
                        <TooltipTrigger>
                            <ChildContent>
                                <img alt="Stargazer badge" class="dot-badge" src="_content/Valour.Client/media/stargazer-badge.svg" />
                            </ChildContent>
                            <TooltipContent>
                                <span>Stargazer</span>
                            </TooltipContent>
                        </TooltipTrigger>
                    }
                    @if (_user.Id <= 22113735421460480)
                    {
                        <span class="badge-1k">1k</span>
                    }
                </div>

                <span class="role-name">
                    &nbsp;- @_nameTag
                </span>
                <span class="time" title="@_timeTitle">
                    (@_timeText)
                </span>
            </div>
        }

        @if (_message.ReplyTo is not null && !_isInnerReply)
        {
            @RenderReply
        }

        <div class="content">
            @if (_message.Attachments != null)
            {
                @for (var i = 0; i < _message.Attachments.Count; i++)
                {
                    var id = i;
                    var attachment = _message.Attachments[id];
                    var par = new Dictionary<string, object>()
                    {
                        {"Attachment", attachment},
                        {"Message", _message}
                    };

                    <div class="attachment-wrapper" @onclick="() => OnClickAttachment(id)">
                        @if (_ghost)
                        {
                            <div class="attachment-x">x</div>
                        }
                        <DynamicComponent Type="attachment.GetComponentType()" Parameters="par"></DynamicComponent>
                    </div>
                }
            }

            @if (_message.Embed != null && _message.Embed.Pages.Count > 0)
            {
                <EmbedComponent Message="@_message" MessageComponent="@this"></EmbedComponent>
                @if (_message.EditedTime != null)
                {
                    <p class="edited-flag"> (Edited)</p>
                }
            }
            else
            {
                @RenderContent

                @if (Edit)
                {
                    <p class="edit-flag">(Editing)</p>
                }

                @if (_message.EditedTime != null)
                {
                    <p class="edited-flag"> (Edited)</p>
                }
            }
        </div>
    </div>
    @if (_reactions is not null && _reactions.Count > 0)
    {
        <div class="reactions">
            @foreach (var reaction in _reactionsToRender)
            {
                var added = _myReactions.Contains(reaction.emoji) ? "added" : "";
                var newReaction = _newReactions != null && _newReactions.Contains(reaction.emoji) ? "new" : "";
                
                <div class="reaction @added @newReaction" @onclick="() => OnReactionClick(reaction.emoji)">
                    <img class="emoji" src="@EmojiSourceProvider.GetSrcUrlFromNative(reaction.emoji)" alt="@reaction.emoji"/>
                    <span class="reaction-count">@reaction.count</span>
                </div>
            }

            @if (_reactions.Count > 20)
            {
                <div class="show-all-reactions" @onclick="() => SetShowAllReactions(!_showAllReactions)">
                    <a href="#">@(_showAllReactions ? "Show Less" : $"Show All (+{_reactions.Count - 20})")</a>
                </div>
            }
        </div>
    }

    @if (_isInnerReply)
    {
        <div class="reply-x">x</div>
    }
</div>

@code {
    
    public class Params
    {
        public ChatWindowComponent ChatComponent;
        public Message Message;
        public Message LastMessage;
        public bool IsInnerReply;
        public bool Ghost;
    }

    private RenderFragment RenderContent => builder =>
    {
        if (string.IsNullOrWhiteSpace(_message.Content))
            return;
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "fragments");
        try
        {
            Markdown.RenderToFragment(
                _message.Content,
                builder,
                MarkdownManager.Pipeline,
                MarkdownManager.Renderer,
                this);
        } catch (Exception e)
        {
            Client.Logger.Log("Message", "Error rendering message: " + e.Message, "red");
            builder.AddContent(2, _message.Content);
        }

        builder.CloseElement();
    };
    
    private RenderFragment RenderReply => builder =>
    {
        var messageParams = new Params()
        {
            Message = _message.ReplyTo,
            LastMessage = null,
            Ghost = _ghost,
            IsInnerReply = true,
            ChatComponent = _chat
        };

        builder.OpenComponent<MessageComponent>(0);
        builder.AddAttribute(0, "ParamData", messageParams);
        builder.SetKey($"r-{_message.Id}-{_message.ReplyTo!.Id}");
        builder.CloseComponent();
    };
    
    public ElementReference OuterRef;
    public float FullHeight;
    private bool _renderWasEmpty = false;

    /* Set Params */
    [Parameter]
    public Params ParamData { get; set; }
    
    private ChatWindowComponent _chat;
    private Message _message;
    private Message _lastMessage;
    private bool _ghost;
    private bool _isInnerReply;
    /* End Set Params */
    
    private IMessageAuthor _author;

    /* Planet Message Only */
    private PlanetMember _member;
    
    /* End Planet Message Only */
    private User _user;

    public MessageComponent ReplyComponent;

    public bool ShouldRenderValue = false;

    public bool Minimal = false;

    public string Id = "";

    private string _nameColor = "#ffffff";
    private string _nameTag = "Default";
    private string _avatarUrl = "";
    private string _animatedAvatarUrl = "";
    private string _fallbackAvatarUrl = "";
    private string _name = "User not Found";

    private string _timeTitle = "";
    private string _timeText = "";

    public bool Edit = false;
    private bool _mentioned = false;
    private bool _isBuilt = false;

    private string _class = "message";
    private string _style = string.Empty;

    #region Reactions

    /* Reaction data */
    private Dictionary<string, int> _reactions;
    private HashSet<string> _myReactions;
    private HashSet<string> _newReactions;
    private List<(string emoji, int count)> _reactionsToRender = new();
    private bool _showAllReactions = false;
    
    
    private void CalculateReactions()
    {
        if (_ghost || _isInnerReply) return;
        
        if (_message.Reactions is null || _message.Reactions.Count == 0)
        {
            _reactions = null;
            return;
        }
        
        if (_reactions is null)
        {
            _reactions = new Dictionary<string, int>();
            _myReactions = new HashSet<string>();
        }
        else
        {
            _reactions.Clear();
            _myReactions.Clear();
        }
        
        foreach (var reaction in _message.Reactions)
        {
            if (!_reactions.TryAdd(reaction.Emoji, 1))
            {
                _reactions[reaction.Emoji]++;
            }

            if (reaction.AuthorUserId == Client.Me.Id)
            {
                _myReactions.Add(reaction.Emoji);
            }
        }

        BuildReactionRenderList();
    }

    private void BuildReactionRenderList()
    {
        if (_ghost || _isInnerReply) return;
        
        if (_showAllReactions)
        {
            _reactionsToRender = _reactions.OrderByDescending(x => x.Value)
                .Select(x => (x.Key, x.Value))
                .ToList();
        }
        else
        {
            _reactionsToRender = _reactions.OrderByDescending(x => x.Value)
                .Select(x => (x.Key, x.Value))
                .Take(20)
                .ToList();
        }
    }
    
    private void SetShowAllReactions(bool show)
    {
        _showAllReactions = show;
        BuildReactionRenderList();
        
        ReRender();
    }
    
    private void OnReactionAdded(MessageReaction reaction)
    {
        if (_ghost || _isInnerReply) return;
        
        // Ensure reactions collections are initialized
        if (_reactions is null)
        {
            _reactions = new Dictionary<string, int>();
            _myReactions = new HashSet<string>();
        }
        
        if (!_reactions.TryAdd(reaction.Emoji, 1))
        {
            _reactions[reaction.Emoji]++;
        }
        else
        {
            if (_newReactions is null)
            {
                _newReactions = new HashSet<string>();
            }
            
            _newReactions.Add(reaction.Emoji);
        }
        
        if (reaction.AuthorUserId == Client.Me.Id)
        {
            _myReactions.Add(reaction.Emoji);
        }
        
        BuildReactionRenderList();
        
        // Re-render the component to show the updated reactions
        ReRender();
    }
    
    private void OnReactionRemoved(MessageReaction reaction)
    {
        if (_ghost || _isInnerReply) return;
        
        if (_reactions is null)
            return;

        if (_reactions.TryGetValue(reaction.Emoji, out var count))
        {
            if (count == 1)
            {
                _reactions.Remove(reaction.Emoji);
            }
            else
            {
                _reactions[reaction.Emoji]--;
            }
        }

        if (reaction.AuthorUserId == Client.Me.Id)
        {
            _myReactions.Remove(reaction.Emoji);
        }
        
        BuildReactionRenderList();

        // Re-render the component to show the updated reactions
        ReRender();
    }
    
    private async Task OnReactionClick(string emoji)
    {
        if (_ghost || _isInnerReply) return;

        if (_myReactions.Contains(emoji))
        {
            await _message.RemoveReactionAsync(emoji);
        }
        else
        {
            await _message.AddReactionAsync(emoji);
        }
    }

    #endregion

    private void CalculateClassAndStyles()
    {
        var newClass = "message";

        if (Minimal)
            newClass += " minimal";

        if (_mentioned)
            newClass += " mentioned";

        if (Edit)
            newClass += " edit";

        if (_isInnerReply)
        {
            newClass += " reply";

            if (_member is not null)
            {
                _style = $"border-left-color: {_nameColor}85";
            }
        }

        if (_ghost)
            newClass += " ghost";

        if (_message.ReplyTo is not null)
            newClass += " hasreply";

        _class = newClass;
    }

    private void CalculateTime()
    {
        var hoursAgo = (DateTime.UtcNow - _message.TimeSent).TotalHours;
        var localTime = _message.TimeSent.ToLocalTime();

        if (hoursAgo >= 24)
        {
            if (hoursAgo <= 48)
            {
                _timeTitle = $"Yesterday at {localTime.ToShortTimeString()}";
                _timeText = "Yesterday";
            }
            else
            {
                _timeTitle = localTime.ToShortDateString().Replace("00", "") + " " + localTime.ToShortTimeString();
                _timeText = $"{localTime.ToShortDateString().Replace("00", "")}";
            }
        }
        else
        {
            _timeTitle = localTime.ToShortDateString().Replace("00", "") + " " + localTime.ToShortTimeString();
            _timeText = localTime.ToShortTimeString().Replace(' ', '\0');
        }
    }

    private Task OnClickName(MouseEventArgs e)
    {
        if (_member is not null)
        {
            return ProfilePopup.Instance.OpenAsync(_member, (int)e.ClientX, (int)e.ClientY);
        }
        else
        {
            return ProfilePopup.Instance.OpenAsync(_user, (int)e.ClientX, (int)e.ClientY);
        }
    }


    private async Task OnEditReceived(ModelUpdatedEvent<Message> eventData)
    {
        BuildMessage();
        await CloseEditMode();
    }

    private void OnContextMenu(ContextPressEventArgs e)
    {
        ContextMenuService.Root.OpenMenu<MessageContextMenu>(e,
            new MessageContextMenu.MessageContextParams()
            {
                Message = _message,
                MessageComponent = this,
                WindowComponent = _chat
            }
        );
    }
    
    private void OnNameContextMenu(ContextPressEventArgs e)
    {
        if (_member is not null)
        {
            ContextMenuService.Root.OpenMenu<MemberContextMenu>(e,
                new MemberContextMenu.MemberContextParams()
                {
                    Member = _member,
                }
            );
        }
        else
        {
            ContextMenuService.Root.OpenMenu<UserContextMenu>(e, new UserContextMenu.UserContextParams()
            {
                User = _user
            });
        }
    }

    public async Task OnPointerDown()
    {
        if (_ghost)
        {
            if (_isInnerReply)
            {
                Console.WriteLine("Removing replyto");
                var input = _chat.InputComponent;
                await input.RemoveReply();
            }
        }
        else
        {
            await _chat.WindowCtx.NotifyFocused();
        }
    }

    public void OnClickAttachment(int id)
    {
        if (_ghost)
        {
            var input = _chat.InputComponent;
            input.RemoveAttachment(id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_message is null)
                return;
            
            // Clear notification if one exists for this message
            var found = Client.NotificationService.UnreadNotificationsLookupBySource.TryGetValue(_message.Id, out var notification);
            if (found && notification.TimeRead is null)
            {
                await Client.NotificationService.MarkNotificationRead(notification, true);
            }
        }

        await MonitorHeightChanges(firstRender);
    }

    private async Task MonitorHeightChanges(bool firstRender)
    {
        if (_renderWasEmpty) return;
        
        var dims = await BrowserUtils.GetElementDimensions(OuterRef);
        var newHeight = dims.Height;

        if (!firstRender)
        {
            var heightChange = Math.Abs(newHeight - FullHeight);
            
            // Check for a change in height
            if (heightChange > 1)
            {
                // If it has changed, let the chat know to scroll down accordingly
                if (_chat != null)
                {
                    await _chat.ShiftScrollPosition(heightChange);
                }
            }
            
            // Console.WriteLine("Old height: " + FullHeight);
            // Console.WriteLine("New height: " + newHeight);
        }
        
        FullHeight = dims.Height;
    }

    public async Task OpenEditMode()
    {
        Edit = true;

        CalculateClassAndStyles();

        ReRender();

        await _chat.OpenEditMode(this);
    }

    public async Task CloseEditMode(bool cancel = false)
    {
        if (!Edit)
            return;

        Edit = false;

        CalculateClassAndStyles();

        await _chat.CloseEditMode(cancel);

        ReRender();
    }

    public void SetMessage(Message message)
    {
        _message = message;
        BuildMessage();

        ReRender();
    }

    public void RefreshMessage()
    {
        BuildMessage();
        StateHasChanged();
    }

    public void SetLast(Message msg)
    {
        _lastMessage = msg;
    }

    public void BuildMessage(bool render = true)
    {
        if (_message == null)
            return;
        
        CalculateReactions();

        // Check if we are a minimal message
        CheckMinimal();

        if (!_isInnerReply)
            _mentioned = _message.CheckIfMentioned();
        
        CalculateTime();

        if (Minimal)
        {
            CalculateClassAndStyles();
            _isBuilt = true;

            if (render)
                ReRender();

            return;
        }

        _name = GetAuthorName();
        _nameColor = GetAuthorColor();
        _nameTag = GetAuthorRoleTag();
        _avatarUrl = GetAuthorAvatar();
        _animatedAvatarUrl = GetAuthorAvatarAnimated();
        _fallbackAvatarUrl = GetAuthorAvatarUrlFallback();
        CalculateClassAndStyles();

        _isBuilt = true;

        if (render)
            ReRender();
    }

    protected override async Task OnInitializedAsync()
    {
        _message = ParamData.Message;
        _lastMessage = ParamData.LastMessage;
        _ghost = ParamData.Ghost;
        _isInnerReply = ParamData.IsInnerReply;
        _chat = ParamData.ChatComponent;
        
        KeyboardListener.KeyDown += OnKeyDown;
        
        if (_message is null)
        {
            Client.Logger.Log("Message", "MessageData is null", "red");
            return;
        }
        
        // This prevents client sync issues from breaking the message
        _message.SetClient(Client);
        
        await base.OnInitializedAsync();

        Id = $"m-{_message.ChannelId}-{_message.Id}";

        _user = await _message.FetchAuthorUserAsync();

        if (_user != null)
            _user.Updated += OnUserUpdated;
        
        if (!_isInnerReply && !_ghost)
        {
            _chat.AddRenderedMessage(this);
        }

        // Planet message logic
        if (_message.PlanetId is not null)
        {
            
            _member = await _message.FetchAuthorMemberAsync();
            
            // Hook events
            if (_member is not null) // There is a chance they were deleted
            {
                _member.Updated += OnMemberUpdated;
            }
        }

        _author = _member is not null ? _member : (_user ?? User.NotFound);
        
        BuildMessage(false);

        _message.ReactionAdded += OnReactionAdded;
        _message.ReactionRemoved += OnReactionRemoved;
    }
    
    /// <summary>
    /// Returns the name that should be displayed for the author of this message
    /// </summary>
    private string GetAuthorName()
    {
        if (_member is not null)
            return _member.Name;
        
        if (_user is not null)
            return _user.Name;
        
        return "Unknown User";
    }
    
    private string GetAuthorRoleTag()
    {
        // If there's a member, we use the member's planet role
        if (_member is not null) 
            return _member.PrimaryRole?.Name ?? "Unknown Role";

        if (_user is not null)
        {

            // Bot always shows Bot
            if (_user.Bot)
                return "Bot";

            // Otherwise, we use their relationship with the user
            if (_user.Id == Client.Me.Id)
                return "You";
        }

        return Client.FriendService.FriendLookup.ContainsKey(ParamData.Message.AuthorUserId) ? "Friend" : "User";
    }
    
    private string GetAuthorColor()
    {
        return _member is not null ? (_member.PrimaryRole?.Color ?? "#fff") :
            (Client.FriendService.FriendLookup.ContainsKey(ParamData.Message.AuthorUserId) ? "#9ffff1" : "#fff");
    }
    
    public string GetAuthorAvatar() =>
        _author?.GetAvatar(AvatarFormat.Webp128);
    
    public string GetAuthorAvatarAnimated()
    {
        if (_user is not null)
        {
            // TODO: Tweak when member avatars are implemented
            if (!_user.HasAnimatedAvatar)
                return null;
        }

        if (_author is not null)
        {
            return _author.GetAvatar(AvatarFormat.WebpAnimated128);
        }

        return ISharedUser.DefaultAvatar;
    }

    public string GetAuthorAvatarUrlFallback()
    {
        if (_author is not null)
        {
            _author.GetFailedAvatar();
        }
        
        return ISharedUser.DefaultAvatar;
    }

    private async Task OnKeyDown(KeyboardListener.KeyboardEvent e)
    {
        if (e.Key != "Escape") return;
        if (Edit) 
        {
            await CloseEditMode(true);
        }
 
        if (_isInnerReply)
        {
            var input = _chat.InputComponent;
            await input.RemoveReply(); 
        }
        
        if (_ghost)
        {
            var input = _chat.InputComponent;
            input.RemoveAttachment(-1);
        }
    }

    public void OnUserUpdated(ModelUpdatedEvent<User> eventData)
    {
        bool render = false;

        if (eventData.Changes.On(x => x.Name))
        {
            render = true;
            _name = GetAuthorName();
        }

        if (eventData.Changes.On(x => x.HasCustomAvatar) ||
            eventData.Changes.On(x => x.Version))
        {
            render = true;
            _avatarUrl = GetAuthorAvatar();

            if (_user.HasAnimatedAvatar)
            {
                _animatedAvatarUrl = GetAuthorAvatarAnimated();
            }
        }

        if (render)
        {
            ReRender();
        }
    }

    private void OnMemberUpdated(ModelUpdatedEvent<PlanetMember> eventData)
    {
        var render = false;
        
        if (eventData.Changes.On(x => x.Nickname))
        {
            render = true;
            _name = GetAuthorName();
        }

        if (eventData.Changes.On(x => x.MemberAvatar))
        {
            render = true;
            _avatarUrl = GetAuthorAvatar();
            
            if (_user.HasAnimatedAvatar)
            {
                _animatedAvatarUrl = GetAuthorAvatarAnimated();
            }
        }

        if (eventData.Changes.On(x => x.RoleMembership))
        {
            render = true;
            
            _nameTag = _member.PrimaryRole.Name;
            _nameColor = _member.PrimaryRole.Color;
        }

        if (render)
        {
            ReRender();
        }
    }
    
    public void CheckMinimal()
    {
        if (_lastMessage != null && _message != null)
        {
            if (_message.ReplyTo is not null)
            {
                Minimal = false;
                return;
            }
            if (_lastMessage.AuthorUserId == _message.AuthorUserId)
            {
                Minimal = true;
                return;
            }
        }

        Minimal = false;
    }

    public void ReRender()
    {
        if (_ghost && _isInnerReply) return;

        ShouldRenderValue = true;
        
        StateHasChanged();

        ShouldRenderValue = false;
    }

    void IDisposable.Dispose()
    {
        if (_chat != null)
        {
            _chat.RemoveRenderedMessage(this);
        }
        
        if (_member is not null)
        {
            _member.Updated -= OnMemberUpdated;
        }
    }

    // Always allow a re-render when the pfp fails to load
    private bool _avatarErrorRender = false;
    
    private void OnAvatarError()
    {
        _avatarUrl = _author.GetFailedAvatar();
        _avatarErrorRender = true;
        ReRender();
    }

    /// <summary>
    /// This prevents the message from re-rendering. This should be expanded to support message edits in the future.
    /// </summary>
    protected override bool ShouldRender()
    {
        if (_avatarErrorRender)
        {
            _avatarErrorRender = false;
            return true;
        }

        if (_ghost && _isInnerReply) return false;

        return ShouldRenderValue;
    }
    
    private void OnMouseEnter()
    {
        if (ParamData.Ghost || ParamData.IsInnerReply) return;
        _chat?.NotifyMessageMouseEnter(this);
    }

}