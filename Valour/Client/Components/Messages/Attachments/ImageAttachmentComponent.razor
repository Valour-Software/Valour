@using Valour.Client.Components.Menus.Modals.Attachments
@inherits AttachmentComponent

<div class="image-attachment-wrapper" style="@GetWrapperStyle()" @onclick="OnClick">
    <img class="attached-image" style="@GetImageStyle()" alt="@Attachment.FileName" src="@_location" @onerror="@OnImageError" />
</div>

@code {
    
    [Parameter]
    public bool DoAspect { get; set; } = true;
    
    private int _width;
    private int _height;
    private bool _widthLarger;

    private string GetWrapperStyle()
    {
        if (DoAspect)
            return $"aspect-ratio: {_width} / {_height}; max-width: min({MaxSize}px, 100%); width: {_width}px";

        return $"max-width: min({MaxSize}px, 100%); width: {_width}px";
    }

    private string GetImageStyle()
    {
        return $"max-width: min({MaxSize}px, 100%); max-height: min({MaxSize}px, 80vh); ";
    }

    [Parameter]
    public float MaxSize { get; set; } = 400f;
    
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    [Parameter]
    public bool Clickable { get; set; } = true;

    [Parameter]
    public string CustomStyle { get; set; }
    
    private string _location;

    protected override async Task OnInitializedAsync()
    {
        _location = await GetSignedUrl();
        
        var width = Attachment.Width;
        var height = Attachment.Height;

        if (width > MaxSize || height > MaxSize)
        {

            _widthLarger = Attachment.Width > Attachment.Height;

            if (_widthLarger)
            {
                var ratio = Attachment.Width / MaxSize;
                _width = (int)MaxSize;
                _height = (int)(Attachment.Height / ratio);
            }
            else
            {
                var ratio = Attachment.Height / MaxSize;
                _height = (int)MaxSize;
                _width = (int)(Attachment.Width / ratio);
            }
        }
        else
        {
            _width = width;
            _height = height;
        }
        
        base.OnInitialized();
    }

    private void OnClick()
    {
        if (!Clickable) return;
        
        var modalParams = new AttachmentModal.ModalParams()
        {
            Attachment = Attachment
        };
        
        ModalRoot.OpenModal<AttachmentModal>(modalParams);
    }
    
    private void OnImageError()
    {
        _location = "_content/Valour.Client/media/image-not-found.webp";
        
        var size = Attachment.Height > 400 ? 400 : Attachment.Height;
        
        _width = size;
        _height = size;
        StateHasChanged();
    }
}
