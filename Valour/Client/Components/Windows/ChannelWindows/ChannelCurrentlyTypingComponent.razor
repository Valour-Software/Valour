@using Valour.Shared.Channels
@implements IDisposable
@inject ValourClient Client
@inject ChannelService ChannelService
@inject UserService UserService

<div class="currentlytyping-container">
    @if (DisplayData.Count > 0)
    {
        <!--<img class="icon" src="_content/Valour.Client/media/CurrentIsTypingIcon.svg" />  -->
        <div class="currentlytyping-icon-holder">
        </div>
    }
    @for (int i = 0; i < DisplayData.Count; i++)
    {
        <span class="is-typing-name" style="color: @DisplayData[i].rolecolor;">@DisplayData[i].name</span>
        @if (i != DisplayData.Count-1 && DisplayData.Count > 1)
        {
            <span class="is-typing-name">,&nbsp;</span>
        }

    }
    @if (DisplayData.Count == 1)
    {
        <span class="is-typing-name">&nbsp;is typing...</span>
    }
    @if (DisplayData.Count > 1)
    {
        <span class="is-typing-name">&nbsp;are typing...</span>
    }

    @{
        // Amount we are *not* showing
        int remaining = TotalCount - DisplayData.Count;

        @if (remaining > 0)
        {
            <div class="remainder-text">
                + @remaining typing
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public Channel Channel { get; set; }

    [Parameter]
    public ChatWindowComponent ParentComponent { get; set; }

    /// <summary>
    /// User names with their role color to be displayed
    /// </summary>
    public List<(string rolecolor, string name)> DisplayData { get; set; }

    /// <summary>
    /// The total number of currently typing users
    /// </summary>
    public int TotalCount { get; set; }

    // User Id -> Last Update time
    private ConcurrentDictionary<long, DateTime> _typingUpdates = new();
    
    // The timer that controls state updates
    private Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DisplayData = new();
        Channel.TypingUpdated += OnCurrentlyTypingUpdate;
        _timer = new Timer(OnUpdateTimer, null, TimeSpan.Zero, TimeSpan.FromSeconds(3));
    }

    private List<long> _remove = new();

    // This clears the watching state if time passes with no update
    private async void OnUpdateTimer(object state)
    {
        if (_typingUpdates.Any())
        {
            _remove.Clear();
            foreach (var pair in _typingUpdates)
            {
                if (pair.Value.AddSeconds(3) < DateTime.UtcNow)
                {
                    _remove.Add(pair.Key);
                }
            }

            if (_remove.Any())
            {
                foreach (var id in _remove)
                {
                    _typingUpdates.Remove(id, out _);
                }

                await RefreshDisplay();
            }
        }
        else
        {
            if (DisplayData.Any())
            {
                TotalCount = 0;
                DisplayData.Clear();
                StateHasChanged();
            }
        }
    }

    public void Clear()
    {
        TotalCount = 0;
        DisplayData.Clear();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        Channel.TypingUpdated -= OnCurrentlyTypingUpdate;
        _timer?.Dispose();
    }

    private async Task RefreshDisplay()
    {
        DisplayData.Clear();

        var userIds = _typingUpdates.Keys.Where(x => x != Client.Me.Id).ToList();
        
        // Take first four where the userid does not equal our userid
        // if you want to test currently typing by yourself then remove the Where(..) below and the line for TotalCount
        
        foreach (var userId in userIds.Take(4))
        {
            if (Channel.PlanetId is not null)
            {
                var member = await Channel.Planet.FetchMemberByUserAsync(userId);
                DisplayData.Add((member.GetRoleColor(), member.Name));
            }
            else
            {
                var user = await UserService.FetchUserAsync(userId);
                DisplayData.Add(("#ffffff", user.Name));
            }
        }
        
        TotalCount = userIds.Count(x => x != Client.Me.Id);
        
        StateHasChanged();
    }

    /// <summary>
    /// Updates when SignalR sends a channel watching update
    /// This is virtual to allow specific channels to change how it works
    /// </summary>
    private async Task OnCurrentlyTypingUpdate(ChannelTypingUpdate update)
    {
        if (update.ChannelId != Channel.Id)
            return;

        _typingUpdates[update.UserId] = DateTime.UtcNow;

        await RefreshDisplay();
    }
}
