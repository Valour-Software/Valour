@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@inject ValourClient Client

@using System.Net.Http.Headers
@using Valour.Shared.Cdn
@using Valour.TenorTwo.Models
@using Media = Valour.TenorTwo.Models.Media

<div class='channel-footer @(CanUserPost ? string.Empty : "no-perms")' style="@(_loading ? "pointer-events: none; opacity: 0.8" : string.Empty)">
    <div class="preview-message">
        @{
            if (PreviewMessage is not null  && !PreviewMessage.IsEmpty())
            {
                var messageParams = new MessageComponent.Params()
                {
                    Message = PreviewMessage,
                    Ghost = true,
                    LastMessage = ChatComponent.GetLastMessage(),
                    ChatComponent = ChatComponent
                };

                <MessageComponent @key="@($"{ChatComponent.WindowCtx.Id}-preview-message")" @ref="@PreviewMessageComponent" ParamData="@messageParams"></MessageComponent>
            }
        }
    </div>

    @if (!_loading)
    {
        <ChannelCurrentlyTypingComponent ParentComponent="ChatComponent" Channel="ChatComponent.Channel"></ChannelCurrentlyTypingComponent>

        <div class="upload-menu" style="@_uploadMenuStyle">
            <div class="content tenor" @onmousedown:stopPropagation="true">
                @* Somewhat creative way to call main upload element *@
                <button class="button" @onmousedown="@OnClickUploadAsync">
                    Upload a File
                </button>
                <button class="button tenor" @onmousedown="@ShowTenorMenu">
                    Gifs via Tenor
                </button>
                <button class="button" @onmousedown="@OnClickSendCurrency">
                    Send Currency
                </button>
            </div>
            <div class="carrot"></div>
        </div>
        
        <div style="position: relative">
            <TenorMenuComponent @key="@("tenor-menu-" + ChatComponent.WindowCtx.Id)" @ref="TenorMenu" ChannelWindow="ChatComponent"></TenorMenuComponent>
        </div>
        <MentionSelectComponent @ref="MentionSelector" ChannelComponent="@ChatComponent"></MentionSelectComponent>
        <EmojiMart @ref="@_emojis" EmojiSet="twitter" OnClickOutside="@CloseEmojis" OnEmojiClick="@OnEmojiSelectedAsync" CssClass="emoji-mart-wrapper-custom"></EmojiMart>

    }
    
    <div class="textbox-holder" @onclick="@OnClickTextbox">
        <div class="textbox" @ref="_dropZoneElement">
            <InputFile id="upload-core" @ref="_inputFileRef" style="width: 0; height: 0; display: none;" OnChange="LoadFiles"></InputFile>
            
            <div class="textbox-wrapper">
                <div @ref="InnerInputRef" tabindex="1" role="textbox" contenteditable='@(CanUserPost ? "true" : "false")' class="textbox-inner" id="text-input-@ChatComponent.WindowCtx.Id" data-window="@ChatComponent.WindowCtx.Id" rows="1" @onclick:stopPropagation="true" @onclick:preventDefault="true" onclick="document.getElementById('text-input-@ChatComponent.WindowCtx.Id').focus()" autofocus>
                </div>
                @if (!CanUserPost)
                {
                    <p class="input-placeholder">You lack permission to send messages in this channel</p>
                }
                else if (PreviewMessage is null || PreviewMessage.IsEmpty())
                {
                    <p class="input-placeholder">@PlaceholderText</p>
                }
            </div>
        </div>
        
        <button tabindex="0" class="upload-btn" @onmousedown="@ShowUploadMenu" onmouseup="this.focus()" @onblur="@HideUploadMenu">
            <img class="upload" src="_content/Valour.Client/media/Plus-Icon.svg" alt="Upload File"/>
        </button>
        
        <button id="emoji-button" class="emoji-button" @onclick="@ToggleEmojis">
            <img alt="Smiling face emoji" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@14.1.2/assets/72x72/1f604.png" />
        </button>
        
        @if (DeviceInfo.IsMobile && CanUserPost){
            <div class="send-wrapper" @onclick="@OnSubmitClick" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                <img class='send-button' src="_content/Valour.Client/media/send-icon.svg" alt="Send Message" />
            </div>
        }
    </div>
</div>



@code {
    
    private bool _loading = true;

    [Parameter]
    public ChatWindowComponent ChatComponent { get; set; }

    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }
    
    /* End Planet Stuff */

    /// <summary>
    /// Placeholder text shown in the input box when empty
    /// </summary>
    private string PlaceholderText =>_loading ? "Loading channel..." : $"Discuss in {ChatComponent.Channel.Name}";

    /// <summary>
    /// The tenor menu component
    /// </summary>
    private TenorMenuComponent TenorMenu { get; set; }

    /// <summary>
    /// A reference to the inner input component
    /// </summary>
    private ElementReference InnerInputRef { get; set; }

    /// <summary>
    /// The component that displays the mention selection
    /// </summary>
    private MentionSelectComponent MentionSelector { get; set; }

    /// <summary>
    /// True if this input is currently editing a message
    /// </summary>
    public bool IsEditing { get; set; }

    /// <summary>
    /// The message component for the preview message
    /// </summary>
    public MessageComponent PreviewMessageComponent { get; private set; }
    
    /// <summary>
    /// The message (if any) that is currently being edited
    /// </summary>
    public MessageComponent EditingMessageComponent { get; private set; }
    private string EditingOriginalText { get; set; }

    /// <summary>
    /// The preview message
    /// </summary>
    protected Message PreviewMessage { get; set; }

    /// <summary>
    /// Dotnet object reference for use in Javascript
    /// </summary>
    private DotNetObjectReference<InputComponent> _thisRef;
    /// <summary>
    /// Module for calling Javascript functions
    /// </summary>
    private IJSInProcessObjectReference _jsModule;

    /// <summary>
    /// Js context for the input
    /// </summary>
    private IJSInProcessObjectReference _jsCtx;

    /// <summary>
    /// If the current user is able to post messages using this input
    /// </summary>
    protected bool CanUserPost { get; set; } = true; // Start as true

    /// <summary>
    /// Allows this component to render when true
    /// </summary>
    public bool CanRenderFlag { get; set; }

    private DateTime _lastTypingUpdateSent = DateTime.MinValue;

    private string _uploadMenuStyle = "display: none;";

    private EmojiMart _emojis;

    private async Task OnClickTextbox()
    {
        await ChatComponent.ScrollToBottomAnimated();
    }
    
    private void ToggleEmojis()
    {
        _emojis.ToggleVisible();
    }
    
    private Task CloseEmojis(OutsidePickerClickEvent e)
    {
        if (e.Target == "emoji-button")
            return Task.CompletedTask;
        
        _emojis.ToggleVisible();

        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
        => CanRenderFlag;

    public void Refresh()
    {
        CanRenderFlag = true;
        StateHasChanged();
    }

    private void OnClickSendCurrency()
    {
        var data = new EcoPayModal.ModalParams()
        {
            Input = this
        };
        
        ModalRoot.OpenModal<EcoPayModal>(data);
    }

    public async Task ShowTenorMenu()
    {
        await TenorMenu.Show();
    }

    private Task ShowUploadMenu()
    {
        if (_uploadMenuStyle != "")
        {
            _uploadMenuStyle = "";
            Refresh();
        }

        return Task.CompletedTask;
    }

    private void HideUploadMenu()
    {
        if (_uploadMenuStyle != "display: none;")
        {
            _uploadMenuStyle = "display: none;";
            Refresh();   
        }
    }

    private async Task OnClickUploadAsync()
    {
        await _jsCtx.InvokeVoidAsync("openUploadFile", _inputFileRef.Element);
    }

    private static Dictionary<long, string> _retainedInputCache = new();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        _retainedInputCache.Remove(ChatComponent.Channel.Id, out var _);
        _thisRef.Dispose();

        await _jsCtx.InvokeVoidAsync("cleanup");
        
        await _jsModule.DisposeAsync();
        await _jsCtx.DisposeAsync();
    }

    public async Task NotifyChannelLoadedAsync()
    {
        var planet = ChatComponent.Channel.Planet;
        if (planet is not null)
        {
            CanUserPost = await ChatComponent.Channel.HasPermissionAsync(planet.MyMember, ChatChannelPermissions.PostMessages);
        }
        else
        {
            CanUserPost = await ChatComponent.Channel.HasPermissionAsync(Client.Me.Id, ChatChannelPermissions.PostMessages);
        }

        PreviewMessage = BuildNewMessage();

        _loading = false;
        
        Refresh();
    }

    public Message BuildNewMessage()
    {
        _retainedInputCache.TryGetValue(ChatComponent.Channel.Id, out var prevContent);
        
        return new Message()
        {
            AuthorUserId = Client.Me.Id,
            Content = prevContent,
            ChannelId = ChatComponent.Channel.Id,
            AuthorMemberId = ChatComponent.Channel.Planet?.MyMember.Id,
            TimeSent = DateTime.UtcNow,
            ReplyToId = null,
            PlanetId = ChatComponent.Channel.PlanetId,
            Fingerprint = Guid.NewGuid().ToString(),
        };
    }

    private async Task OnEmojiSelectedAsync(EmojiClickEvent e)
    {
        await InjectEmojiAsync(e.Id, e.Native, e.Unified, e.Shortcodes);
    }

    public ValueTask SetInputContent(string content)
    {
        return _jsCtx.InvokeVoidAsync("setInputContent", content ?? string.Empty);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thisRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Windows/ChannelWindows/InputComponent.razor.js?version=$(SHORTHASH)");
            _jsCtx = await _jsModule.InvokeAsync<IJSInProcessObjectReference>("init", _thisRef, InnerInputRef);
            await JsRuntime.InvokeAsync<IJSObjectReference>("initializeFileDropZone", _dropZoneElement, _inputFileRef.Element);

            await OnAfterJsSetupAsync();
        }

        CanRenderFlag = false;
    }

    public virtual async Task OnAfterJsSetupAsync()
    {
        if (PreviewMessage?.Content is not null)
        {
            await SetInputContent(PreviewMessage.Content);
            RefreshPreviewMessage();
        }
        else {
            await SetInputContent("");
            RefreshPreviewMessage();
        }
    }

    #region File Drop System

    // Drop zone stuff
    private InputFile _inputFileRef;
    private ElementReference _dropZoneElement;

    public async Task OnBeginEdit(MessageComponent component, Message message)
    {
        EditingMessageComponent = component;
        PreviewMessage = message;
        EditingOriginalText = PreviewMessage.Content;
        PreviewMessageComponent.SetMessage(PreviewMessage);

        await OnChatboxUpdate(message.Content, message.Content.Split(' ').LastOrDefault());

        await SetInputContent(message.Content);

        Refresh();

        await SelectEnd();
    }

    public async Task OnStopEdit(bool cancelled = false)
    {
        if (cancelled)
        {
            // Return to original
            //EditingMessageComponent.MessageData.Clear();
            EditingMessageComponent.ParamData.Message.Content = EditingOriginalText;
        }

        // Clear preview
        EditingMessageComponent = null;
        PreviewMessage = BuildNewMessage();
        PreviewMessageComponent.SetMessage(PreviewMessage);

        // Clear input
        await OnChatboxUpdate(null, "");
        await SetInputContent(string.Empty);
        
        PreviewMessageComponent.ReRender();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //var file = await e.File.RequestImageFileAsync("jpeg", 256, 256);

        var file = e.File;
        var maxSize = 10240000;
        
        var attachmentType = MessageAttachmentType.File;

        // Determine if audio or video or image

        var mime = file.ContentType;
        var uploadPath = "file";
        
        // We only actually need to check the first letter,
        // since only 'image/' starts with i
        if (mime[0] == 'i')
        {
            // Ensure that the mime type is supported by ImageSharp processing
            if (CdnUtils.ImageSharpSupported.Contains(mime))
            {
                attachmentType = MessageAttachmentType.Image;
                uploadPath = "image";
            }
        }
        // Same thing here - only 'video/' starts with v
        else if (mime[0] == 'v')
        {
            attachmentType = MessageAttachmentType.Video;
        }
        // Unfortunately 'audio/' and 'application/' both start with 'a'
        else if (mime[0] == 'a' && mime[1] == 'u')
        {
            attachmentType = MessageAttachmentType.Audio;
        }

        if (Client.Me.SubscriptionType is not null)
        {
            maxSize = 20480000;
        }
        
        Console.WriteLine($"Selected file {file.Name} with size {file.Size}");
        
        if (file.Size > maxSize)
        {
            
            // Special case for images: ability to compress!
            if (attachmentType == MessageAttachmentType.Image)
            {
                var data = new CompressComponent.ModalParams()
                {
                    File = file,
                    Input = this,
                };
                
                ModalRoot.OpenModal<CompressComponent>(data);

                return;
            }
            else
            {
                var data = 
                new InfoModalComponent.ModalParams(
                    $"File too large!",
                    maxSize == 10240000 ? $"The max upload size is 10MB. To raise this limit, consider subscribing to Plus!" : $"Your max upload size is 20MB.",
                    "Okay",
                    null
                );
                
                ModalRoot.OpenModal<InfoModalComponent>(data);
                return;
            }
        }
        
        await ShowUploadMenu(file.OpenReadStream(maxSize), attachmentType, file.ContentType, file.Name, uploadPath);

        Refresh();
    }

    public async Task ShowUploadMenu(Stream data, MessageAttachmentType type, string mime, string name, string path)
    {
        // Convert stream to byte array
        var bytes = new byte[data.Length];
        _ = await data.ReadAsync(bytes, 0, bytes.Length);
        
        var content = new MultipartFormDataContent();
        
        var byteContent = new ByteArrayContent(bytes);
        if (!string.IsNullOrWhiteSpace(mime))
        {
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(mime);
        }

        content.Add(byteContent, name, name);

        MessageAttachment newAttachment = new(type)
        {
            MimeType = mime,
            FileName = name,
        };

        var plusRoute = Client.Me.SubscriptionType == null ? "" : "/plus";

        var modalData = new FileUploadComponent.ModalParams()
        {
            Bytes = bytes,
            Attachment = newAttachment,
            OnConfirm = async () => 
            {
                var result = await Client.PrimaryNode.PostAsyncWithResponse<string>($"upload/{path}{plusRoute}", content);

                if (result.Success)
                {
                    newAttachment.Location = result.Data;
                    AddMessageAttachment(newAttachment);
                }
                else
                {
                    Console.WriteLine(result.Message);
                }
            }
        };
        
        ModalRoot.OpenModal<FileUploadComponent>(modalData);
    }

    public void RemoveAttachment(int id)
    {
        var attachments = PreviewMessage.Attachments;
        if (attachments is null)
            return;

        if (id == -1)
                id = attachments.Count - 1;
        
        if (id > attachments.Count - 1)
            return;

        attachments.RemoveAt(id);

        PreviewMessage.SetAttachments(attachments);

        RefreshPreviewMessage();
        Refresh();
    }

    #endregion

    public void AddReceipt(string transactionId)
    {
        var attachment = new MessageAttachment(MessageAttachmentType.ValourReceipt)
        {
            Location = $"https://app.valour.gg/api/eco/transactions/{transactionId}",
        };

        AddMessageAttachment(attachment);
    }
    
    public void AddTenor(Media media)
    {
        var format = media.GetFormat(MediaFormatType.gif);

        AddMessageAttachment(new MessageAttachment(MessageAttachmentType.Image)
        {
            Location = format.Url,
            MimeType = "image/gif",
            Width = format.Dims[0],
            Height = format.Dims[1],
            FileName = media.Title + ".gif"
        });
    }

    public async Task UpdateMentionMenu(string text)
    {
        //Console.WriteLine(text);

        if (text.StartsWith('@') || text.StartsWith('#'))
        {
            if (!MentionSelector.Visible)
            {
                await MentionSelector.SetVisible(true, text[0]);
            }

            await MentionSelector.SetText(text);
        }
        else
        {
            if (MentionSelector.Visible){
                await MentionSelector.SetVisible(false);
            }
        }

        Refresh();
    }

    public void AddMessageAttachment(MessageAttachment attachment)
    {
        var attachments = PreviewMessage.Attachments;
        attachments ??= new List<MessageAttachment>();

        attachments.Add(attachment);
        PreviewMessage.SetAttachments(attachments);

        RefreshPreviewMessage();
        Refresh();
    }

    public void RefreshPreviewMessage()
    {
        //PreviewMessage.Content = string.Empty;
        if (PreviewMessage is not null)
            PreviewMessage.TimeSent = DateTime.UtcNow;

        if (PreviewMessageComponent is not null)
        {
            PreviewMessageComponent.SetLast(ChatComponent.GetLastMessage());
            PreviewMessageComponent.SetMessage(PreviewMessage);
        }
    }

    public async Task SetReplyMessage(Message message)
    {
        PreviewMessageComponent.ParamData.Message.ReplyTo = message;
        PreviewMessage.ReplyToId = message?.Id;

        RefreshPreviewMessage();
        Refresh();

        await FocusInputAsync();
    }

    public Task RemoveReply()
    {
        PreviewMessage.ReplyToId = null;
        PreviewMessageComponent.ParamData.Message.ReplyTo = null;
        PreviewMessageComponent.ReRender();
        return Task.CompletedTask;
    }

    public async Task PostMessage(Message message)
    {
        // New message
        if (message.Id == 0)
        {
            ChatComponent.AddQueuedMessage(message);
            
            var result = await message.PostAsync();

            if (!result.Success)
            {
                ChatComponent.RemoveQueuedMessage(message.Fingerprint);

                Message errorMsg = new()
                {
                    Content = $"Hey there, friend! Your message didn't post properly.\n Reason: {result.Message}",
                    AuthorUserId = long.MaxValue,
                    ChannelId = ChatComponent.Channel.Id,
                    Id = long.MaxValue
                };

                ChatComponent.RemoveErrorMessage();
                await ChatComponent.AddMessage(errorMsg);
            }
            else
            {
                ChatComponent.RemoveErrorMessage();
            }
            
            PreviewMessageComponent.ParamData.Message.ReplyTo = null;
            PreviewMessage.Clear();
            PreviewMessageComponent.ReRender();
            _retainedInputCache.Remove(ChatComponent.Channel.Id, out _);
        }
        // Editing message
        else
        {
            var result = await message.UpdateAsync();
            if (!result.Success)
            {
                Message errorMsg = new()
                {
                    Content = $"Hey there, friend! Your message didn't edit properly.\n Reason: {result.Message}",
                    AuthorUserId = long.MaxValue,
                    ChannelId = ChatComponent.Channel.Id,
                    Id = 0 
                };

                ChatComponent.RemoveErrorMessage();
                await ChatComponent.AddMessage(errorMsg);
            }
            else
            {
                PreviewMessage = BuildNewMessage();
                PreviewMessageComponent.SetMessage(PreviewMessage);
            }
        }
    }

    /////////////////////
    // JS Interop Zone //
    /////////////////////

    public ValueTask InjectElementAsync(string text, string coverText, string classList, string styleList)
    {
        return _jsCtx.InvokeVoidAsync("injectElement", text, coverText, classList, styleList);
    }
    
    public ValueTask InjectEmojiAsync(string emoji, string native, string unified, string shortcodes)
    {
        return _jsCtx.InvokeVoidAsync("injectEmoji", emoji, native, unified, shortcodes);
    }

    public async Task OnSubmitClick()
    {
        await _jsCtx.InvokeVoidAsync("submitMessage", true);
    }

    private ValueTask SelectEnd()
    {
        return _jsCtx.InvokeVoidAsync("moveCursorToEnd");
    }
    
    private ValueTask FocusInputAsync()
    {
        return _jsCtx.InvokeVoidAsync("focus");
    }

    // JS -> C#
    [JSInvokable]
    public Task OnCaretUpdate(string currentWord)
    {
        return UpdateMentionMenu(currentWord);
    }

    /// <summary>
    /// This runs every time a key is pressed when the chatbox is selected
    /// </summary>
    [JSInvokable]
    public async Task OnChatboxUpdate(string input, string currentWord)
    {
        //Console.WriteLine(input);

        await UpdateMentionMenu(currentWord);

        if (input is not null)
        {
            // Fix for dumb formatting in HTML
            input = input.Replace("\n\n«", "«").Replace("» \n\n", "»");
        }

        _retainedInputCache[ChatComponent.Channel.Id] = input;

        if (PreviewMessage is null)
        {
            PreviewMessage = BuildNewMessage();
        }
        
        PreviewMessage.Content = input;
        RefreshPreviewMessage();

        if (EditingMessageComponent is not null)
        {
            EditingMessageComponent.BuildMessage();
        }

        await ChatComponent.ScrollToBottom();

        if (DateTime.UtcNow > _lastTypingUpdateSent.AddSeconds(5))
        {
            await ChatComponent.Channel.SendIsTyping();
            _lastTypingUpdateSent = DateTime.UtcNow;
        }

        Refresh();
    }

    [JSInvokable]
    public async Task MentionSubmit()
    {
        await MentionSelector.Submit();
        Refresh();
    }

    [JSInvokable]
    public void MoveMentionSelect(int n)
    {
        MentionSelector.MoveSelect(n);
    }

    [JSInvokable]
    public async Task OnUpArrowNonMention()
    {
        if (!string.IsNullOrEmpty(PreviewMessage.Content))
        {
            return;
        }
        
        // Get last message where author is the current user
        var lastMessage = ChatComponent.RenderedMessages
            .LastOrDefault(m => m.ParamData.Message.AuthorUserId == Client.Me.Id);

        if (lastMessage is null)
        {
            return;
        }

        await lastMessage.OpenEditMode();
        await SelectEnd();
    }

    [JSInvokable]
    public async Task OnEscape()
    {
        if (EditingMessageComponent is null)
            return;
        
        await EditingMessageComponent.CloseEditMode(true);
    }

    [JSInvokable]
    public async Task OnChatboxSubmit()
    {
        if (PreviewMessage.Content is not null)
        {
            PreviewMessage.Content =
                PreviewMessage.Content.TrimEnd('\n');

            PreviewMessage.Content =
                PreviewMessage.Content.Trim();
        }

        if (PreviewMessage.IsEmpty())
        {
            return;
        }

        var postMessage = PreviewMessage;

        // New message for preview
        PreviewMessage = BuildNewMessage();
        PreviewMessageComponent.SetMessage(PreviewMessage);

        await OnChatboxUpdate(null, "");

        // Post message to server
        //StateHasChanged();
        await PostMessage(postMessage);
    }
}
