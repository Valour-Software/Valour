@using Valour.Shared.Channels
@implements IDisposable
@inject ValourClient Client
@inject UserService UserService

<div class="watching-container">
    
    <div class="icons">
        @foreach (var user in DisplayData)
        {
            if (user.UserStateCode != UserState.Offline.Value)
            {
                <WatchingIconComponent @key='@user.Id' User="@user"/>
            }
        }

        @{
            // Amount we are *not* showing
            int remaining = TotalCount - DisplayData.Count;

            @if (remaining > 0)
            {
                <div class="remainder-text">
                    + @remaining watching
                </div>
            }
        }
    </div>
</div>

@code {

    [Parameter]
    public Channel Channel { get; set; }

    [Parameter]
    public ChatWindowComponent ParentComponent { get; set; }

    /// <summary>
    /// Icons to be displayed
    /// </summary>
    public List<User> DisplayData { get; set; }

    /// <summary>
    /// The total number of watching users
    /// </summary>
    public int TotalCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DisplayData = new();
        Channel.WatchingUpdated += OnWatchingUpdate;
    }

    private void Clear()
    {
        TotalCount = 0;
        DisplayData.Clear();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        Channel.WatchingUpdated -= OnWatchingUpdate;
    }

    /// <summary>
    /// Updates when SignalR sends a channel watching update
    /// This is virtual to allow specific channels to change how it works
    /// </summary>
    public virtual async Task OnWatchingUpdate(ChannelWatchingUpdate update)
    {
        Console.WriteLine("Update!");
        
        if (update.ChannelId != Channel.Id)
            return;

        DisplayData.Clear();

        // Take first ten
        foreach (var userId in update.UserIds.Take(10))
        {
            var user = await UserService.FetchUserAsync(userId);
            if (user is not null)
            {
                DisplayData.Add(user);
            }
        }

        TotalCount = update.UserIds.Count();

        StateHasChanged();
    }
}
