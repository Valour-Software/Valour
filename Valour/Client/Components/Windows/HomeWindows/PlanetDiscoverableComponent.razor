@using System.Text
@inject IJSRuntime JsRuntime
@inject ContextMenuService ContextMenuService
@inject PlanetService PlanetService

<div id="flipper-discover-@PlanetInfo.PlanetId-@WindowCtx.Id" class="flipper" ontouchstart="determineFlip('flipper-discover-@PlanetInfo.PlanetId-@WindowCtx.Id', 240)" onmouseover="determineFlip('flipper-discover-@PlanetInfo.PlanetId-@WindowCtx.Id', 240)" @onclick="OnClick"> 
    <div class="outer-circle"
         @oncontextpress="@OnContextPress">
        @if (!string.IsNullOrWhiteSpace(_iconText))
        {
            <img alt="planet icon" src="@_iconUrl" class="icon" />

            <div class="icon-text-holder">
                <h1 class="icon-text" style="@_iconTextStyle">@_iconText</h1>
            </div>
        }
        else
        {
            @if (PlanetInfo.HasAnimatedIcon)
            {
                <style>
                    .outer-circle:hover .discovery-icon-@PlanetInfo.PlanetId {
                        background-image: url(@_animatedIconUrl), url(@_iconUrl), url(@_fallbackIconUrl) !important;
                    }
                </style>
            }
            <div class="icon discovery-icon-@PlanetInfo.PlanetId" style="background-image: url(@_iconUrl), url(@_fallbackIconUrl)"></div>
        }
        <div class="rect-slide">
            <div class="text-wrapper">
                <div class="text-flex">
                    <b class="planet-name">@PlanetInfo.Name</b>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PlanetListInfo PlanetInfo { get; set; }

    [Parameter]
    public WindowContent WindowCtx { get; set; }

    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    private string _iconUrl = DefaultImage;
    private string _animatedIconUrl = "";
    private string _fallbackIconUrl = "_content/Valour.Client/media/logo-circle-icon.svg";
    private const string DefaultImage = "_content/Valour.Client/media/logo-circle-icon.svg";
    
    private string _iconText;
    private string _iconTextStyle = "";
    private int _iconImageColor;

    protected override void OnInitialized(){
        if (PlanetInfo.HasCustomIcon)
        {
            _iconUrl = ISharedPlanet.GetIconUrl(PlanetInfo, IconFormat.Webp256);

            if (PlanetInfo.HasAnimatedIcon)
            {
                _animatedIconUrl =  ISharedPlanet.GetIconUrl(PlanetInfo, IconFormat.WebpAnimated256);
            }
        }
        else
        {
            GenerateAutoGraphic();
        }
    }
    
    private void OnContextPress(ContextPressEventArgs e)
    {
        
    }
    
    private void GenerateAutoGraphic()
    {
        _iconUrl = "_content/Valour.Client/media/logo-circle.svg";
        _iconText = ISharedPlanet.GetCommunityShortCode(PlanetInfo);
        _iconImageColor = PlanetInfo.PlanetId.GetHashCode();

        _iconTextStyle = $"font-size: {100f / (_iconText.Length + 1)}px;";
    }

    private async Task OnClick()
    {
        // Attempt to join planet
        _ = await ToastContainer.Instance.WaitToastWithTaskResult(new ProgressToastData<TaskResult<PlanetMember>>(
            $"Joining {PlanetInfo.Name}",
            "...",
            PlanetService.JoinPlanetAsync(PlanetInfo.PlanetId),
            "Joined successfully!"
        ));
    }
}