@using System.Numerics
@using System.Text
@inject IJSRuntime JsRuntime
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject ChannelStateService ChannelStateService
@inject PlanetService PlanetService
@inject UnreadService UnreadService

<div id="flipper-planet-@Planet.Id-@WindowCtx.Id" class="flipper" ontouchstart="determineFlip('flipper-planet-@Planet.Id-@WindowCtx.Id', 240)" onmouseover="determineFlip('flipper-planet-@Planet.Id-@WindowCtx.Id', 240)" @onclick="OnClick"> 
    <div class="outer-circle"
         @oncontextpress="@OnContextPress">
        <div class="text-hide-circle"></div>
        @if (!string.IsNullOrWhiteSpace(_iconText))
        {
            <img alt="planet icon" src="@Planet.GetIconUrl(IconFormat.Webp64)" class="icon" /> 

            <div class="icon-text-holder">
                <h1 class="icon-text" style="@_iconTextStyle">@_iconText</h1>
            </div>
        }
        else
        {
            @if (Planet.HasAnimatedIcon)
            {
                <style>
                    .outer-circle:hover .planet-icon-@Planet.Id {
                        background-image: url(@_animatedIconUrl), url(@_iconUrl), url(@_fallbackIconUrl) !important;
                    }
                </style>
            }
            <div class="icon planet-icon-@Planet.Id" style="background-image: url(@_iconUrl), url(@_fallbackIconUrl)"></div>
        }
        
        
        @if (_isUnread || _notificationCount > 0)
        {
            <div class="noti @(_notificationCount > 0 ? "purple" : "")">
                @(_notificationCount > 9 ? "+" : _notificationCount)
            </div>
        }
        @if (Planet.Nsfw)
        {
            <div class="noti nsfw">NSFW</div>
        }
        <div class="rect-slide">
            <div class="text-wrapper">
                <div class="text-flex">
                    <b class="planet-name">@Planet.Name</b>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    [Parameter]
    public WindowContent WindowCtx { get; set; }
    
    [Parameter]
    public HomeWindowComponent HomeWindowComponent { get; set; }

    private const string DefaultImage = "_content/Valour.Client/media/logo-circle-icon.svg";
    
    private string _iconText;
    private string _iconTextStyle = "";
    private int _iconImageColor;

    private string _iconUrl = DefaultImage;
    private string _animatedIconUrl = "";
    private string _fallbackIconUrl = "_content/Valour.Client/media/logo-circle-icon.svg";
    private bool _isUnread = false;
    private int _notificationCount = 0;

    protected override void OnInitialized(){
        if (Planet.HasCustomIcon)
        {
            _iconUrl = Planet.GetIconUrl(IconFormat.Webp256);
            
            if (Planet.HasAnimatedIcon)
            {
                _animatedIconUrl = Planet.GetIconUrl(IconFormat.WebpAnimated256);
            }
        }
        else
        {
            GenerateAutoGraphic();
        }

        HomeWindowComponent.OnRerenderPlanetCards += Refresh;
        NotificationService.NotificationReceived += OnNotification;
    }
    
    private void OnContextPress(ContextPressEventArgs e)
    {
        ContextMenuService.Root.OpenMenu<PlanetContextMenu>(e,
            new PlanetContextMenu.PlanetContextParams()
            {
                Planet = Planet
            }
        );
    }

    private void OnNotification(Notification notification)
    {
        if (notification.PlanetId != Planet.Id)
            return;
        
        // Unread
        _notificationCount = NotificationService.GetPlanetNotifications(Planet.Id);
        StateHasChanged();
    }
    
    public string GetCommunityShortCode(string communityName)
    {
        if (communityName.Length < 5)
        {
            return communityName.ToUpper();
        }

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < communityName.Length; i++)
        {
            if (i == 0)
            {
                sb.Append(char.ToUpper(communityName[0]));
                continue;
            }
            
            bool spaceFound = false;
            char currentChar = communityName[i];

            if (i > 0 && (communityName[i - 1] == ' ' || 
                           (char.IsUpper(currentChar) && char.IsLower(communityName[i - 1]))))
            {
                spaceFound = true;
            }

            if (spaceFound)
            {
                sb.Append(char.ToUpper(currentChar));
            }

            if (sb.Length >= 4)
            {
                break;
            }
        }

        return sb.ToString();
    }
    
    private void GenerateAutoGraphic()
    {
        _iconUrl = "_content/Valour.Client/media/logo-circle.svg";
        _iconText = GetCommunityShortCode(Planet.Name);
        _iconImageColor = Planet.Id.GetHashCode();

        _iconTextStyle = $"font-size: {100f / (_iconText.Length + 1)}px;";
    }

    private Task Refresh()
    {
        _isUnread = UnreadService.IsPlanetUnread(Planet.Id);
        _notificationCount = NotificationService.GetPlanetNotifications(Planet.Id);
        StateHasChanged();

        return Task.CompletedTask;
    }
    
    private async Task OnClick()
    {
        var newWindowContent = await ChatWindowComponent.GetContentForPlanetPrimaryChannel(Planet);
        
        if (newWindowContent is null)
        {
            // Show failure toast
            await ToastContainer.Instance.WaitToastWithTaskResult(new ProgressToastData<TaskResult>(
                "Failure loading planet",
                "",
                Task.Run(() =>
                {
                    return new TaskResult(false, "Error accessing this planet.");
                })));
            return;
        }
        
        await WindowCtx.Tab.SetContent(newWindowContent);

        StateHasChanged();
    }
}