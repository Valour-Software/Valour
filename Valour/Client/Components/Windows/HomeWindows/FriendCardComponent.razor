@implements IDisposable
@inject IJSRuntime JsRuntime
@inject ContextMenuService ContextMenuService
@inject ValourClient Client
@inject ChannelService ChannelService
@inject ChannelStateService ChannelStateService
@inject UnreadService UnreadService
@inject NotificationService NotificationService

<div id="flipper-friend-@Friend.Id-@WindowCtx.Id" class="flipper" ontouchstart="determineFlip('flipper-friend-@Friend.Id-@WindowCtx.Id', 240)" onmouseover="determineFlip('flipper-friend-@Friend.Id-@WindowCtx.Id', 240)" @onclick="OnClick"> 
    <div class="outer-circle" @oncontextpress="@OnContextMenu">
        <div class="text-hide-circle"></div>
        
        @if (Friend.HasAnimatedAvatar)
        {
            <style>
                .outer-circle:hover .friend-icon-@Friend.Id {
                    background-image: url(@_animatedAvatarUrl), url(@_avatarUrl), url(@_fallbackAvatarUrl) !important;
                }
            </style>
        }
        
        <div class="icon friend-icon-@Friend.Id" style="background-image: url(@_avatarUrl), url(@_fallbackAvatarUrl)"></div>
        @if (_isUnread || _notificationCount > 0)
        {
            <div class="noti @(_notificationCount > 0 ? "purple" : "")">
                @(_notificationCount > 9 ? "+" : _notificationCount)
            </div>
        }
        <div class="rect-slide">
            <div class="text-wrapper">
                <div class="text-flex">
                    <b class="friend-name">@Friend.Name</b>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public User Friend { get; set; }

    [Parameter]
    public WindowContent WindowCtx { get; set; }

    [Parameter]
    public HomeWindowComponent HomeWindowComponent { get; set; }

    private string _avatarUrl;
    private string _animatedAvatarUrl;
    private string _fallbackAvatarUrl;
    private bool _isUnread = false;
    private int _notificationCount = 0;

    protected override void OnInitialized(){
        _avatarUrl = Friend.GetAvatar(AvatarFormat.Webp256);
        _animatedAvatarUrl = Friend.GetAvatar(AvatarFormat.WebpAnimated256);
        _fallbackAvatarUrl = Friend.GetFailedAvatar();
        
        HomeWindowComponent.OnRerenderFriendCards += Refresh;
    }

    private void OnContextMenu(ContextPressEventArgs e)
    {
        ContextMenuService.Root.OpenMenu<UserContextMenu>(e, 
            new UserContextMenu.UserContextParams()
            {
                User = Friend
            }
        );
    }

    private Task Refresh()
    {
        // We use the client list because we do *not* want to send off an API request for every single
        // person you do not have a conversation with - the list is loaded at startup
        var channel = ChannelService.DirectChatChannels.FirstOrDefault(x => x.Members.Any(m => m.UserId == Friend.Id));
        
        if (channel is null)
        {
            _isUnread = false;
        }
        else
        {
            _isUnread = UnreadService.IsChannelUnread(channel.PlanetId, channel.Id);
            _notificationCount = NotificationService.GetChannelNotifications(channel.Id);
        }
        
        StateHasChanged();

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        HomeWindowComponent.OnRerenderFriendCards -= Refresh;
    }
    

    private async Task OnClick()
    {
        // Get dm channel (and create it if it does not exist)
        // this can probably be optimized to only create the channel if the first message
        // is being sent, but this is fine for now
        var channel = await ChannelService.FetchDmChannelAsync(Friend.Id, create: true);

        var newWindowContent = await ChatWindowComponent.GetDefaultContent(channel);
        await WindowService.OpenWindowAtFocused(newWindowContent);

        Console.WriteLine($"Switching window {WindowCtx.Id} to direct chat channel {channel.Id}");

        // await WindowManager.ReplaceWindow(Window, newWindow);
        // await WindowManager.SetSelectedWindow(newWindow);
        // await WindowManager.SetFocusedPlanet(null);

        StateHasChanged();
    }
}