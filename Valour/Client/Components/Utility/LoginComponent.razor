@inject HttpClient Http
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject ValourClient Client
@inject AuthService AuthService

@using Microsoft.AspNetCore.WebUtilities

<div class="page">
    <div class="login-background">
    </div>
    <div class="mobile-image">
    </div>
    <div class="login-left col-md-5">
        <form>
            <div class="victor-wrapper">
                <img alt="victor" class="victor" src="_content/Valour.Client/media/victor.svg"/>
            </div>
            <div class="title">
                <h3>Log in to Valour</h3>
                @if (@FromVerified)
                {
                    <h4 style="color:var(--v-cyan)">You have registered!</h4>
                }
                else
                {
                    <h4>Welcome back!</h4>
                }
            </div>
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label>Email</label>
                <input type="email" autocomplete="email" class="form-control" @bind-value="@_email" @onkeyup="@OnEmailKey"/>
                <span id="email-span" class="text-danger">@_emailSpan</span>
            </div>
            <div class="form-group mt-2">
                <label>Password</label>
                <input @ref="@PasswordInput" id="password-input" type="password" autocomplete="current-password" class="form-control" @bind-value="@_password" @onkeyup="@OnPasswordKey"/>
                <span id="password-span" class="text-danger">@_passwordSpan</span>
            </div>
            <span id="result-span" class="text-info">@_resultSpan</span>
            <div class="v-btn-wrapper mt-4">
                <button type="button" class="v-btn blue half" @onclick="OnClickLogin">Log in</button>
                <div role="button" aria-describedby="register button" class="v-btn-grad-wrapper half" @onclick="OnClickRegister">
                    <img alt="hidden victor" class="hidden-victor" src="_content/Valour.Client/media/victor.svg"/>
                    <div class="v-btn half gradient">
                        <p>Register</p>
                    </div>
                </div>
            </div>
            <a class="mt-4 forgot-password" href="/ForgotPassword">Forgot my password</a>
        </form>
    </div>

    @if (_showMultiFactorAuth)
    {
        <div class="multi-factor-auth">
            <h3>Multi-Factor Authentication</h3>
            <input class="form-control" type="text" @bind-value="@_multiFactorCode" />
            @if (!string.IsNullOrWhiteSpace(_multiFactorSpan))
            {
                <span class="text-danger mt-4">@_multiFactorSpan</span>
            }
            <button class="v-btn blue" @onclick="@OnClickMultiFactorAuth">Submit</button>
        </div>
    }
</div>

@code {
    
    private ElementReference PasswordInput { get; set; }
    
    [Parameter]
    public bool FromVerified { get; set; }

    private string _email;
    private string _password;

    private string _emailSpan;
    private string _passwordSpan;
    private string _resultSpan;

    private bool _showMultiFactorAuth = false;
    private string _multiFactorCode;

    private string _multiFactorSpan;

    private async Task OnEmailKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PasswordInput.FocusAsync();
        }
    }
    
    private async Task OnPasswordKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnClickLogin();
        }
    }

    private async Task OnClickMultiFactorAuth()
    {
        var multiResult = await AuthService.FetchToken(_email, _password, _multiFactorCode);
        if (multiResult.Success)
        {
            var result = await Client.InitializeUser(multiResult.Token.Id);
            if (!result.Success)
            {
                _multiFactorSpan = result.Message;
                StateHasChanged();
                return;
            }
            
            await OnLoginSuccess();
        }
        else
        {
            _multiFactorSpan = "Invalid code.";
            StateHasChanged();
        }
    }

    private async Task OnClickLogin()
    {
        if (_email == null || string.IsNullOrWhiteSpace(_email))
        {
            _emailSpan = "Please enter your email.";
            return;
        }

        // Fix trailing whitespace
        _email = _email.Trim();

        if (_password == null || string.IsNullOrWhiteSpace(_password))
        {
            _passwordSpan = "Please enter your password.";
            return;
        }

        // Clear spans
        _passwordSpan = "";
        _emailSpan = "";

        var tokenResult = await AuthService.FetchToken(_email, _password);

        if (tokenResult.RequiresMultiAuth){
            // Show multi-factor auth dialog
            _showMultiFactorAuth = true;   
            StateHasChanged();
            return;
        }

        if (!tokenResult.Success)
        {
            Client.Logger.Log<LoginComponent>($"Failed to request user token. Code: {tokenResult.Code}", "salmon");
            
            if (tokenResult.Code == 429)
            {
                _passwordSpan = "Too many requests. Please try again later.";
            }
            else
            {
                _passwordSpan = "Incorrect email or password. Are you using your username instead?";
            }
            
            StateHasChanged();
            
            return;
        }

        var result = await Client.InitializeUser(tokenResult.Token.Id);

        if (result.Success)
        {   
            await OnLoginSuccess();
        }
        else {
            _passwordSpan = result.Message;
        }
    }

    private async Task OnLoginSuccess()
    {
        _resultSpan = "Logging in...";
        await LocalStorage.SetItemAsStringAsync("token", AuthService.Token);

        if (QueryHelpers.ParseQuery(NavManager.ToAbsoluteUri(NavManager.Uri).Query).TryGetValue("redirect", out var redirect))
        {
            NavManager.NavigateTo(redirect, true);
            return;
        }
            
        if (FromVerified)
        {
            NavManager.NavigateTo("/", true);
            return;
        }
        
        StateHasChanged();

        await PushSubscriptionsComponent.Instance.RequestSubscriptionAsync();
    }

    private void OnClickRegister(MouseEventArgs e)
    {
        NavManager.NavigateTo("/Register", forceLoad: true);
    }
}
