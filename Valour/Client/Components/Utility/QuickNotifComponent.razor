@implements IDisposable
@inject NavigationManager NavManager
@inject NotificationService NotificationService

<div class="quick-notif">
    @for (int i = 0; i < _showing.Count; i++)
    {
        var ii = i;
        
        <TooltipTrigger Position="left">
            <ChildContent>
                <div
                    class="item @(_showing[ii].Animating ? "animate" : "")"
                    @key="@_showing[ii].Notification.Id"
                    @onmouseenter="@(() => OnMouseEnter(_showing[ii]))"
                    @onmousedown="@((e) => OnMouseDown(e, _showing[ii]))"
                >
                    <img alt="Notification: @_showing[ii].Notification.Title" class="icon" src="@_showing[ii].Notification.ImageUrl" @onerror="@(() => OnImageError(ii))" />
                </div>
            </ChildContent>
            <TooltipContent>
                <span>@_showing[ii].Notification.Title</span>
            </TooltipContent>
        </TooltipTrigger>
    }
</div>

@code {
    
    const string FailedImageUrl = "_content/Valour.Client/media/logo/logo-128.webp";
    
    private class QuickNotif
    {
        public Notification Notification { get; set; }
        public bool Animating { get; set; }
        public string ImageUrl { get; set; }
    }
    
    private List<QuickNotif> _showing = new List<QuickNotif>();

    protected override void OnInitialized()
    {
        NotificationService.NotificationReceived += NotificationHandler;
        NotificationService.NotificationsCleared += NotificationsClearedHandler;
    }

    private void OnImageError(int index)
    {
        _showing[index].ImageUrl = FailedImageUrl;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        NotificationService.NotificationReceived -= NotificationHandler;
        NotificationService.NotificationsCleared -= NotificationsClearedHandler;
    }
    
    private Task NotificationsClearedHandler()
    {
        _showing.Clear();
        StateHasChanged();

        return Task.CompletedTask;
    }

    private Task NotificationHandler(Notification notification)
    {
        bool render = false;
        
        if (notification.TimeRead is null)
        {
            _showing.Add(new QuickNotif()
            {
                Notification = notification,
                Animating = true,
                ImageUrl = notification.ImageUrl ?? FailedImageUrl
            });
            render = true;
        }
        else
        {
            var removed = _showing.RemoveAll(x => x.Notification.Id == notification.Id);
            if (removed > 0)
                render = true;
        }
        
        if (render)
            StateHasChanged();

        return Task.CompletedTask;
    }

    private void OnMouseEnter(QuickNotif notif)
    {
        if (notif.Animating)
        {
            notif.Animating = false;
            StateHasChanged();
        }
    }

    private async Task OnMouseDown(MouseEventArgs e, QuickNotif notif)
    {
        if (e.Button == 2)
        {
            await NotificationService.MarkNotificationRead(notif.Notification, true);
        }
        else if (e.Button == 0)
        {
            await NotificationNavigator.NavigateTo(notif.Notification);
        }
    }
}