@typeparam TItem

@{
    Console.WriteLine("SelectedItem is null: " + (_selectedItem is null));
}

<div class="custom-dropdown" @ref="_ref" @onclick="OnClick">
    @if (_selectedItem is null)
    {
        <span class="placeholder">@Placeholder</span>
    }
    else if (ItemTemplate is not null)
    {
        @ItemTemplate(_selectedItem)
    }
    else
    {
        <span>@_selectedItem.ToString()</span>
    }
    <i class="bi bi-chevron-down"></i>
</div>

@code {
    private ElementReference _ref;

    [Parameter] public IEnumerable<TItem> Items { get; set; } = Array.Empty<TItem>();
    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }
    [Parameter] public Func<TItem, string, bool> SearchFunc { get; set; }
    [Parameter] public TItem InitialItem { get; set; }
    [Parameter] public EventCallback<TItem> SelectedItemChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Select";

    private TItem? _selectedItem;

    protected override void OnInitialized()
    {
        _selectedItem = InitialItem;
    }

    private async Task OnClick()
    {
        if (CustomDropdownContent.Instance is null)
            return;

        var data = new CustomDropdownContentData
        {
            Items = Items.Cast<object>().ToList(),
            ItemTemplate = item => builder =>
            {
                if (ItemTemplate is not null)
                {
                    builder.AddContent(0, ItemTemplate((TItem)item));
                }
                else
                {
                    builder.AddContent(0, item.ToString());
                }
            },
            SearchFunc = SearchFunc is null ?
                new Func<object, string, bool>((o, s) => o?.ToString()?.Contains(s, StringComparison.OrdinalIgnoreCase) == true) :
                new Func<object, string, bool>((o, s) => SearchFunc((TItem)o, s)),
            OnSelect = async o =>
            {
                Console.WriteLine("New selection");
                
                _selectedItem = (TItem)o;
                if (SelectedItemChanged.HasDelegate)
                    await SelectedItemChanged.InvokeAsync((TItem)o);

                await InvokeAsync(StateHasChanged);
            },
            SelectedItem = _selectedItem
        };

        await CustomDropdownContent.Instance.ShowAsync(_ref, data);
    }
}
