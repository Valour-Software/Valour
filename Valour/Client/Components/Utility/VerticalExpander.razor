@typeparam TComponent

<div class="expander-wrapper">
    <div class="expander">
        @{
            var rows = (int)Math.Ceiling((double)_renderedItemCount / RowSize);
            @for (int i = 0; i < rows; i++)
            {
                var rowIndex = i;

                <div class="expander-row">
                    @for (int j = 0; j < RowSize; j++)
                    {
                        var index = rowIndex * RowSize + j;
                        if (index < _renderedItemCount && index < _items.Count)
                        {
                            var itemIndex = index;
                            <Fade @ref="_fadeRefs[itemIndex]" OnFadeOut="@(() => RemoveItem(itemIndex))">
                                <DynamicComponent @key="@itemIndex" Type="@typeof(TComponent)" Parameters="@_items[itemIndex]"/>
                            </Fade>
                        }
                    }
                </div>
            }
        }
    </div>

    <div class="expander-buttons">
        @if (_renderedItemCount < TotalItems) {
            <button class="btn v-btn primary" @onclick="@LoadNext">Show More</button>
        }
        @if (_renderedItemCount > RowSize) {
            <button class="btn v-btn secondary" @onclick="@OnClickRemove">Show Less</button>
        }
    </div>
</div>

@code {
    [Parameter]
    public int TotalItems { get; set; }

    [Parameter]
    public int RowSize { get; set; } = 3;

    [Parameter]
    public Func<int, Task<Dictionary<string, object>>> GetItem { get; set; }

    private List<Dictionary<string, object>> _items = new();
    private int _renderedItemCount;
    private Dictionary<int, Fade> _fadeRefs = new();

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }

    public async Task Initialize()
    {
        _items.Clear();
        _fadeRefs.Clear();
        _renderedItemCount = 0;

        await LoadNext();
    }

    private async Task LoadNext()
    {
        int itemsToAdd = Math.Min(RowSize, TotalItems - _renderedItemCount);

        for (int i = 0; i < itemsToAdd; i++)
        {
            _items.Add(await GetItem.Invoke(_renderedItemCount));
            // Initialize the reference in dictionary so it can be bound by @ref
            _fadeRefs[_renderedItemCount] = null;
            _renderedItemCount++;
        }

        StateHasChanged();
    }

    private async Task OnClickRemove()
    {
        if (_renderedItemCount <= RowSize)
            return;

        int itemsToRemove = Math.Min(RowSize, _renderedItemCount - RowSize);
        var startIndex = _renderedItemCount - itemsToRemove;

        var fadeOutTasks = new List<Task>();

        for (int i = startIndex; i < _renderedItemCount; i++)
        {
            if (_fadeRefs.TryGetValue(i, out var fade) && fade != null)
            {
                fadeOutTasks.Add(fade.FadeOut());
            }
        }

        // We can optionally await these if needed
        // await Task.WhenAll(fadeOutTasks);
    }

    private Task RemoveItem(int index)
    {
        if (index < _items.Count)
        {
            _items.RemoveAt(index);
            _renderedItemCount--;

            // Remap indices for the reference dictionary
            var newRefs = new Dictionary<int, Fade>();
            foreach (var kvp in _fadeRefs)
            {
                if (kvp.Key < index)
                    newRefs[kvp.Key] = kvp.Value;
                else if (kvp.Key > index)
                    newRefs[kvp.Key - 1] = kvp.Value;
            }

            _fadeRefs = newRefs;
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task Reset()
    {
        if (_renderedItemCount <= RowSize)
            return;

        var itemsToKeep = Math.Min(RowSize, _renderedItemCount);
        var fadeOutTasks = new List<Task>();

        for (int i = itemsToKeep; i < _renderedItemCount; i++)
        {
            if (_fadeRefs.TryGetValue(i, out var fade) && fade != null)
            {
                fadeOutTasks.Add(fade.FadeOut());
            }
        }

        // We can optionally await these if needed
        // await Task.WhenAll(fadeOutTasks);
    }
}
