@using Valour.Sdk.Services
@using Valour.Shared.Utilities
@inject ValourClient Client
@implements IAsyncDisposable
@inject LoggingService Logger
@inject NodeService NodeService
@inject IJSRuntime JsRuntime

@code {
    private static DotNetObjectReference<BrowserUtils> _dotnetRef;
    private static IJSInProcessObjectReference _jsModule;
    
    public static HybridEvent<ElementDimensions> OnWindowResize;
    public static ElementDimensions WindowDimensions { get; private set; }

    public static HybridEvent Blurred;
    public static HybridEvent Focused;

    [Parameter]
    public Func<Task> OnReady { get; set; }
    
    protected override void OnInitialized()
    {
        _dotnetRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Utility/BrowserUtils.razor.js");
            // can't use client logger because the client doesn't exist yet!
            Logger.Log("BUtils", "Loaded DomWindowData component.", "cyan");
            WindowDimensions = await GetWindowDimensions();
            Logger.Log("BUtils", "Starting window dimensions: " + WindowDimensions.Width + "x" + WindowDimensions.Height, "cyan");
            await _jsModule.InvokeVoidAsync("init", _dotnetRef);
            
            if (OnReady is not null)
                await OnReady.Invoke();
        }
    }
    
    private static async Task<ElementDimensions> GetWindowDimensions()
    {
        var dimensions = await _jsModule.InvokeAsync<ElementDimensions>("getWindowDimensions");
        return dimensions;
    }
    
    public static async Task<ElementDimensions> GetElementDimensionsAsync(ElementReference element)
    {
        var dimensions = await _jsModule.InvokeAsync<ElementDimensions>("getElementDimensions", element);
        return dimensions;
    }
    
    public static async Task<ElementDimensions> GetElementDimensions(ElementReference element)
    {
        var dimensions = await _jsModule.InvokeAsync<ElementDimensions>("getElementDimensions", element);
        return dimensions;
    }
    
    public static async Task<ElementDimensions> GetElementDimensions(string selector)
    {
        var dimensions = await _jsModule.InvokeAsync<ElementDimensions>("getElementDimensionsBySelector", selector);
        return dimensions;
    }

    public static async Task<ElementPosition> GetElementPosition(ElementReference element)
    {
        var position = await _jsModule.InvokeAsync<ElementPosition>("getElementPosition", element);
        return position;
    }
    
    public static async Task<ElementBounds> GetElementBoundingRectAsync(ElementReference element)
    {
        var position = await _jsModule.InvokeAsync<ElementBounds>("getElementBoundingRect", element);
        return position;
    }
    
    public static async Task<WindowUri> GetUriData()
    {
        var uriData = await _jsModule.InvokeAsync<WindowUri>("getWindowUri");
        return uriData;
    }
    
    [JSInvokable("NotifyWindowDimensions")]
    public void NotifyWindowDimensions(ElementDimensions dimensions)
    {
        WindowDimensions = dimensions;
        if (OnWindowResize is not null)
            OnWindowResize.Invoke(dimensions);
    }
    
    [JSInvokable("OnRefocus")]
    public void OnRefocus()
    {
        Logger.Log("BUtils", "Detected refocus event.", "cyan");
        NodeService.CheckConnections();
        
        if (Focused is not null)
            Focused.Invoke();
    }

    [JSInvokable("NotifyBlur")]
    public void NotifyBlur()
    {
        Logger.Log("BUtils", "Detected blur event.", "cyan");
        if (Blurred is not null)
            Blurred.Invoke();
    }

    public async ValueTask DisposeAsync()
    {
        _dotnetRef.Dispose();
        await _jsModule.DisposeAsync();
    }

}