@using Valour.Sdk.Nodes
@using Valour.Sdk.ModelLogic
@typeparam TModel where TModel : ClientModel<TModel>

@inject ValourClient Client

@if (Engine is null)
{
    <h6>Waiting for query engine...</h6>
    return;
}

@if (Columns is null)
{
    <h6>Waiting for column defs...</h6>
    return;
}

@if (!Infinite && _pageItems is null)
{
    <h6>Loading...</h6>
    return;
}

@if (ShowSearch)
{
    <input class="form-control mt-2 mb-2" placeholder="@SearchPlaceholder" @onchange="OnSearchChanged" />
}

<table class="table" style="@(Infinite ? $"height:{Height}px; display:block; overflow-y:auto;" : null)">
    <thead style="@(Infinite ? "position:sticky;top:0;" : null)">
    <tr>
        @foreach (var column in Columns)
        {
            <th @onclick="(() => OnSort(column))" style="cursor:pointer">
                @column.Name
                @if (_sortField == column.SortField)
                {
                    <i class="bi bi-caret-@(_sortDescending ? "down" : "up")-fill"></i>
                }
            </th>
        }
    </tr>
    </thead>
    <tbody>
    @if (Infinite)
    {
        <Virtualize @ref="_virtualize" ItemsProvider="ProvideVirtualItems" OverscanCount="20" TItem="TModel">
            <tr @key="context">
                @foreach (var column in Columns)
                {
                    <td>@column.RenderFragment(new RowData<TModel>() { Row = context, Table = this })</td>
                }
            </tr>
        </Virtualize>
    }
    else
    {
        @foreach (var item in _pageItems)
        {
            <tr @key="@item">
                @foreach (var column in Columns)
                {
                    <td>@column.RenderFragment(new RowData<TModel>(){ Row = item, Table = this })</td>
                }
            </tr>
        }
    }
    </tbody>
</table>
@if (!Infinite)
{
    <div class="table-footer">
        <div class="button-row">
            @if (Engine.IsFirstPage)
            {
                <button class="v-btn primary" @onclick="@LoadPreviousPageAsync">Previous</button>
            }

            @if (!Engine.IsLastPage)
            {
                <button class="v-btn primary" @onclick="@LoadNextPageAsync">Next</button>
            }
        </div>
        <span>Showing items @((Engine.CurrentPageIndex - 1) * PageSize)-@(Math.Min(Engine.CurrentPageIndex * PageSize, Engine.TotalCount)) of @Engine.TotalCount </span>
    </div>
}


@code {
    

    
    [Parameter]
    public int PageSize { get; set; } = 50;
    
    [Parameter]
    public ModelQueryEngine<TModel> Engine { get; set; }

    [Parameter]
    public List<ColumnDefinition<TModel>> Columns { get; set; }

    [Parameter]
    public bool Infinite { get; set; } = false;

    [Parameter]
    public int Height { get; set; } = 300;

    [Parameter]
    public bool ShowSearch { get; set; }

    [Parameter]
    public string SearchPlaceholder { get; set; } = "Search...";
    
    private IReadOnlyList<TModel> _pageItems;
    private Virtualize<TModel> _virtualize;
    private string _sortField;
    private bool _sortDescending;
    private string _searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Columns is null)
        {
            throw new ArgumentNullException(nameof(Columns));
        }
        
        await Requery();
    }

    public async Task Requery()
    {
        if (Engine is null)
        {
            Console.WriteLine($"[QueryEngine ({typeof(TModel).Name})]: Engine is null, cannot requery.");
            return;
        }
        
        Engine.SetFilter("search", _searchTerm, false);
        Engine.SetSort(_sortField, _sortDescending, true);
        
        if (_virtualize is not null)
            await _virtualize.RefreshDataAsync();

        StateHasChanged();
    }

    private async Task LoadNextPageAsync()
    {
        var results = await Engine.NextPageAsync();
        _pageItems = results;
        StateHasChanged();
    }
    
    private async Task LoadPreviousPageAsync()
    {
        var results = await Engine.PreviousPageAsync();
        _pageItems = results;
        StateHasChanged();
    }

    private async Task OnSort(ColumnDefinition<TModel> column)
    {
        if (string.IsNullOrEmpty(column.SortField))
            return;

        if (_sortField == column.SortField)
        {
            _sortDescending = !_sortDescending;
        }
        else
        {
            _sortField = column.SortField;
            _sortDescending = false;
        }
        
        await Requery();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        await Requery();
    }

    private async ValueTask<ItemsProviderResult<TModel>> ProvideVirtualItems(ItemsProviderRequest request)
    {
        return await Engine.GetVirtualizedItemsAsync(request);
    }
}