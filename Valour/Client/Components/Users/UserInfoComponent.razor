@inject ContextMenuService ContextMenuService
@implements IDisposable
@inject ValourClient Client
@inject UserService UserService

@* Placeholder *@
@if (User is null)
{
    <div class="user-info" style="@Style">
        <div class="left-block">
            <img alt="user not found" class="avatar" src="@_avatarUrl">
            <div class="name-status">
                <div class="name-tag">
                    <p class="username" style="color: @_roleColor">Not Found</p>
                </div>
                <p class="status">
                    -------------
                </p>
            </div>
            <div class="state-circle offline"></div>
        </div>
    </div>
    return;
}

<div @oncontextpress="@OnContextMenu" style="display:inline" tabindex="0"
     @onkeydown="@OnKeyDown">
    <div class="user-info" style="@Style" @onclick="@ShowProfileAsync">
        <div class="left-block">
            @if (User.HasAnimatedAvatar)
            {
                <style>
                    .user-info:hover .avatar-@User.Id {
                        background-image: url(@_animAvatarUrl), url(@_avatarUrl), url(@_failedAvatarUrl) !important;
                    }
                </style>
            }
            <div class="avatar avatar-@User.Id" style="background-image: url(@_avatarUrl), url(@_failedAvatarUrl);" alt="@_name's profile picture">
                <div class="state-circle @_statusClass"></div>
            </div>
            
            <div class="name-status">
                <div class="name-tag">
                    <p class="username" style="color: @_roleColor" @onclick="@ShowProfileAsync">@_name</p>
                    <div class="dot-badge-holder">
                        @if (User.SubscriptionType == UserSubscriptionTypes.Stargazer.Name)
                        {
                            <TooltipTrigger>
                                <ChildContent>
                                    <img alt="Stargazer badge" class="dot-badge" src="_content/Valour.Client/media/stargazer-badge.svg"/>
                                </ChildContent>
                                <TooltipContent>
                                    <span>Stargazer</span>
                                </TooltipContent>
                            </TooltipTrigger>
                        }
                        @if (UserId <= 22113735421460480)
                        {
                            <span style="font-weight: bold; font-size: 8px; margin-left: 2px; color: var(--v-purple)">1k</span>
                        }
                    </div>
                    @if (User.Bot)
                    {
                        <p class="user-badge bot">BOT</p>
                    }
                    @if (User.ValourStaff)
                    {
                        <p class="user-badge staff">STAFF</p>
                    }
                </div>
                <p class="status">
                    @_statusText
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public User User { get; set; }
    
    [Parameter]
    public long UserId { get; set; }
    
    // You can additionally supply the PlanetMember object 
    // for role color and syncing
    [Parameter]
    public PlanetMember Member { get; set; }
    
    [Parameter]
    public string Style { get; set; }
    
    // Internal cached values
    private string _name = DefaultName;
    private string _userTag;
    private string _roleColor = DefaultRoleColor;
    private string _avatarUrl;
    private string _animAvatarUrl;
    private string _failedAvatarUrl;

    private string _statusClass = "offline";
    private string _statusText = "";

    // Defaults
    const string DefaultRoleColor = "#fff";
    const string DefaultName = "Unknown User";

    protected override async Task OnInitializedAsync()
    {
        // It's slower to just supply the member, but we can
        // use the UserId to still function
        if (User is null && Member is not null)
        {
            User = await UserService.FetchUserAsync(Member.UserId);
        }
        
        if (User is not null)
        {
            UserId = User.Id;
            User.Updated += OnUserUpdate;
        }
        else
        {
            // Id given, but no user supplied
            if (UserId != 0)
            {
                User = await UserService.FetchUserAsync(UserId);
                User.Updated += OnUserUpdate;
            }
        }

        if (Member is not null)
        {
            UserId = Member.UserId;
            Member.Updated += OnMemberUpdate;
        }

        CalculateAll();

        StateHasChanged();
    }

    private void CalculateAll()
    {
        CalculateName();
        CalculateTag();
        CalculateAvatar();
        CalculateStatus();
        CalculateStatusCode();
        DetermineColorChange();
    }

    void IDisposable.Dispose()
    {
        if (User is not null)
        {
            User.Updated -= OnUserUpdate;
        }

        if (Member is not null)
        {
            Member.Updated -= OnMemberUpdate;
        }
    }

    private void OnContextMenu(MouseEventArgs e)
    {
        if (Member is not null)
        {
            ContextMenuService.Root.OpenMenu<MemberContextMenu>(e,
                new MemberContextMenu.MemberContextParams
                {
                    Member = Member
                }
            );
        }
        else
        {
            ContextMenuService.Root.OpenMenu<UserContextMenu>(e,
                new UserContextMenu.UserContextParams
                {
                    User = User
                }
            );
        }
    }

    private void CalculateName()
    {
        _name = (Member is not null && !string.IsNullOrWhiteSpace(Member.Nickname)) 
            ? Member.Nickname : User?.Name ?? "Unknown User";
    }

    private void CalculateTag()
    {
        _userTag = User?.Tag ?? "????";
    }

    private void CalculateAvatar()
    {
        _avatarUrl = Member?.GetAvatar() ?? User?.GetAvatar() ?? ISharedUser.DefaultAvatar;
        _failedAvatarUrl = User?.GetFailedAvatar() ?? ISharedUser.DefaultAvatar;
    }

    private void CalculateStatus()
    {
        _statusText = User?.Status ?? string.Empty;
    }

    private void CalculateStatusCode()
    {
        _statusClass = User?.UserState?.CssClassName ?? "offline";
    }

    private bool DetermineColorChange()
    {
        var old = _roleColor;
        if (Member is null)
        {
            _roleColor = DefaultRoleColor;
        }
        else
        {
            var displayedRole = Member.GetDisplayedRoleAsync();
            _roleColor = displayedRole is null ? DefaultRoleColor : displayedRole.Color;
        }

        return old != _roleColor;
    }

    private void OnUserUpdate(ModelUpdatedEvent<User> eventData)
    {
        var render = false;
        
        if (eventData.Changes.On(x => x.HasAnimatedAvatar))
        {
            render = true;
            CalculateAvatar();
        }
        if (eventData.Changes.On(x => x.Name))
        {
            render = true;
            CalculateName();
        }
        if (eventData.Changes.On(x => x.Tag))
        {
            render = true;
            CalculateTag();
        }
        if (eventData.Changes.On(x => x.Status))
        {
            render = true;
            CalculateStatus();
        }
        if (eventData.Changes.On(x => x.UserStateCode))
        {
            render = true;
            CalculateStatusCode();
        }
        
        if (render)
        {
            StateHasChanged();
        }
    }
 
    private void OnMemberUpdate(ModelUpdatedEvent<PlanetMember> eventData)
    {
        var render = false;

        if (eventData.Changes.On(x => x.MemberAvatar))
        {
            render = true;
            CalculateAvatar();
        }
        
        if (eventData.Changes.On(x => x.Nickname))
        {
            render = true;
            CalculateName();
        }

        if (eventData.Changes.On(x => x.RoleMembership))
        {
            // We can skip for update because it's the same role
            if (DetermineColorChange())
            {
                render = true;
            }
        }
        
        if (render)
        {
            StateHasChanged();
        }
    }
    
    private async Task ShowProfileAsync(MouseEventArgs e = null)
    {
        double x = e?.ClientX ?? 0;
        double y = e?.ClientY ?? 0;
        
        if (Member is not null)
        {
            await ProfilePopup.Instance.OpenAsync(Member, (int)x, (int)y, "bottomRight");
        }
        else
        {
            await ProfilePopup.Instance.OpenAsync(User, (int)x, (int)y, "bottomRight");
        }
    }

    public void UpdateAll()
    {
        CalculateAll();
        StateHasChanged();
    }
    
    public void Refresh()
    {
        StateHasChanged();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") 
            await ShowProfileAsync();
    }
}
