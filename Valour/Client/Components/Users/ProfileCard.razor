@inject ValourClient Client
@inject FriendService FriendService
@inject ChannelService ChannelService

<div id="@Id" class="card-wrapper" style="@CssStyle">
    <TiltCard ShineCssStyle="border-radius: 20px">
        <div class="card-glow" style="background-color: @Profile.GlowColor">
        </div>
        <div
            @onclick:stopPropagation="true"
            class="profile-card">
            <span class="card-bg" style="@CardBackground"></span>
            <div class="inner-card">
                @if (!string.IsNullOrWhiteSpace(Profile.BackgroundImage))
                {
                    <div class="inner-bg" style="@BackgroundImage;background-repeat: no-repeat;background-size: cover;filter: brightness(0.4);"></div>
                }
                <div class="top-section">
                    <img class="pfp" alt="@_name's profile picture" src="@_pfpUrl" @onerror="OnPfpError"/>
                    <div class="online-bubble @_statusClass"></div>
                    <div class="names">
                        <p class="nickname">@_name</p>
                        <p class="name-and-tag" style="@CustomText">@_nameAndTag</p>
                        @if (User.PriorName is not null)
                        {
                            <p class="name-and-tag">Formerly: @User.PriorName</p>
                        }
                        <div class="status-bubble">
                            <div class="arrow"></div>
                            <p class="status-text">"@(_status)"</p>
                        </div>
                    </div>
                </div>
                @if (User.UserStateCode == 1 && (DateTime.Now - User.TimeLastActive).TotalSeconds > 0)
                {
                    <div class="last-active">
                        Last online @_lastOnline ago
                    </div>
                }
                @if (User.Id != Client.Me.Id)
                {
                    <div class="bottom-btns">
                        
                        @{
                            var friendBtnColor = "#ffffff55";
                            var messageBtnColor = "#ffffff55";
                            
                            if (!string.IsNullOrWhiteSpace(Profile.SecondaryColor))
                            {
                                messageBtnColor = Profile.SecondaryColor + "55";
                            }
                            
                            if (!string.IsNullOrWhiteSpace(Profile.TertiaryColor))
                            {
                                friendBtnColor = Profile.TertiaryColor + "55";
                            }
                        }
                        
                        <button class="v-btn large" style="background-color: @messageBtnColor;" @onclick="OnClickMessage"><i class="bi bi-envelope-fill"></i> Message</button>
                        @if (_isFriend)
                        {
                            <button class="v-btn large" style="background-color: @friendBtnColor" @onclick="OnClickRemoveFriend"><i class="bi bi-person-heart"></i> Remove Friend</button>
                        }
                        else if (_isFriendRequested)
                        {
                            <button class="v-btn large" style="background-color: @friendBtnColor" @onclick="OnClickRemoveFriend"><i class="bi bi-person-heart"></i> Cancel Request</button>
                        }
                        else
                        {
                            <button class="v-btn large" style="background-color: @friendBtnColor" @onclick="OnClickAddFriend"><i class="bi bi-person-heart"></i> Add Friend</button>
                        }
                    </div>
                }
                <p class="headline" style="@CustomText">@Profile.Headline</p>
                <div class="mid-section">
                    <b class="card-subtitle" style="@CustomText">Bio</b>
                    <hr/>
                    <div class="mid-inner">
                        <p class="body-text" style="@CustomText">@Profile.Bio</p>
                    </div>
                </div>
            </div>
        </div>
    </TiltCard>
</div>

@code {
    
    [Parameter]
    public PlanetMember Member { get; set; }
    
    [Parameter]
    public User User { get; set; }
    
    [Parameter]
    public UserProfile Profile { get; set; }
    
    [Parameter]
    public string CssStyle { get; set; }

    private string CustomText
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(Profile.TextColor))
            {
                return $"color: {Profile.TextColor};";
            }

            return string.Empty;
        }
    }

    private string BackgroundImage
    {
        get
        {
            if (User.Subscription == null)
                return string.Empty;

            if (string.IsNullOrWhiteSpace(Profile.BackgroundImage))
                return string.Empty;

            return $"background: url({Profile.BackgroundImage})";
        }
    }

    private string CardBackground
    {
        get
        {
            var bg = (string.IsNullOrWhiteSpace(Profile.PrimaryColor) || User.Subscription == null) ?
                $"background-position: center center; background: {Profile.BorderColor};" :
                $"background-position: center center; background: linear-gradient(117deg, {Profile.PrimaryColor} 10%, {Profile.SecondaryColor} 50%, {Profile.TertiaryColor} 90%);";

            if (Profile.AnimatedBorder)
                bg += "animation: border-spin 5s linear infinite;";

            return bg;
        }
    }

    public readonly string Id = Guid.NewGuid().ToString();

    /* Values used to actually render the profile */
    private string _name;
    private string _nameAndTag;
    private string _status;
    private string _pfpUrl;
    private string _statusClass = "offline";
    private string _lastOnline;

    private bool _isFriend;
    private bool _isFriendRequested;

    public Task LoadDetailsAsync()
    {
        _isFriendRequested = FriendService.OutgoingRequests.Any(x => x.Id == User.Id);
        _isFriend = FriendService.Friends.Any(x => x.Id == User.Id);

        _name = User.Name;
        _nameAndTag = User.NameAndTag;
        _status = User.Status;
        _statusClass = User.UserState.CssClassName;
        if ((DateTime.Now - User.TimeLastActive).TotalHours >= 24)
        {
            _lastOnline = Math.Floor((DateTime.Now - User.TimeLastActive).TotalDays).ToString();
            if (_lastOnline == "1") _lastOnline += " day";
            else _lastOnline += " days";
        }
        else if ((DateTime.Now - User.TimeLastActive).TotalMinutes>=60)
        {
            _lastOnline = Math.Floor((DateTime.Now - User.TimeLastActive).TotalHours).ToString();
            if (_lastOnline == "1") _lastOnline += " hour";
            else _lastOnline += " hours";
        } else if ((DateTime.Now - User.TimeLastActive).TotalSeconds>=60)
        {
            _lastOnline = Math.Floor((DateTime.Now - User.TimeLastActive).TotalMinutes).ToString();
            if (_lastOnline == "1") _lastOnline += " minute";
            else _lastOnline += " minutes";
        }
        else
        {
            _lastOnline = Math.Floor((DateTime.Now - User.TimeLastActive).TotalSeconds).ToString();
            if (_lastOnline == "1") _lastOnline += " second";
            else _lastOnline += " seconds";
        }

        _pfpUrl = Member?.GetAvatar() ?? User?.GetAvatar() ?? ISharedUser.DefaultAvatar;
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnPfpError()
    {
        _pfpUrl = User.GetFailedAvatar();
        StateHasChanged();
    }
    
    private async Task OnClickAddFriend()
    {
        var result = await FriendService.AddFriendAsync(User.NameAndTag);

        if (!result.Success)
        {
            Client.Logger.Log<ProfileCard>($"Failed to add friend:\n{result.Message}", "orange");
            return;
        }

        _isFriend = true;
        StateHasChanged();
    }

    private async Task OnClickRemoveFriend()
    {
        var result = await FriendService.RemoveFriendAsync(User.NameAndTag);

        if (!result.Success)
        {
            Client.Logger.Log<ProfileCard>($"Failed to remove friend:\n{result.Message}", "orange");
            return;
        }

        _isFriend = false;
        _isFriendRequested = false;
        StateHasChanged();
    }
    
    private async Task OnClickMessage()
    {
        var channel = await ChannelService.FetchDmChannelAsync(User.Id, true);
        var newWindowContent = await ChatWindowComponent.GetDefaultContent(channel);
        await WindowService.OpenWindowAtFocused(newWindowContent);
    }
}