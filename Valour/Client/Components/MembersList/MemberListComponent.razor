@inject PlanetService PlanetService
@inject ValourClient Client

@if (!_visible)
{
    return;
}

<CascadingValue Value="this">
    <div class="role-list hide-scrollbar">

        @{
            _mainDisplay = new();
        }

        @if (_planet?.Members is not null)
        {
            foreach (var role in _displayedRoles)
            {
                var members = _displayedRoleMembers[role.Id];

                if (members.Count > 0) {

                    _mainDisplay.Add(new()
                    {
                        TitleName = role.Name,
                        TitleColor = role.Color,
                        IsTitle = true,
                        Key = role.Id
                    });

                    var c = 0;
                    foreach (var member in members)
                    {
                        _mainDisplay.Add(new DisplayItem()
                        {
                            Member = member,
                            IsTitle = false,
                            Key = member.Id,
                        });

                        c++;
                    }
                }
            }

            var online = _displayedRoleMembers[0];

            if (online.Count > 0)
            {
                _mainDisplay.Add(new()
                {
                    TitleName = "Online",
                    IsTitle = true,
                    TitleColor = "#fff",
                    Key = "online"
                });

                var c = 0;
                foreach (var member in online)
                {
                    _mainDisplay.Add(new DisplayItem()
                    {
                        Member = member,
                        IsTitle = false,
                        Key = member.Id,
                    });

                    c++;
                }
            }

            var offline = _displayedRoleMembers[1];

            if (offline.Count > 0) {

                _mainDisplay.Add(new()
                {
                    TitleName = "Offline",
                    IsTitle = true,
                    TitleColor = "#fff",
                    Key = "offline"
                });

                var c = 0;
                foreach (var member in offline)
                {
                    _mainDisplay.Add(new DisplayItem()
                    {
                        Member = member,
                        IsTitle = false,
                        Key = member.Id,
                    });

                    c++;
                }
            }

            <Virtualize Items="_mainDisplay">
                @if (context.IsTitle)
                {
                    <div>
                        <p class="role-title subtitle" style="color: @context.TitleColor;">@context.TitleName</p>
                        <div class="v-gradient-underline" style="background-image: linear-gradient(to right, @context.TitleColor, transparent);"></div>
                    </div>
                }
                else
                {
                    <UserInfoComponent Member="@context.Member" @key="@context.Key" />
                }
            </Virtualize>
        }
    </div>
</CascadingValue>

@code {
    
    [Parameter]
    public Channel Channel { get; set; }
    
    private bool _visible = false;

    public class DisplayItem
    {
        public object Key;
        public bool IsTitle;
        public string TitleColor;
        public string TitleName;
        public string PositionClass;
        public PlanetMember Member;
    }

    private List<DisplayItem> _mainDisplay = new();
    private List<PlanetRole> _displayedRoles;
    private Dictionary<long, List<PlanetMember>> _displayedRoleMembers = new();


    // MemberId, RoleId
    private Dictionary<long, long> _lastMemberRoles = new();
    private Planet _planet;
    private NameComparer _comparer;
    
    private Timer _reloadTimer;

    public CancellationToken ReloadToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _comparer = new NameComparer();

        _displayedRoleMembers.Add(0, new());
        _displayedRoleMembers.Add(1, new());

        // Events
        WindowService.FocusedPlanetChanged += OnPlanetChange;
        PlanetService.PlanetDisconnected += OnPlanetDisconnected;
        
        // Reload every 30s
        _reloadTimer = new Timer(Reload, null, 0, 1000 * 30);

        OnPlanetChange(Channel.Planet);
    }

    private void Reload(object state)
    {
        foreach (var list in _displayedRoleMembers.Values)
        {
            list.Clear();
        }

        if (_planet != null)
        {
            BuildRoleLists();
        }
    }

    public Task OnMemberDelete(PlanetMember member)
    {
        if (member.PlanetId != WindowService.FocusedPlanet.Id)
            return Task.CompletedTask;

        var lastRole = _lastMemberRoles[member.Id];
        _displayedRoleMembers[lastRole].Remove(member);
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    public void DetermineDisplayedRole(PlanetMember member)
    {
        if (member is null)
            return;
        
        var lastRole = _lastMemberRoles[member.Id];
        var newRole = DetermineDisplayRoleId(member);

        if (lastRole != newRole)
        {
            _displayedRoleMembers[lastRole].Remove(member);

            var newRoleMembers = _displayedRoleMembers[newRole];
            newRoleMembers.Add(member);
            newRoleMembers.Sort(_comparer);

            _lastMemberRoles[member.Id] = newRole;

            StateHasChanged();
        }
    }

    public void OnMemberListChange(IModelEvent<PlanetMember> eventData)
    {
        switch (eventData)
        {
            case ModelAddedEvent<PlanetMember> added:
            {
                var member = added.Model;
                
                // Member is new - calculate their value and insert accordingly
                var roleId = DetermineDisplayRoleId(member);
                var roleList = _displayedRoleMembers[roleId];

                _lastMemberRoles[member.Id] = roleId;

                roleList.Add(member);
                roleList.Sort(_comparer);
                
                return;
            }
            case ModelUpdatedEvent<PlanetMember> updated:
            {
                // TODO: handle name / whatever changes
                return;
            }
            case ModelRemovedEvent<PlanetMember> deleted:
            {
                var member = deleted.Model;
                
                // Member is removed (left planet), remove from display
                var roleId = DetermineDisplayRoleId(member);
                var roleList = _displayedRoleMembers[roleId];
                
                roleList.Remove(member);
                return;
            }
        }
    }
    
    private void OnPlanetRolesChange(IModelEvent<PlanetRole> eventData)
    {
        switch (eventData)
        {
            case ModelsSetEvent<PlanetRole>:
            {
                // Reset
                _displayedRoles = _planet.Roles.Where(x => x.HasPermission(PlanetPermissions.DisplayRole)).ToList();
                return;
            }
            case ModelAddedEvent<PlanetRole> added:
            {
                var role = added.Model;
                
                if (role.HasPermission(PlanetPermissions.DisplayRole))
                {
                    // Add as new displayed role
                    _displayedRoleMembers[role.Id] = new();
                    _displayedRoles.Add(role);

                    // Unfortunately for this change we need to recalculate 
                    // everything (since any number of people could have the role)
                    // (this can probably be optimized further)
                    BuildRoleLists();
                }

                return;
            }
            case ModelUpdatedEvent<PlanetRole> updated:
            {
                var role = updated.Model;
                
                // Check if it's a displayed role
                if (_displayedRoleMembers.ContainsKey(role.Id))
                {
                    // Role should no longer be displayed
                    if (!role.HasPermission(PlanetPermissions.DisplayRole))
                    {
                        // Recalculate all in that role
                        foreach (var member in _displayedRoleMembers[role.Id])
                        {
                            var newRoleId = DetermineDisplayRoleId(member);
                            var newRoleList = _displayedRoleMembers[newRoleId];
                            newRoleList.Add(member);
                            newRoleList.Sort(_comparer);
                            _lastMemberRoles[member.Id] = newRoleId;
                        }

                        // Remove role from displayed
                        _displayedRoles.Remove(role);
                        _displayedRoleMembers.Remove(role.Id);
                    }

                    // Only re-render if we're displaying the updated role
                    StateHasChanged();
                }
                else
                {
                    // Role is now being displayed - we need to recalculate this 
                    // (this can probably be optimized further)
                    if (role.HasPermission(PlanetPermissions.DisplayRole))
                    {
                        // Add as new displayed role
                        _displayedRoleMembers[role.Id] = new();
                        _displayedRoles.Add(role);
                        _displayedRoles.Sort((a, b) => a.Position.CompareTo(b.Position));

                        // Unfortunately for this change we need to recalculate 
                        // everything (since any number of people could have the role)
                        BuildRoleLists();
                    }
                }

                return;
            }
            case ModelRemovedEvent<PlanetRole> removed:
            {
                var role = removed.Model;
                
                if (role.PlanetId != WindowService.FocusedPlanet.Id)
                    return;

                if (!_displayedRoleMembers.TryGetValue(role.Id, out var members))
                {
                    return;
                }
                
                // Recalculate all members with role and
                // remove it from display
                foreach (var member in members)
                {
                    var newRoleId = DetermineDisplayRoleId(member, exclude: role.Id);
                    var newRoleList = _displayedRoleMembers[newRoleId];
                    newRoleList.Add(member);
                    newRoleList.Sort(_comparer);
                    _lastMemberRoles[member.Id] = newRoleId;
                }

                _displayedRoleMembers.Remove(role.Id);
                _displayedRoles.Remove(role);

                StateHasChanged();

                return;
            }
        }
    }

    private void BuildRoleLists()
    {
        foreach (var member in _planet.Members)
        {
            var roleId = DetermineDisplayRoleId(member);
            if (roleId != -1)
            {
                _lastMemberRoles[member.Id] = roleId;

                var roleMembers = _displayedRoleMembers[roleId];
                if (!roleMembers.Contains(member))
                    roleMembers.Add(member);
            }
        }

        StateHasChanged();
    }

    /// <summary>
    /// Given a member, determines the id of the role they should be
    /// displayed in.
    /// </summary>
    private long DetermineDisplayRoleId(PlanetMember member, long exclude = long.MaxValue)
    {
        // Don't list at all if this is true
        if (member is null || member.User is null || member.User.LastActiveSpan.TotalDays > 7)
            return -1;

        // Throw directly into offline group
        if (member.User.UserState.Value == UserState.Offline.Value)
        {
            return 1;
        }
        
        // Try for a role
        foreach (var role in _displayedRoles)
        {
            if (role.Id == exclude)
                continue;

            // Ensure role should be listed
            if (!role.HasPermission(PlanetPermissions.DisplayRole))
                continue;
            
            // Member has role
            for (int i = 0; i < member.Roles.Count; i++)
            {
                if (member.Roles[i].Id == role.Id)
                {
                    return role.Id;
                }
            }
            
            // TODO: Optimize using role hashes
        }

        // Online without display role
        return 0;
    }

    public void ClearForNewPlanet()
    {
        _planet.Roles.Changed -= OnPlanetRolesChange;
        _planet.Members.Changed -= OnMemberListChange;
        
        _lastMemberRoles?.Clear();
        _displayedRoleMembers.Clear();
        _displayedRoleMembers.Add(0, new());
        _displayedRoleMembers.Add(1, new());

        foreach (var role in _displayedRoles)
        {
            _displayedRoleMembers.Add(role.Id, new());
        }
    }

    private void OnPlanetDisconnected(Planet planet)
    {
        if (_planet.Id != planet.Id)
            return;

        ClearForNewPlanet();
        _planet = null;
        
        StateHasChanged();
    }

    public void OnPlanetChange(Planet planet)
    {
        //var t = Task.Run(async () =>
        //{

        try
        {
            
            _planet = planet;

            if (planet != null)
            {
                _planet.Roles.Changed += OnPlanetRolesChange;
                _planet.Members.Changed += OnMemberListChange;
                
                Client.Logger.Log<MemberListComponent>($"Member list is updating to {planet.Name}", "cyan");

                _displayedRoles = _planet.Roles.Where(x => x.HasPermission(PlanetPermissions.DisplayRole)).ToList();
                ClearForNewPlanet();
            }
            else
            {
                ClearForNewPlanet();
            }

            BuildRoleLists();

            Client.Logger.Log<MemberListComponent>($"Starting with {_planet.Roles.Count} members.", "cyan");
            StateHasChanged();

        }
        catch(System.Exception e)
        {
            string bad = e.Message;
            string stack = e.StackTrace;
        }

        //});
    }
    
    public void ToggleVisible()
    {
        _visible = !_visible;
        StateHasChanged();
    }

    public class ActivityComparer : IComparer<PlanetMember>
    {
        public int Compare(PlanetMember a, PlanetMember b)
        {
            var greater = (a?.User.TimeLastActive.Ticks ?? 0) >
                           (b?.User.TimeLastActive.Ticks ?? 0);

            return greater ? -1 : 1;
        }
    }
    
    public class NameComparer : IComparer<PlanetMember>
    {
        public int Compare(PlanetMember a, PlanetMember b)
        {
            if (string.Compare(a?.Name, b?.Name, StringComparison.OrdinalIgnoreCase) == 0)
            {
                return -1;
            }
            return string.Compare(a?.Name, b?.Name, StringComparison.OrdinalIgnoreCase);
        }
    }
}
