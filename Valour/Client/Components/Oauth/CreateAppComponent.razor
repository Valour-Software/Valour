@inherits Modal<CreateAppComponent.ModalParams>
@inject ValourClient Client
@inject OauthService OauthService

@if (Client.Me is null){
    <h2>Sign in!</h2>
    return;
}

<div class="col-md-12 modal-bg">
	<section style="text-align: center;">
		<h2>Create a new App</h2>

		<h4>Developers rejoice!</h4>
		
		<hr />

		<div asp-validation-summary="All" class="text-info"></div>

		<div class="form-group mt-4">
			<label>Application Name</label>
			<input class="form-control" @bind-value="@_name" type='' />
			<span id="name-span" style="color:#888888">@_nameSpan</span>
		</div>

        <div class="form-group mt-4">
			<button class="btn v-btn mt-2" @onclick="@OnClickSubmit">Submit</button>
		</div>
	</section>
</div>

@code {
	
	public class ModalParams {}
	
	// Input fields
	private string _name;
	// Spans
	private string _nameSpan = "The name of your application";
	
	private async Task OnClickSubmit(MouseEventArgs e)
	{
		// Require a name
		if (string.IsNullOrWhiteSpace(_name))
		{
			_name = "Please input an application name.";
			return;
		}

		var newApp = new OauthApp(Client)
		{
			Name = _name,
            ImageUrl = "media/logo/logo-512.png",
            OwnerId = Client.Me.Id,
            Uses = 0
		};

		var response = await Client.PrimaryNode.PostAsyncWithResponse<long>($"api/oauth/app", newApp);
        
        if (!response.Success){
            _nameSpan = response.Message;
            StateHasChanged();
            return;
        }

		long appId = response.Data;

		_nameSpan = "App created.";

        ////////////////////////////////

		var app = await OauthService.FetchAppAsync(appId);

		if (app is null)
		{
			Console.WriteLine($"Failed to retrieve app {appId}");
			_nameSpan = "Created app, but an error occured retrieving it. Please refresh.";
            StateHasChanged();
			return;
		}


		// Go to app page
		//navManager.NavigateTo($"/oauth/apps/{app_id}", true);

		Close();
	}

}