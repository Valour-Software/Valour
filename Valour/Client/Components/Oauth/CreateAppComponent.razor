@inherits Modal<CreateAppComponent.ModalParams>
@inject ValourClient Client
@inject OauthService OauthService

@if (Client.Me is null){
    <h2>Sign in!</h2>
    return;
}

<BasicModalLayout Title="Create OAuth App" Icon="plus-circle-fill" MaxWidth="400px">
    <MainArea>
        <p class="subtitle">Developers rejoice! Create your OAuth application to integrate with Valour.</p>
        
        <div class="form-group">
            <label>Application Name</label>
            <input class="form-control" @bind-value="@_name" placeholder="Enter app name..." />
            <span class="helper-text">@_nameSpan</span>
        </div>

        <ResultLabel Result="@_result" />
    </MainArea>
    <ButtonArea>
        <div class="basic-modal-buttons">
            <button @onclick="@OnCancel" class="v-btn">Cancel</button>
            <button @onclick="@OnClickSubmit" class="v-btn primary">Create App</button>
        </div>
    </ButtonArea>
</BasicModalLayout>

@code {
	
	public class ModalParams {}
	
	// Input fields
	private string _name;
	// Spans
	private string _nameSpan = "The name of your application";
	private ITaskResult _result;
	
	private async Task OnClickSubmit(MouseEventArgs e)
	{
		// Require a name
		if (string.IsNullOrWhiteSpace(_name))
		{
			_result = new TaskResult(false, "Please input an application name.");
			StateHasChanged();
			return;
		}

		var newApp = new OauthApp(Client)
		{
			Name = _name,
            ImageUrl = "media/logo/logo-512.png",
            OwnerId = Client.Me.Id,
            Uses = 0,
            RedirectUrl = string.Empty
		};

		var response = await Client.PrimaryNode.PostAsyncWithResponse<long>($"api/oauth/app", newApp);
        
        if (!response.Success){
            _result = new TaskResult(false, response.Message);
            StateHasChanged();
            return;
        }

		_result = new TaskResult(true, "App created successfully!");

		// Close the modal after successful creation
		Close();
	}

	private void OnCancel() => Close();

}