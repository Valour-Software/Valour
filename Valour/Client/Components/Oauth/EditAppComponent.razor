@inherits Modal<EditAppComponent.ModalParams>
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime
@inject ValourClient Client
@inject OauthService OauthService

<BasicModalLayout Title="Edit OAuth App" Icon="gear-fill" MaxWidth="500px">
    <MainArea>
        <div class="app-header">
            <img alt="App Icon" src="@Data.App.ImageUrl" onclick="document.getElementById('upload-core').click()" class="app-icon" />
            <div class="app-info">
                <h4 class="app-name">@Data.App.Name</h4>
                <p class="app-stats">Used @Data.App.Uses time@(Data.App.Uses == 1 ? "" : "s") â€¢ ID: @Data.App.Id</p>
            </div>
        </div>

        <div style="display: none">
            <InputFile OnChange="@LoadFiles" AdditionalAttributes="@_inputAttributes"></InputFile>
        </div>

        <div class="form-group">
            <label>Redirect URL</label>
            <div class="input-group">
                <input class="form-control" @bind="_redirect" placeholder="Your redirect URL..." />
                <button class="v-btn" @onclick="OnClickRedirectUpdate">Update</button>
            </div>
            <ResultLabel Result="@_redirectResult" />
        </div>

        <div class="form-group">
            <label>App Secret</label>
            <div class="input-group">
                <input class="form-control" value="@Data.App.Secret" readonly />
                <button class="v-btn" @onclick="@OnCopySecret">Copy</button>
            </div>
            <span class="helper-text">Keep this secret secure. It's used to authenticate your app.</span>
        </div>

        <ResultLabel Result="@_iconResult" />
    </MainArea>
    <ButtonArea>
        <div class="basic-modal-buttons">
            <button @onclick="@OnCancel" class="v-btn">Cancel</button>
            <button @onclick="@OnClickDelete" class="v-btn danger">Delete App</button>
        </div>
    </ButtonArea>
</BasicModalLayout>

@code 
{
    public class ModalParams
    {
        public OauthApp App;
        public ViewAppsComponent ViewComponent;
    }
    
    private readonly Dictionary<string, object> _inputAttributes = new()
    {
        { "accept", ".png,.jpg,.jpeg,.gif" },
        { "id", "upload-core"}
    };

    private ITaskResult _iconResult;

    private string _redirect;
    private ITaskResult _redirectResult;

    protected override void OnInitialized()
    {
        _redirect = Data.App.RedirectUrl;
    }

    private async Task OnClickRedirectUpdate()
    {
        Data.App.RedirectUrl = _redirect;

        var result = await ToastContainer.Instance.WaitToastWithTaskResult(new ProgressToastData<TaskResult<OauthApp>>()
        {
            ProgressTask = Data.App.UpdateAsync(),
            Title = "Updating App",
            Message = "Updating redirect URL...",
            SuccessMessage = "Redirect URL updated successfully!",
            FailureMessage = "Failed to update redirect URL"
        });

        _redirectResult = result;
        StateHasChanged();
    }

    private void OnClickDelete(){
        var data = new ConfirmModalComponent.ModalParams(
            $"Delete {Data.App.Name}?",
            "This cannot be undone!",
            "Confirm",
            "Cancel",
            async () =>
            {
                var res = await Data.App.DeleteAsync();

                if (res.Success)
                {
                    // Update the ViewComponent if it exists (for backward compatibility)
                    if (Data.ViewComponent != null)
                    {
                        Data.ViewComponent.Apps.Remove(Data.App);
                        Data.ViewComponent.Refresh();
                    }
                    else
                    {
                        // Close the modal after successful deletion
                        await ModalRoot.CloseTopModal();
                    }
                }
                else
                {
                    _iconResult = new TaskResult(false, res.Message);
                    StateHasChanged();
                }

                StateHasChanged();
            },
            () => Task.CompletedTask
        );
        
        ModalRoot.OpenModal<ConfirmModalComponent>(data);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
        {
            _iconResult = new TaskResult(false, "Could not load file as an image.");
            StateHasChanged();
            return;
        }

        if (file.Size > 10240000)
        {
            _iconResult = new TaskResult(false, "Max app icon size is 10mb.");
            StateHasChanged();
            return;
        }

        byte[] data = new byte[file.Size];

        await file.OpenReadStream(10240000).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await Data.App.Node.PostAsyncWithResponse<string>($"upload/app/{Data.App.Id}", content);

        if (result.Success)
        {
            Data.App.ImageUrl = result.Data;
            _iconResult = new TaskResult(true, "Successfully changed app icon.");
        }
        else
        {
            _iconResult = new TaskResult(false, result.Message);
        }

        StateHasChanged();
    }

    public async Task OnCopySecret(){
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.App.Secret);
        ToastContainer.Instance.AddToast(new ToastData("Copied!", "App secret copied to clipboard", ToastProgressState.Success));
    }

    private void OnCancel() => Close();
}