@inject ChannelListManager ListManager
@inject ContextMenuService ContextMenuService
@inject ChannelService ChannelService
@inject UnreadService UnreadService
@inject NotificationService NotificationService

<div 
    class="@GetCssClass()" 
    id="list-@Planet.Id"
    @oncontextpress="@OnContextPress">
    <div class="header-wrapper" style="cursor:pointer" id="list-inner-@Planet.Id">
        <div @onclick='@OnClick' class="header" ondragover="event.preventDefault();">
            <div class="left">
                <img alt="planet icon" src="@Planet.GetIconUrl(IconFormat.Webp64)" class="icon"/>
                <p class="planet-name">
                    @Planet.Name
                </p>
            </div>
            <div class="right">
                @if (_notifications > 0)
                {
                    <div class="unread-badge notification">
                        <span>@_notifications</span>
                    </div>
                }
                else if (_hasUnread)
                {
                    <div class="unread-badge"></div>
                }
                
                @if (_canEdit)
                {
                    <div class="edit-button" @onclick="@OnClickEdit">
                        <i class="bi bi bi-gear-fill"></i>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="channel-list">
        @if (Open)
        {
            <div class="v-gradient-underline"></div>
            <div class="channel planet-about" @onclick="OnClickPlanetInfo">
                <img class="planet-about-icon" src="_content/Valour.Client/media/Home-icon.svg" alt="Info channel"/>
                <p class="name">
                    About Planet
                </p>
            </div>

            <div class="list-wrapper">
                @{
                    DetermineRootChannels();
                    RootComponents = new ChannelListItem[RootChannels.Count];
                    
                    for (int i = 0; i < RootChannels.Count; i++)
                    {
                        var ii = i;
                        var channel = RootChannels[ii];

                        if (DetermineChannelVisible(channel))
                        {
                            <ChannelListItem @key="@channel.Id"
                                             @ref="@RootComponents[ii]"
                                             PlanetComponent="@this"
                                             AllChannels="@Planet.Channels"
                                             Channel="@channel"/>
                        }
                        
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// A hashset of all the categories which have been closed (minimized)
    /// </summary>
    public HashSet<long> ClosedCategories = new();
    private Dictionary<long, bool> VisibilityMap = new();

    public ChannelListItem[] RootComponents;
    public List<Channel> RootChannels = new();
    
    [Parameter] 
    public Planet Planet { get; set; }

    public bool Open { get; set; } = true;

    private int _notifications;
    private bool _hasUnread;
    
    private static bool _canEdit;

    protected override void OnInitialized()
    {
        Planet.Channels.Changed += OnChannelsChanged;
        
        DetermineUnreadAndNotifications();
        DeterminePermissions();
    }
    
    public void RefreshChannels()
    {
        if (RootComponents is not null)
        {
            foreach (var channel in RootComponents)
            {
                channel?.RefreshRecursive();
            }
        }
    }
    
    private void DetermineRootChannels()
    {
        RootChannels = Planet.Channels.Where(x => (x.RawPosition & 0x00FFFFFF) == 0).ToList();
    }

    private void OnChannelsChanged(IModelEvent<Channel> eventData)
    {
        Console.WriteLine("Channels changed");
        DetermineRootChannels();
        StateHasChanged();
        RefreshChannels();
    }
    
    public bool DetermineChannelVisible(Channel channel)
    {
        if (VisibilityMap.TryGetValue(channel.Id, out var cached))
        {
            return cached;
        }

        var visible = true;

        if (channel.ParentId is not null)
        {
            var parent = Planet.Channels.Get(channel.ParentId.Value);
            visible = DetermineChannelVisible(parent) && !ClosedCategories.Contains(channel.ParentId.Value);
        }
        
        VisibilityMap.TryAdd(channel.Id, visible);
        
        return visible;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Clear visibility cache
        VisibilityMap.Clear();
    }

    public void SetCategoryOpened(long categoryId, bool value)
    {
        if (value)
            ClosedCategories.Add(categoryId);
        else
            ClosedCategories.Remove(categoryId);
        
        StateHasChanged();
    }

    private void DeterminePermissions()
    {
        _canEdit = Planet.MyMember?.HasPermission(PlanetPermissions.Manage) ?? false;
    }

    private void DetermineUnreadAndNotifications()
    {
        _hasUnread = UnreadService.IsPlanetUnread(Planet.Id);
        _notifications = NotificationService.GetPlanetNotifications(Planet.Id);
    }

    private void OnContextPress(ContextPressEventArgs e)
    {
        ContextMenuService.Root.OpenMenu<PlanetContextMenu>(e,
            new PlanetContextMenu.PlanetContextParams()
            {
                Planet = Planet
            }
        );
    }
    
    public string GetCssClass() => 
        Open ? "planet is-open" : "planet";

    public string GetArrowStyle() =>
        Open ? "transform: rotate(90deg);" : "";

    public void OnClick()
    {
        Open = !Open;
        StateHasChanged();
    }
    
    private void OnClickEdit()
    {
        var data = new EditPlanetComponent.ModalParams()
        {
            Planet = Planet
        };
        
        ModalRoot.Instance.OpenModal<EditPlanetComponent>(data);
    }
    
    private async Task OnClickPlanetInfo()
    {
        var newWindowContent = PlanetInfoWindowComponent.GetDefaultContent(Planet);
        await WindowService.OpenWindowAtFocused(newWindowContent);
    }
}
