@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@implements IAsyncDisposable

<div class="sidebar-container @ActiveClass @FlipClass">
	<div id="@_id" class="sidebar-menu">
		<SidebarOpenTab OnClicked="OnOpenTabClicked" Open="@_active" Flip="Flip"></SidebarOpenTab>
		<div class="sidebar">
			<VersionComponent />
			<div class="sidebar-content">
				@_tabItems[SelectedTab].RenderContent
			</div>
			<div class="sidebar-tabstrip">
				@if (!Flip)
				{
					<SelfInfoComponent />
				}
				<SidebarTabstrip TabItems="@_tabItems" Sidebar="@this" Flip="Flip" />
			</div>
		</div>
	</div>
</div>

@code {

	private List<TabStripItem> _tabItems = new()
	{
		new TabStripItem<JoinedPlanetsDirectory>("Planets", "folder-fill", 16),
		new TabStripItem<FriendListComponent>("Friends", "person-fill", 21),
		new TabStripItem<ChannelListComponent>("Channels", "chat-left-fill", 15),
		new TabStripItem<NotificationsListComponent>("Notifications", "bell-fill", 16)
	};
	
	private static event Func<Task> OnToggleMobileSidebar;
	public static async Task ToggleMobileSidebar()
	{
		if (OnToggleMobileSidebar is not null)
			await OnToggleMobileSidebar.Invoke();
	}
	
	[Parameter]
	public bool Flip { get; set; }
	public string FlipClass => Flip ? "flip" : "";
	
    public int SelectedTab = 0;
	private bool _active = !DeviceInfo.IsMobile;
	
	private string ActiveClass => _active ? "sidebar-active" : "";

	private string _id = "sidebar-" + Guid.NewGuid();
	
	/// <summary>
	/// Dotnet object reference for use in Javascript
	/// </summary>
	private DotNetObjectReference<Sidebar> _thisRef;

	/// <summary>
	/// Module for calling Javascript functions
	/// </summary>
	private IJSInProcessObjectReference _jsModule;

	private IJSInProcessObjectReference _jsRef;
	
	
	protected override async Task OnInitializedAsync()
	{
		
		if (await LocalStorage.ContainKeyAsync("sidebar"))
		{
			var name = await LocalStorage.GetItemAsStringAsync("sidebar");
			SelectedTab = _tabItems.FindIndex(x => x.Name == name);
			if (SelectedTab == -1)
				SelectedTab = 0;
		}
		else
		{
			SelectedTab = 0;
		}
		
		OnToggleMobileSidebar += OnOpenTabClicked;
	}

	public async Task OnSelected(int index, TabStripItem tab)
	{
		await LocalStorage.SetItemAsStringAsync("sidebar", tab.Name);
		SelectedTab = index;
		StateHasChanged();
	}
	
	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		await _jsModule.InvokeVoidAsync("cleanup");
		await _jsModule.DisposeAsync();
		_thisRef.Dispose();
		OnToggleMobileSidebar -= OnOpenTabClicked;
	}
	
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_thisRef = DotNetObjectReference.Create(this);
			_jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Sidebar/Sidebar.razor.js");
			_jsRef = await _jsModule.InvokeAsync<IJSInProcessObjectReference>("init", _thisRef, _id);
		}
	}

	private async Task OnOpenTabClicked()
	{
		if (!DeviceInfo.IsMobile)
		{
			_active = !_active;
			StateHasChanged();
		}
		else
		{
			await _jsRef.InvokeVoidAsync("toggleOpen");	
		}
	}
}