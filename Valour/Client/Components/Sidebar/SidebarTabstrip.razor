@inject ILocalStorageService LocalStorage
@implements IDisposable

<div class="tabstrip">
    @for (var i = 0; i < TabItems.Count; i++)
    {
        var item = TabItems[i];
        var index = i;

        <div @key="@item" class="@GetItemClass(index)" @onclick="@(async () => await OnClick(index, item))">
            <TooltipTrigger>
                <ChildContent>
                    <div class="icon-holder">
                        <i aria-label="@item.Name" style="font-size: @(item.Size)px" class="bi bi-@item.Icon"></i>
                    </div>
                </ChildContent>
                <TooltipContent>
                    <span>@item.Name</span>
                </TooltipContent>
            </TooltipTrigger>
        </div>
    }
</div>

@code {
    
    [Parameter]
    public Sidebar Sidebar { get; set; }
    
    [Parameter]
    public bool Flip { get; set; }
    
    [Parameter]
    public List<TabStripItem> TabItems { get; set; }
    
    void IDisposable.Dispose()
    {
    }

    private async Task OnClick(int index, TabStripItem item)
    {
        await Sidebar.OnSelected(index, item);
        StateHasChanged();
    }

    private string GetItemClass(int index)
    {
        return index == Sidebar.SelectedTab ? "item selected" : "item";
    }

}