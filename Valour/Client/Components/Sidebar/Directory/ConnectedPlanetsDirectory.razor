@inherits ControlledRenderComponentBase
@inject PlanetService PlanetService
@inject UnreadService UnreadService
@inject NotificationService NotificationService

<div class="connected-planets">
    <p class="subtitle mb-2">Connected Planets</p>
    <div class="v-gradient-underline"></div>
    
    <input @oninput="@OnFilterInput" type="text" placeholder="Search..." class="form-control mb-2 v-bg-medium" />
    <div class="list">
        @foreach (var renderInfo in _renderPlanets)
        {
            <PlanetListComponent @key="@renderInfo.Planet.Id" Planet="@renderInfo.Planet" />
        }
    </div>
</div>

@code {

    public class ConnectedPlanetRenderInfo
    {
        public Planet Planet { get; set; }
    }

    private List<ConnectedPlanetRenderInfo> _renderPlanets = new();
    private string _filterText;
    
    protected override void OnInitialized()
    {
        PlanetService.ConnectedPlanetsUpdated += OnConnectedPlanetsUpdated;
        OnConnectedPlanetsUpdated();
    }
    
    
    private void OnFilterInput(ChangeEventArgs e)
    {
        _filterText = e.Value?.ToString();
        CalculatePlanets();
        ReRender();
    }
    
    private void OnConnectedPlanetsUpdated()
    {
        CalculatePlanets();
        ReRender();
    }

    private void OnClickExplore()
    {
        
    }

    private void CalculatePlanets()
    {
        _renderPlanets.Clear();

        var planets = PlanetService.JoinedPlanets;
        if (!string.IsNullOrWhiteSpace(_filterText))
        {
            planets = planets.Where(p => p.Name.ToLower().Contains(_filterText.ToLower())).ToList();
            
            // Order first by if the planet starts with the filter text,
            // then alphabetically
            planets = planets.OrderBy(p => p.Name.StartsWith(_filterText) ? 0 : 1)
                .ThenBy(p => p.Name).ToList();
        }

        foreach (var planet in planets)
        {
            _renderPlanets.Add(new ConnectedPlanetRenderInfo()
            {
                Planet = planet,
            });
        }
    }
}