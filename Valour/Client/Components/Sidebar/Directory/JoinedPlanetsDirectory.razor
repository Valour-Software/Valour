@inherits ControlledRenderComponentBase
@inject PlanetService PlanetService
@inject UnreadService UnreadService
@inject NotificationService NotificationService
@inject PlanetTagService TagService

<div class="joined-planets">
    <p class="subtitle mb-2">Joined Planets</p>
    <div class="v-gradient-underline"></div>
    
    <SearchTagFilterComponent 
        OnTagSelected="OnTagSelected"
        OnTagSelectToPlanet="OnTagSelected"
        OnTagRemoveToPlanet="OnTagRemoved"
        OnFilterChanged="OnFilterChanged"/>

    <div class="list">
        @foreach (var joinedPlanet in _renderPlanets)
        {
            <div class="directory" @onclick="@(async () => await OnPlanetClick(joinedPlanet.Planet))">
                <div class="planet-row">
                    <div class="left">
                        <img alt="@joinedPlanet.Planet.Name Icon" src="@joinedPlanet.Planet.GetIconUrl(IconFormat.Webp64)"/>
                        <span>@joinedPlanet.Planet.Name</span>
                    </div>
                    <div class="right">
                        @if (joinedPlanet.Notifications > 0)
                        {   
                            <div class="unread-badge notification">
                                <span>@joinedPlanet.Notifications</span>
                            </div>
                        } 
                        else if (joinedPlanet.HasUnread)
                        {
                            <div class="unread-badge"></div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    <div style="display: flex; flex-direction: column; flex-grow: 1;"></div>
    <button class="v-btn mt-2 v-bg-medium" @onclick="@OnClickExplore">Explore Planets</button>
</div>

@code {
    
    public class JoinedPlanetRenderInfo
    {
        public Planet Planet { get; set; }
        public bool HasUnread { get; set; }
        public int Notifications { get; set; }
    }

    private List<JoinedPlanetRenderInfo> _renderPlanets = new();
    private string _filterText;
    private string _searchTerm = "";
    private List<string> _filterTagNames = new();
    
    protected override async Task OnInitializedAsync()
    {
        PlanetService.JoinedPlanetsUpdated += OnJoinedPlanetsUpdated;

        _ = Task.Run(async () =>
        {
            await Task.WhenAll(
                [
                    UnreadService.FetchUnreadPlanetsAsync(),
                    NotificationService.LoadUnreadNotificationsAsync(),
                ]
            );
            
            OnJoinedPlanetsUpdated(); // Needs to rebuild render info
            ReRender();
        });
        
        OnJoinedPlanetsUpdated();
    }
    
    
    private void OnTagSelected(PlanetTag planetTag)
    {
        if (planetTag != null && !_filterTagNames.Contains(planetTag.Name))
            _filterTagNames.Add(planetTag.Name);
        CalculatePlanets();
        ReRender();
    }

    private void OnTagRemoved(PlanetTag planetTag)
    {
        if (planetTag != null)
            _filterTagNames.Remove(planetTag.Name);

        CalculatePlanets();
        ReRender();
    }
    
    private void OnJoinedPlanetsUpdated()
    {
        CalculatePlanets();
        ReRender();
    }

    private async Task OnClickExplore()
    {
        var windowContent = new DiscoveryPageWindowContent();
        await WindowService.OpenWindowAtFocused(windowContent);
    }
    
    private async Task OnFilterChanged((string SearchTerm, List<long> TagIds) filter)
    {
        _searchTerm = filter.SearchTerm; 
        // Convert tag IDs to names for simpler filtering
        _filterTagNames.Clear();
        foreach (var tagId in filter.TagIds)
        {
            var tag = await TagService.FetchTagByIdAsync(tagId);
            if (tag != null && !_filterTagNames.Contains(tag.Name))
                _filterTagNames.Add(tag.Name);
        }
        CalculatePlanets();
        ReRender(); 
    }

    private void CalculatePlanets()
    {
        _renderPlanets.Clear();
        var planets = PlanetService.JoinedPlanets;

     
        if (_filterTagNames.Any())
        {
            planets = planets.Where(p => p.Tags != null && p.Tags.Any() && _filterTagNames.All(tagName => p.Tags.Any(t => t.Name == tagName))).ToList();
        }

        
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            planets = planets.Where(p => p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        
        _renderPlanets = planets.Select(p => new JoinedPlanetRenderInfo
        {
            Planet = p,
            HasUnread = UnreadService.IsPlanetUnread(p.Id),
            Notifications = NotificationService.GetPlanetNotifications(p.Id)
        }).ToList();
    }

    
    public async Task OnPlanetClick(Planet planet)
    {
        var newWindowContent = await ChatWindowComponent.GetContentForPlanetPrimaryChannel(planet);
        
        if (newWindowContent is null)
        {
            ToastContainer.Instance.AddToast(new ToastData()
            {
                Title = "Failure loading planet",
                Message = $"Error accessing {planet.Name}",
                Type = ToastProgressState.Failure
            });
        }

        await WindowService.TryAddFloatingWindow(newWindowContent);

        await Sidebar.ToggleMobileSidebar();
    }

}