@using Valour.Sdk.ModelLogic.QueryEngines
@inject ValourClient Client
@inject StaffService StaffService

<QueryTable 
    @ref="@_table"
    Columns="@_columns"
    Engine="@_engine"
    ShowSearch="@true"
    SearchPlaceholder="Search name..."
    Infinite="@true"
/>

@code {
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    private QueryTable<User> _table;

    private List<ColumnDefinition<User>> _columns;
    
    private string _nameSearch = string.Empty;

    private StaffUserQueryEngine _engine;

    protected override void OnInitialized()
    {
        _engine = new StaffUserQueryEngine(Client.PrimaryNode);
        
        _columns = new()
        {
            new ()
            {
                Name = "Card",
                RenderFragment = (rowData) =>
                    @<UserInfoComponent User="@rowData.Row" />
            },
            new ()
            {
                Name = "Name",
                RenderFragment = (rowData) =>
                    @<span>@rowData.Row.NameAndTag</span>
            },
            new ()
            {
                Name = "Actions",
                RenderFragment = (rowData) =>
                    @<div class="button-row">
                        @if (rowData.Row.Disabled)
                        {
                            <button class="v-btn primary" @onclick="@(async () => await EnableUser(rowData.Row.Id))">Enable</button>
                        }
                        else
                        {
                            <button class="v-btn secondary" @onclick="@(async () => await DisableUser(rowData.Row.Id))">Disable</button>
                        }
                        
                        <button class="v-btn danger" @onclick="@(async () => await DeleteUser(rowData.Row))">Delete</button>
                    </div>
            }
        };
    }
    
    /* Staff Controls */
    
    public async Task DisableUser(long userId)
    {
        var toastData = new ProgressToastData<TaskResult>()
        {
            Title = "Disabling User",
            SuccessMessage = "User has been disabled",
            Message = "Waiting for result...",
            ProgressTask = StaffService.SetUserDisabledAsync(userId, true)
        };
        
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);

        if (result.Success)
        {
            await _table.Requery();
        }
    }
    
    private async Task EnableUser(long userId)
    {
        var toastData = new ProgressToastData<TaskResult>()
        {
            Title = "Enabling User",
            SuccessMessage = "User has been enabled",
            Message = "Waiting for result...",
            ProgressTask = StaffService.SetUserDisabledAsync(userId, false)
        };
        
        var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);

        if (result.Success)
        {
            await _table.Requery();
        }
    }
    
    public Task DeleteUser(User user)
    {
        ModalRoot.OpenModal<ConfirmModalComponent>(new ConfirmModalComponent.ModalParams()
        {
            Title = $"Hard Delete {user.NameAndTag}?",
            Description = "This CANNOT be undone. Are you sure you want to delete this user?",
            CancelText = "Cancel",
            ConfirmText = "DELETE",
            ConfirmEvent = async () =>
            {
                var toastData = new ProgressToastData<TaskResult>()
                {
                    Title = "Deleting User",
                    SuccessMessage = "User has been deleted",
                    Message = "Waiting for result...",
                    ProgressTask = StaffService.DeleteUserAsync(user.Id)
                };
        
                var result = await ToastContainer.Instance.WaitToastWithTaskResult(toastData);

                if (result.Success)
                {
                    await _table.Requery();
                }
            }
        });

        return Task.CompletedTask;
    }
}