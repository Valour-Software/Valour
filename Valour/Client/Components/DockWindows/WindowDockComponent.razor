@implements IAsyncDisposable
@inject ValourClient InjectedClient
@inject ISyncLocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@using Valour.Client.Pages

<div class="window-dock" @ref="@_ref">
    @foreach (var tab in Tabs)
    {
        <WindowComponent @key="@tab.Id" WindowTab="@tab" Dock="@this" />
    }
    
    @foreach(var split in Splits)
    {
        <WindowSplitComponent @key="@split.Id" Split="@split" />
    }
</div>

@code {
    
    [Parameter]
    public StartScreenData StartData { get; set; }
    
    public ValourClient Client { get; private set; }
    
    public WindowLayout Layout { get; private set; }

    public List<WindowTab> Tabs { get; private set; } = new();

    public List<WindowSplit> Splits { get; private set; } = new();
    
    public ElementDimensions Dimensions { get; private set; }

    private ResizeObserver _resizeObserver;
    
    private ElementReference _ref;
    
    // Floaters are not tracked by a layout, so they are stored here
    private List<WindowTab> _floaters = new();

    private WindowSaveLoadAdapter _saveLoadAdapter;

    protected override async Task OnInitializedAsync()
    {
        Client = InjectedClient;
        
        _saveLoadAdapter = new(Client);
        
        WindowService.AddDock(this);

        var loaded = false;
        
        // check if state is saved
        var layoutJson = LocalStorage.GetItemAsString("coreLayout");
        if (!string.IsNullOrWhiteSpace(layoutJson))
        {
            try
            {
                Layout = await _saveLoadAdapter.DeserializeLayout(layoutJson);
                Layout.SetDockRecursiveRaw(this);
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to load saved layout: " + e.Message);
                await Reset();
            }
            
            loaded = true;
        }
        
        var floatersJson = LocalStorage.GetItemAsString("coreFloaters");
        if (!string.IsNullOrWhiteSpace(floatersJson))
        {
            try
            {
                _floaters = await _saveLoadAdapter.DeserializeFloaters(floatersJson);
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to load saved floaters: " + e.Message);
                _floaters.Clear();
            }
        }
        
        if (!loaded)
        {
            await Reset();
        }
        else
        {
            Layout.RecalculatePosition();
            NotifyLayoutChanged(false, false);
            Layout.ReRenderRecursive();
        }
    }

    /// <summary>
    /// Notifies this dock that the layout has changed.
    /// This will update the tabs and splits, and re-render if necessary.
    /// </summary>
    public void NotifyLayoutChanged(bool notifyService = true, bool saveLayout = true)
    {
        // Clear old lists
        Tabs.Clear();
        Splits.Clear();
        
        // Get new tabs and splits
        Layout.GetTabs(Tabs);
        Tabs.AddRange(_floaters);
        
        Layout.GetSplits(Splits);
        
        if (notifyService)
        {
            // Notify global window service
            WindowService.NotifyDockLayoutUpdated();
        }
        
        // Actually render changes
        Render();
        
        // Save layout
        SaveLayout();
        
        // Save floaters
        SaveFloaters();
    }
    
    public async Task AddFloatingTab(WindowContent content, FloatingWindowProps floatingProps)
    {
        var tab = new WindowTab(content, floatingProps);
        await AddFloatingTab(tab, floatingProps);
    }
    
    /// <summary>
    /// Adds a tab as a floating window.
    /// </summary>
    public async Task AddFloatingTab(WindowTab tab, FloatingWindowProps floatingProps)
    {
        if (floatingProps is null)
        {
            floatingProps = new FloatingWindowProps()
            {
                // Center window with half size
                X = BrowserUtils.WindowDimensions.Width / 4f,
                Y = BrowserUtils.WindowDimensions.Height / 4f,
                Width = BrowserUtils.WindowDimensions.Width / 2,
                Height = BrowserUtils.WindowDimensions.Height / 2
            };
        }
        
        // this HAS to happen first to prevent component re-initialization
        _floaters.Add(tab);
        
        tab.SetFloatingProps(floatingProps);
        
        await tab.SetLayout(null);
        
        NotifyLayoutChanged();
    }
    
    public async Task RemoveFloatingTab(WindowContent content)
    {
        var tab = content.Tab;
        if (tab is not null)
        {
            await RemoveFloatingTab(tab);
        }
    }
    
    public Task RemoveFloatingTab(WindowTab tab)
    {
        tab.SetFloatingProps(null);
        _floaters.Remove(tab);
        NotifyLayoutChanged();

        return Task.CompletedTask;
    }

    public async Task Reset(bool notifyService = true, bool saveLayout = true)
    {
        _floaters.Clear();
        Tabs.Clear();
        Splits.Clear();

        Layout = new WindowLayout(this);
        await Layout.AddTab(HomeWindowComponent.DefaultContent);
        
        NotifyLayoutChanged(notifyService, saveLayout);
    }
    
    public void SaveLayout()
    {
        var layoutJson = _saveLoadAdapter.SerializeLayout(Layout);
        // Console.WriteLine(layoutJson);
        LocalStorage.SetItemAsString("coreLayout", layoutJson);
    }
    
    public void SaveFloaters()
    {
        var floatersJson = _saveLoadAdapter.SerializeFloaters(_floaters);
        LocalStorage.SetItemAsString("coreFloaters", floatersJson);
    }

    
    // Rendering //
    
    /// <summary>
    /// Flag that allows or disallows rendering.
    /// </summary>
    private bool _canRender = true;
    
    protected override bool ShouldRender() => _canRender;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _canRender = false;
        
        if (firstRender)
        {
            _resizeObserver = new ResizeObserver();
            _resizeObserver.ResizeEvent += OnWindowResize;
            await _resizeObserver.Initialize(_ref, JsRuntime, 3);
        }

        await RefreshSize();
    }
    
    private void Render()
    {
        Console.WriteLine("Rendering window dock!");
        _canRender = true;
        StateHasChanged();
    }
    
    private void OnWindowResize(ElementDimensions d)
    {
        Dimensions = d;
    }

    private async Task RefreshSize()
    {
        Dimensions = await BrowserUtils.GetElementDimensions(_ref);
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_resizeObserver is not null)
            await _resizeObserver.DisposeAsync();
    }

}