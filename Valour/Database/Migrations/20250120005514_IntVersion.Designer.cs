// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Valour.Database.Context;

#nullable disable

namespace Valour.Database.Migrations
{
    [DbContext(typeof(ValourDb))]
    [Migration("20250120005514_IntVersion")]
    partial class IntVersion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Valour.Database.AuthToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AppId")
                        .HasColumnType("text")
                        .HasColumnName("app_id");

                    b.Property<string>("IssuedAddress")
                        .HasColumnType("text")
                        .HasColumnName("issued_address");

                    b.Property<long>("Scope")
                        .HasColumnType("bigint")
                        .HasColumnName("scope");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_expires");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Scope");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("auth_tokens", (string)null);
                });

            modelBuilder.Entity("Valour.Database.BlockedUserEmail", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("Email");

                    b.ToTable("blocked_user_emails");
                });

            modelBuilder.Entity("Valour.Database.CdnBucketItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("cdn_bucket_items");
                });

            modelBuilder.Entity("Valour.Database.CdnProxyItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.ToTable("cdn_proxies");
                });

            modelBuilder.Entity("Valour.Database.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChannelType")
                        .HasColumnType("integer")
                        .HasColumnName("channel_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("InheritsPerms")
                        .HasColumnType("boolean")
                        .HasColumnName("inherits_perms");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long?>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long>("RawPosition")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("RawPosition");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("Valour.Database.ChannelMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("channel_members");
                });

            modelBuilder.Entity("Valour.Database.Credential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CredentialType")
                        .HasColumnType("text")
                        .HasColumnName("credential_type");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<byte[]>("Secret")
                        .HasColumnType("bytea")
                        .HasColumnName("secret");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("credentials");
                });

            modelBuilder.Entity("Valour.Database.Economy.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("integer")
                        .HasColumnName("decimal_places");

                    b.Property<long>("Issued")
                        .HasColumnType("bigint")
                        .HasColumnName("issued");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<string>("PluralName")
                        .HasColumnType("text")
                        .HasColumnName("plural_name");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ShortCode")
                        .HasColumnType("text")
                        .HasColumnName("short_code");

                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("Valour.Database.Economy.EcoAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<decimal>("BalanceValue")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_value");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long?>("PlanetMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_member_id");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PlanetMemberId");

                    b.HasIndex("UserId");

                    b.ToTable("eco_accounts");
                });

            modelBuilder.Entity("Valour.Database.Economy.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<long>("AccountFromId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_from_id");

                    b.Property<long>("AccountToId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_to_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("text")
                        .HasColumnName("fingerprint");

                    b.Property<long?>("ForcedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("forced_by");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_stamp");

                    b.Property<long>("UserFromId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_from_id");

                    b.Property<long>("UserToId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_to_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountFromId");

                    b.HasIndex("AccountToId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Valour.Database.EmailConfirmCode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Code");

                    b.HasIndex("UserId");

                    b.ToTable("email_confirm_codes");
                });

            modelBuilder.Entity("Valour.Database.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AttachmentsData")
                        .HasColumnType("text")
                        .HasColumnName("attachments_data");

                    b.Property<long?>("AuthorMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_member_id");

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("EditedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edit_time");

                    b.Property<string>("EmbedData")
                        .HasColumnType("text")
                        .HasColumnName("embed_data");

                    b.Property<string>("MentionsData")
                        .HasColumnType("text")
                        .HasColumnName("mentions_data");

                    b.Property<long?>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long?>("ReplyToId")
                        .HasColumnType("bigint")
                        .HasColumnName("reply_to_id");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_sent");

                    b.HasKey("Id");

                    b.HasIndex("AuthorMemberId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("ReplyToId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Valour.Database.NodeStats", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ActiveMemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("active_member_count");

                    b.Property<int>("ConnectionCount")
                        .HasColumnType("integer")
                        .HasColumnName("connection_count");

                    b.Property<int>("ConnectionGroupCount")
                        .HasColumnType("integer")
                        .HasColumnName("connection_group_count");

                    b.Property<int>("PlanetCount")
                        .HasColumnType("integer")
                        .HasColumnName("planet_count");

                    b.HasKey("Name");

                    b.ToTable("node_stats");
                });

            modelBuilder.Entity("Valour.Database.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<string>("ClickUrl")
                        .HasColumnType("text")
                        .HasColumnName("click_url");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<long?>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<int>("Source")
                        .HasColumnType("integer")
                        .HasColumnName("source");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("source_id");

                    b.Property<DateTime?>("TimeRead")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_read");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_sent");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Valour.Database.NotificationSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Auth")
                        .HasColumnType("text")
                        .HasColumnName("auth");

                    b.Property<string>("Endpoint")
                        .HasColumnType("text")
                        .HasColumnName("endpoint");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notification_subscriptions");
                });

            modelBuilder.Entity("Valour.Database.OauthApp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<int>("Uses")
                        .HasColumnType("integer")
                        .HasColumnName("uses");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("oauth_apps", (string)null);
                });

            modelBuilder.Entity("Valour.Database.PasswordRecovery", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Code");

                    b.HasIndex("UserId");

                    b.ToTable("password_recoveries");
                });

            modelBuilder.Entity("Valour.Database.PermissionsNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Code")
                        .HasColumnType("bigint")
                        .HasColumnName("code");

                    b.Property<long>("Mask")
                        .HasColumnType("bigint")
                        .HasColumnName("mask");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer")
                        .HasColumnName("target_type");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TargetId");

                    b.ToTable("permissions_nodes");
                });

            modelBuilder.Entity("Valour.Database.Planet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Discoverable")
                        .HasColumnType("boolean")
                        .HasColumnName("discoverable");

                    b.Property<bool>("HasAnimatedIcon")
                        .HasColumnType("boolean")
                        .HasColumnName("animated_icon");

                    b.Property<bool>("HasCustomIcon")
                        .HasColumnType("boolean")
                        .HasColumnName("custom_icon");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Nsfw")
                        .HasColumnType("boolean")
                        .HasColumnName("nsfw");

                    b.Property<string>("OldIconUrl")
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.HasKey("Id");

                    b.ToTable("planets");
                });

            modelBuilder.Entity("Valour.Database.PlanetBan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint")
                        .HasColumnName("issuer_id");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime?>("TimeExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_expires");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("planet_bans");
                });

            modelBuilder.Entity("Valour.Database.PlanetInvite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint")
                        .HasColumnName("issuer_id");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime?>("TimeExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_expires");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId")
                        .IsUnique();

                    b.HasIndex("PlanetId");

                    b.HasIndex("TimeCreated", "TimeExpires");

                    b.ToTable("planet_invites", (string)null);
                });

            modelBuilder.Entity("Valour.Database.PlanetMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MemberAvatar")
                        .HasColumnType("text")
                        .HasColumnName("member_pfp");

                    b.Property<string>("Nickname")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("nickname");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long>("RoleHashKey")
                        .HasColumnType("bigint")
                        .HasColumnName("role_hash_key");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.HasIndex("RoleHashKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "PlanetId")
                        .IsUnique();

                    b.ToTable("planet_members", (string)null);
                });

            modelBuilder.Entity("Valour.Database.PlanetRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AnyoneCanMention")
                        .HasColumnType("boolean")
                        .HasColumnName("anyone_can_mention");

                    b.Property<bool>("Bold")
                        .HasColumnType("boolean")
                        .HasColumnName("bold");

                    b.Property<long>("CategoryPermissions")
                        .HasColumnType("bigint")
                        .HasColumnName("cat_perms");

                    b.Property<long>("ChatPermissions")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_perms");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("Italics")
                        .HasColumnType("boolean")
                        .HasColumnName("italics");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint")
                        .HasColumnName("permissions");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<long>("VoicePermissions")
                        .HasColumnType("bigint")
                        .HasColumnName("voice_perms");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("planet_roles");
                });

            modelBuilder.Entity("Valour.Database.PlanetRoleMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<long>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("planet_role_members");
                });

            modelBuilder.Entity("Valour.Database.Referral", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("ReferrerId")
                        .HasColumnType("bigint")
                        .HasColumnName("referrer_id");

                    b.Property<decimal>("Reward")
                        .HasColumnType("numeric")
                        .HasColumnName("reward");

                    b.HasKey("UserId");

                    b.HasIndex("ReferrerId");

                    b.ToTable("referrals");
                });

            modelBuilder.Entity("Valour.Database.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<string>("LongReason")
                        .HasColumnType("text")
                        .HasColumnName("long_reason");

                    b.Property<long?>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<long?>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.Property<long>("ReasonCode")
                        .HasColumnType("bigint")
                        .HasColumnName("reason_code");

                    b.Property<long>("ReportingUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("reporting_user_id");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("reviewed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("ReportingUserId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Valour.Database.StatObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryCount")
                        .HasColumnType("integer")
                        .HasColumnName("category_count");

                    b.Property<int>("ChannelCount")
                        .HasColumnType("integer")
                        .HasColumnName("channel_count");

                    b.Property<int>("MessageDayCount")
                        .HasColumnType("integer")
                        .HasColumnName("message_day_count");

                    b.Property<int>("MessagesSent")
                        .HasColumnType("integer")
                        .HasColumnName("messages_sent");

                    b.Property<int>("PlanetCount")
                        .HasColumnType("integer")
                        .HasColumnName("planet_count");

                    b.Property<int>("PlanetMemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("planet_member_count");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<int>("UserCount")
                        .HasColumnType("integer")
                        .HasColumnName("user_count");

                    b.HasKey("Id");

                    b.ToTable("stat_objects");
                });

            modelBuilder.Entity("Valour.Database.TenorFavorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("TenorId")
                        .HasColumnType("text")
                        .HasColumnName("tenor_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("tenor_favorites");
                });

            modelBuilder.Entity("Valour.Database.Themes.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("CustomCss")
                        .HasColumnType("text")
                        .HasColumnName("custom_css");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FontAltColor")
                        .HasColumnType("text")
                        .HasColumnName("font_alt_color");

                    b.Property<string>("FontColor")
                        .HasColumnType("text")
                        .HasColumnName("font_color");

                    b.Property<bool>("HasAnimatedBanner")
                        .HasColumnType("boolean")
                        .HasColumnName("animated_banner");

                    b.Property<bool>("HasCustomBanner")
                        .HasColumnType("boolean")
                        .HasColumnName("custom_banner");

                    b.Property<string>("LinkColor")
                        .HasColumnType("text")
                        .HasColumnName("link_color");

                    b.Property<string>("MainColor1")
                        .HasColumnType("text")
                        .HasColumnName("main_color_1");

                    b.Property<string>("MainColor2")
                        .HasColumnType("text")
                        .HasColumnName("main_color_2");

                    b.Property<string>("MainColor3")
                        .HasColumnType("text")
                        .HasColumnName("main_color_3");

                    b.Property<string>("MainColor4")
                        .HasColumnType("text")
                        .HasColumnName("main_color_4");

                    b.Property<string>("MainColor5")
                        .HasColumnType("text")
                        .HasColumnName("main_color_5");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PastelCyan")
                        .HasColumnType("text")
                        .HasColumnName("pastel_cyan");

                    b.Property<string>("PastelCyanPurple")
                        .HasColumnType("text")
                        .HasColumnName("pastel_cyan_purple");

                    b.Property<string>("PastelPurple")
                        .HasColumnType("text")
                        .HasColumnName("pastel_purple");

                    b.Property<string>("PastelRed")
                        .HasColumnType("text")
                        .HasColumnName("pastel_red");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<string>("TintColor")
                        .HasColumnType("text")
                        .HasColumnName("tint_color");

                    b.Property<string>("VibrantBlue")
                        .HasColumnType("text")
                        .HasColumnName("vibrant_blue");

                    b.Property<string>("VibrantCyan")
                        .HasColumnType("text")
                        .HasColumnName("vibrant_cyan");

                    b.Property<string>("VibrantPurple")
                        .HasColumnType("text")
                        .HasColumnName("vibrant_purple");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("themes");
                });

            modelBuilder.Entity("Valour.Database.Themes.ThemeVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Sentiment")
                        .HasColumnType("boolean")
                        .HasColumnName("sentiment");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("theme_votes");
                });

            modelBuilder.Entity("Valour.Database.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Bot")
                        .HasColumnType("boolean")
                        .HasColumnName("bot");

                    b.Property<bool>("Compliance")
                        .HasColumnType("boolean")
                        .HasColumnName("compliance");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled");

                    b.Property<bool>("HasAnimatedAvatar")
                        .HasColumnType("boolean")
                        .HasColumnName("animated_avatar");

                    b.Property<bool>("HasCustomAvatar")
                        .HasColumnType("boolean")
                        .HasColumnName("custom_avatar");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mobile");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NameChangeTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("name_change_time");

                    b.Property<string>("OldAvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("pfp_url");

                    b.Property<string>("PriorName")
                        .HasColumnType("text")
                        .HasColumnName("prior_name");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text")
                        .HasColumnName("subscription_type");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<DateTime>("TimeJoined")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_joined");

                    b.Property<DateTime>("TimeLastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_last_active");

                    b.Property<int>("UserStateCode")
                        .HasColumnType("integer")
                        .HasColumnName("user_state_code");

                    b.Property<bool>("ValourStaff")
                        .HasColumnType("boolean")
                        .HasColumnName("valour_staff");

                    b.HasKey("Id");

                    b.HasIndex("TimeLastActive");

                    b.HasIndex("Tag", "Name")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Valour.Database.UserChannelState", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("LastViewedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_viewed_time");

                    b.Property<long?>("PlanetId")
                        .HasColumnType("bigint")
                        .HasColumnName("planet_id");

                    b.HasKey("UserId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("UserId");

                    b.ToTable("user_channel_states", (string)null);
                });

            modelBuilder.Entity("Valour.Database.UserFriend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FriendId")
                        .HasColumnType("bigint")
                        .HasColumnName("friend_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("user_friends");
                });

            modelBuilder.Entity("Valour.Database.UserPrivateInfo", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("JoinInviteCode")
                        .HasColumnType("text")
                        .HasColumnName("join_invite_code");

                    b.Property<string>("JoinSource")
                        .HasColumnType("text")
                        .HasColumnName("join_source");

                    b.Property<int?>("Locality")
                        .HasColumnType("integer")
                        .HasColumnName("locality");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.HasKey("Email");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_emails");
                });

            modelBuilder.Entity("Valour.Database.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AnimatedBorder")
                        .HasColumnType("boolean")
                        .HasColumnName("anim_border");

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("text")
                        .HasColumnName("bg_image");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("BorderColor")
                        .HasColumnType("text")
                        .HasColumnName("border_color");

                    b.Property<string>("GlowColor")
                        .HasColumnType("text")
                        .HasColumnName("glow_color");

                    b.Property<string>("Headline")
                        .HasColumnType("text")
                        .HasColumnName("headline");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text")
                        .HasColumnName("primary_color");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text")
                        .HasColumnName("secondary_color");

                    b.Property<string>("TertiaryColor")
                        .HasColumnType("text")
                        .HasColumnName("tertiary_color");

                    b.Property<string>("TextColor")
                        .HasColumnType("text")
                        .HasColumnName("text_color");

                    b.HasKey("Id");

                    b.ToTable("user_profiles");
                });

            modelBuilder.Entity("Valour.Database.UserSubscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("cancelled");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("LastCharged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_charged");

                    b.Property<int>("Renewals")
                        .HasColumnType("integer")
                        .HasColumnName("renewals");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_subscriptions", (string)null);
                });

            modelBuilder.Entity("Valour.Database.AuthToken", b =>
                {
                    b.HasOne("Valour.Database.User", "User")
                        .WithMany("AuthTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Channel", b =>
                {
                    b.HasOne("Valour.Database.Channel", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany("Channels")
                        .HasForeignKey("PlanetId");

                    b.Navigation("Parent");

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("Valour.Database.ChannelMember", b =>
                {
                    b.HasOne("Valour.Database.Channel", "Channel")
                        .WithMany("Members")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Credential", b =>
                {
                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Economy.EcoAccount", b =>
                {
                    b.HasOne("Valour.Database.PlanetMember", "PlanetMember")
                        .WithMany()
                        .HasForeignKey("PlanetMemberId");

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanetMember");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Economy.Transaction", b =>
                {
                    b.HasOne("Valour.Database.Economy.EcoAccount", "AccountFrom")
                        .WithMany()
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.Economy.EcoAccount", "AccountTo")
                        .WithMany()
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "UserFrom")
                        .WithMany()
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "UserTo")
                        .WithMany()
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountFrom");

                    b.Navigation("AccountTo");

                    b.Navigation("Planet");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("Valour.Database.EmailConfirmCode", b =>
                {
                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Message", b =>
                {
                    b.HasOne("Valour.Database.PlanetMember", "AuthorMember")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorMemberId");

                    b.HasOne("Valour.Database.User", "AuthorUser")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany("Messages")
                        .HasForeignKey("PlanetId");

                    b.HasOne("Valour.Database.Message", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId");

                    b.Navigation("AuthorMember");

                    b.Navigation("AuthorUser");

                    b.Navigation("Channel");

                    b.Navigation("Planet");

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("Valour.Database.NotificationSubscription", b =>
                {
                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.OauthApp", b =>
                {
                    b.HasOne("Valour.Database.User", "Owner")
                        .WithMany("OwnedApps")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Valour.Database.PasswordRecovery", b =>
                {
                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.PermissionsNode", b =>
                {
                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.PlanetRole", "Role")
                        .WithMany("PermissionNodes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.Channel", "Target")
                        .WithMany("Permissions")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");

                    b.Navigation("Role");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Valour.Database.PlanetBan", b =>
                {
                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("Valour.Database.PlanetInvite", b =>
                {
                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany("Invites")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("Valour.Database.PlanetMember", b =>
                {
                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany("Members")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany("Membership")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.PlanetRole", b =>
                {
                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany("Roles")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("Valour.Database.PlanetRoleMember", b =>
                {
                    b.HasOne("Valour.Database.PlanetMember", "Member")
                        .WithMany("RoleMembership")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany("RoleMembers")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.PlanetRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Planet");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Referral", b =>
                {
                    b.HasOne("Valour.Database.User", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referrer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Themes.Theme", b =>
                {
                    b.HasOne("Valour.Database.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Valour.Database.Themes.ThemeVote", b =>
                {
                    b.HasOne("Valour.Database.Themes.Theme", "Theme")
                        .WithMany("ThemeVotes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.UserChannelState", b =>
                {
                    b.HasOne("Valour.Database.Channel", "Channel")
                        .WithMany("UserChannelStates")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.Planet", "Planet")
                        .WithMany("UserChannelStates")
                        .HasForeignKey("PlanetId");

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany("ChannelStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Planet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.UserFriend", b =>
                {
                    b.HasOne("Valour.Database.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valour.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.UserPrivateInfo", b =>
                {
                    b.HasOne("Valour.Database.User", "User")
                        .WithOne("PrivateInfo")
                        .HasForeignKey("Valour.Database.UserPrivateInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.UserSubscription", b =>
                {
                    b.HasOne("Valour.Database.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valour.Database.Channel", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("Permissions");

                    b.Navigation("UserChannelStates");
                });

            modelBuilder.Entity("Valour.Database.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Valour.Database.Planet", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("RoleMembers");

                    b.Navigation("Roles");

                    b.Navigation("UserChannelStates");
                });

            modelBuilder.Entity("Valour.Database.PlanetMember", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("RoleMembership");
                });

            modelBuilder.Entity("Valour.Database.PlanetRole", b =>
                {
                    b.Navigation("PermissionNodes");
                });

            modelBuilder.Entity("Valour.Database.Themes.Theme", b =>
                {
                    b.Navigation("ThemeVotes");
                });

            modelBuilder.Entity("Valour.Database.User", b =>
                {
                    b.Navigation("AuthTokens");

                    b.Navigation("ChannelStates");

                    b.Navigation("Membership");

                    b.Navigation("Messages");

                    b.Navigation("OwnedApps");

                    b.Navigation("PrivateInfo");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
