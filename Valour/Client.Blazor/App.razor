@using Valour.Sdk.Client
@using Valour.Client.Device
@using Valour.Client.Layout
@using Valour.Client.Components.Utility
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Routing
@using Blazored.LocalStorage
@using Valour.Client.Components.Sounds
@using Valour.Client.Utility
@using Valour.Client.Components.Theme
@using Valour.Client.Components.DockWindows
@using Valour.Sdk.Services
@using Valour.Client.Components.Tooltips

@inject ValourClient Client
@inject LoggingService Logger
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage

<BrowserUtils OnReady="@ReadyAsync" />

<UpdateBanner />

<!-- Enable app sounds -->
<SoundsComponent @key="@("sounds-component")"></SoundsComponent>

<!-- Enable event listeners -->
<KeyboardListener />
<MouseListener />

<!-- Enable themes -->
<ThemeComponent />

<!-- Window Target helper -->
<WindowTargetScanner />

<TooltipRoot />

@if (_triedInitialLogin)
{
    <!-- Main routing component -->
    <Router AppAssembly="@typeof(Valour.Client.Pages.Index).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
}
else
{
    <Loading Subtext='Logging you in...'></Loading>
}

@code{
    private bool _triedInitialLogin;

    protected override async Task OnInitializedAsync()
    {
        Logger.AddColorLogger(Log); // Add 
        await DevicePreferences.LoadPreferences(LocalStorage);
        Logger.Log("App", "Loaded user preferences", "magenta");
    }

    // Runs when page is initialized
    private async Task ReadyAsync()
    {
        var uriData = await BrowserUtils.GetUriData();
        Logger.Log("App", $"Origin is {uriData.Origin}", "magenta");
        
        // Set the origin for the client
        // We do this here because while the value is assumed in Program.cs here
        // we have access to the JS runtime to get the actual value
        Client.SetOrigin(uriData.Origin + "/");
        
        _ = JsRuntime.InvokeAsync<object>(
            "blazorFuncs.registerClient",
            DotNetObjectReference.Create(this)
        );
    }

    private Task OnBrowserReady()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await FirstRenderAsync();
            
            var isMobile = await JsRuntime.InvokeAsync<bool>("IsMobile");
            var isEmbedded = await JsRuntime.InvokeAsync<bool>("IsEmbedded");

            DeviceInfo.IsMobile = isMobile;
            DeviceInfo.IsEmbedded = isEmbedded;
            
            if (!Client.IsLoggedIn)
            {
                var localToken = await LocalStorage.GetItemAsStringAsync("token");

                if (!string.IsNullOrWhiteSpace(localToken))
                {
                    var result = await Client.InitializeUser(localToken);

                    if (result.Code == 401)
                    {
                        // Clear cookie
                        await LocalStorage.RemoveItemAsync("token");
                    }

                    if (result.Success) {
                        Log("App", $"Auto-logged user {Client.Me.Name}", "magenta");
                    }
                } 
            }

            _triedInitialLogin = true;
            Log("App", $"Tried initial login. Status: {Client.IsLoggedIn}", "magenta");

            StateHasChanged();
        }
    }
    
    public void Log(string prefix, string msg, string color)
    {
        _ = JsRuntime.InvokeVoidAsync($"Log", $"[{prefix}] {msg}", color);
    }

    /* TODO: Fix push subscriptions
    [JSInvokable("NotifyPushSub")]
    public static async Task NotifyPushSub(string endpoint, string key, string auth)
    {
        Sdk.Models.NotificationSubscription not = new()
        {
            Endpoint = endpoint,
            Auth = auth,
            Key = key,
            UserId = Client.Self.Id
        };

        // Send subscription information to server
        var response = await Client.PrimaryNode.PostAsyncWithResponse<TaskResult>($"Notification/SubmitSubscription", not);
        Console.WriteLine(response.Message);
    }
    */
}
